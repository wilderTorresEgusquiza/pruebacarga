{"version":3,"sources":["webpack:///./node_modules/videojs-contrib-hls/dist/videojs-contrib-hls.js","webpack:///./src/views/extensions/VideoPlayer.vue?d5ab","webpack:///src/views/extensions/VideoPlayer.vue","webpack:///./src/views/extensions/VideoPlayer.vue?4377","webpack:///./src/views/extensions/VideoPlayer.vue"],"names":["require","f","module","exports","define","e","t","n","r","s","o","u","a","i","Error","code","l","call","length","1","Object","defineProperty","value","_slicedToArray","sliceIterator","arr","_arr","_n","_d","_e","undefined","_s","_i","Symbol","iterator","next","done","push","err","Array","isArray","TypeError","_interopRequireDefault","obj","__esModule","default","_globalWindow","_globalWindow2","findAdCue","track","mediaTime","cues","cue","adStartTime","adEndTime","updateAdCues","media","offset","arguments","segments","segment","duration","endTime","VTTCue","cueOut","parseFloat","addCue","adOffset","adTotal","_segment$cueOutCont$split$map","cueOutCont","split","map","_segment$cueOutCont$split$map2","global/window","2","textRange","range","start","end","formatHexString","toString","substring","formatAsciiString","String","fromCharCode","createTransferableMessage","message","transferable","keys","forEach","key","ArrayBuffer","isView","bytes","buffer","byteOffset","byteLength","initSegmentId","initSegment","byterange","Infinity","resolvedUri","join","utils","hexDump","data","prototype","slice","step","result","hex","ascii","j","tagDump","tag","textRanges","ranges","3","GOAL_BUFFER_LENGTH","MAX_GOAL_BUFFER_LENGTH","GOAL_BUFFER_LENGTH_RATE","BANDWIDTH_VARIANCE","BUFFER_LOW_WATER_LINE","MAX_BUFFER_LOW_WATER_LINE","BUFFER_LOW_WATER_LINE_RATE","4","_aesDecrypter","_binUtils","DecrypterWorker","self","onmessage","event","encrypted","Uint8Array","Uint32Array","iv","Decrypter","postMessage","source","decrypted","./bin-utils","aes-decrypter","5","global","_createClass","defineProperties","target","props","descriptor","enumerable","configurable","writable","Constructor","protoProps","staticProps","_get","_x","_x2","_x3","_again","object","property","receiver","Function","desc","getOwnPropertyDescriptor","getter","get","parent","getPrototypeOf","_classCallCheck","instance","_inherits","subClass","superClass","create","constructor","setPrototypeOf","__proto__","_playlistLoader","_playlistLoader2","_playlistJs","_segmentLoader","_segmentLoader2","_vttSegmentLoader","_vttSegmentLoader2","_ranges","_ranges2","_videoJs","window","_videoJs2","_adCueTags","_adCueTags2","_syncController","_syncController2","_videojsContribMediaSourcesEs5CodecUtils","_webwackify","_webwackify2","_decrypterWorker","_decrypterWorker2","_config","_config2","_utilCodecsJs","_mediaGroups","ABORT_EARLY_BLACKLIST_SECONDS","Hls","defaultCodecs","videoCodec","videoObjectTypeIndicator","audioProfile","loaderStats","sumLoaderStat","stat","this","audioSegmentLoader_","mainSegmentLoader_","resolveDecrypterWorker","resolve","mapLegacyAvcCodecs_","codecString","replace","match","translateLegacyCodecs","makeMimeTypeString","type","container","codecs","filter","c","getContainerType","getCodecs","mediaAttributes","attributes","CODECS","parseCodecs","mimeTypesForPlaylist_","master","containerType","codecInfo","isMuxed","isMaat","mediaGroups","AUDIO","audioGroup","groupId","uri","log","warn","codecStrings","video","audio","justAudio","justVideo","bothVideoAudio","MasterPlaylistController","_videojs$EventTarget","options","_this","url","withCredentials","mode","tech","bandwidth","externHls","useCueTags","blacklistDuration","enableLowInitialPlaylist","tech_","hls_","hls","mode_","useCueTags_","cueTagsTrack_","addTextTrack","inBandMetadataTrackDispatchType","requestOptions_","timeout","mediaTypes_","createMediaTypes","mediaSource","MediaSource","addEventListener","handleSourceOpen_","bind","seekable_","createTimeRanges","hasPlayed_","syncController_","segmentMetadataTrack_","addRemoteTextTrack","kind","label","decrypter_","segmentLoaderSettings","currentTime","seekable","seeking","hasPlayed","goalBufferLength","syncController","decrypter","masterPlaylistLoader_","setupMasterPlaylistLoaderListeners_","mergeOptions","segmentMetadataTrack","loaderType","subtitleSegmentLoader_","setupSegmentLoaderListeners_","load","_this2","on","requestTimeout","targetDuration","isLowestEnabledRendition","endList","preload","playlist","setupMediaGroups","segmentLoaders","SUBTITLES","main","requestOptions","masterPlaylistLoader","mediaTypes","blacklistCurrentPlaylist","triggerPresenceUsage_","setupSourceBuffers_","endOfStream","setupFirstPlay","trigger","updatedPlaylist","selectedMedia","selectInitialPlaylist","selectPlaylist","initialMedia_","updateAdCues_","updateDuration","paused","addSeekableRange","addSeekableRange_","onDurationchange","one","error","abort","pause","bubbles","playlistOutdated","stuckAtPlaylistEnd_","name","defaultDemuxed","audioGroupKeys","mediaGroup","properties","Playlist","isAes","isFmp4","_this3","nextPlaylist","currentPlaylist","buffered","forwardBuffer","bufferLowWaterLine","BANDWIDTH","onSyncInfoUpdate_","onEndOfStream","mapping","Math","max","mediaSecondsLoaded","activePlaylistLoader","resetLoader","ended","setCurrentTime","_this4","_ret3","browser","IE_VERSION","readyState","v","autoplay","playPromise","play","then","isEndOfStream","ended_","expired","getExpiredTime","absolutePlaylistEnd","playlistEnd","SAFE_TIME_DELTA","bufferedEnd","isFinalRendition","playlists","isEnabled","excludeUntil","Date","now","findRange","resetEverything","mainSeekable","audioSeekable","_this5","oldDuration","newDuration","setDuration","removeEventListener","_this6","terminate","dispose","groups","id","group","playlistLoader","mimeTypes","mimeType","excludeIncompatibleVariants_","codecCount","variant","variantCodecs","isTypeSupported","initial","rate","min","EventTarget","./ad-cue-tags","./config","./decrypter-worker","./media-groups","./playlist-loader","./playlist.js","./ranges","./segment-loader","./sync-controller","./util/codecs.js","./vtt-segment-loader","videojs-contrib-media-sources/es5/codec-utils","webwackify","6","noop","audioTrackKind_","characteristics","indexOf","stopLoaders","segmentLoader","mediaType","startLoaders","onGroupChanged","settings","_settings$segmentLoaders","mainSegmentLoader","activeTrack","activeGroup","previousActiveLoader","resyncLoader","onTrackChanged","_settings$segmentLoaders2","onError","defaultTrack","tracks","trackId","enabled","setupListeners","initialize","_settings$mediaTypes$type","variantLabel","AudioTrack","language","_settings$mediaTypes$type2","forced","CLOSED-CAPTIONS","_settings$mediaTypes$type3","instreamId","variants","onAudioTrackChanged","audioTracks","remoteTextTracks","clearTracks","addTrack","7","REQUEST_ERRORS","FAILURE","TIMEOUT","ABORTED","byterangeStr","byterangeStart","byterangeEnd","segmentXhrHeaders","headers","Range","abortAll","activeXhrs","xhr","getRequestStats","request","bytesReceived","roundTripTime","getProgressStats","progressEvent","requestTime","stats","loaded","floor","handleErrors","timedout","status","aborted","handleKeyResponse","finishProcessingFn","response","errorObj","view","DataView","getUint32","handleInitSegmentResponse","handleSegmentResponse","encryptedBytes","decryptSegment","doneFn","decryptionHandler","requestId","getMostImportantError","errors","reduce","prev","waitForCompletion","count","endOfAllRequests","worstError","handleProgress","progressFn","firstBytesReceivedAt","mediaSegmentRequest","xhrOptions","decryptionWorker","keyRequestOptions","responseType","keyRequestCallback","keyXhr","initSegmentOptions","initSegmentRequestCallback","initSegmentXhr","segmentRequestOptions","segmentRequestCallback","segmentXhr","8","timerCancelEvents","PlaybackWatcher","consecutiveUpdates","lastRecordedTime","timer_","checkCurrentTimeTimeout_","debug","logger_","canPlayHandler","monitorCurrentTime_","waitingHandler","techWaiting_","cancelTimerHandler","cancelTimer_","fixesBadSeeksHandler","fixesBadSeeks_","off","clearTimeout","checkCurrentTime_","setTimeout","waiting_","seekTo","afterSeekableWindow_","seekableEnd","beforeSeekableWindow_","seekableStart","printableRange","currentRange","livePoint","nextRange","findNextRange","videoUnderflow_","difference","skipTheGap_","gap","gapFromVideoUnderflow_","scheduledCurrentTime","TIME_FUDGE_FACTOR","gaps","findGaps","9","_resolveUrl","_resolveUrl2","_m3u8Parser","_m3u8Parser2","updateSegments","original","update","resolveSegmentUris","baseUri","updateMaster","p","mediaSequence","mergedPlaylist","setupMediaPlaylists","resolveMediaGroupUris","groupKey","labelKey","mediaProperties","refreshDelay","lastSegment","delay","PlaylistLoader","_EventTarget","srcUrl","state","req","playlistRequestError","haveMetadata","startingState","responseText","parser","Parser","manifest","media_","mediaUpdateTimeout","stopRequest","oldRequest","onreadystatechange","mediaChange","started","VIDEO","location","href","./resolve-url","m3u8-parser","10","_playlist","_playlist2","safeGetComputedStyle","el","getComputedStyle","stableSort","array","sortFn","newArray","sort","left","right","cmp","comparePlaylistBandwidth","leftBandwidth","rightBandwidth","Number","MAX_VALUE","comparePlaylistResolution","leftWidth","rightWidth","RESOLUTION","width","simpleSelector","playerBandwidth","playerWidth","playerHeight","sortedPlaylistReps","height","rep","isIncompatible","enabledPlaylistReps","isDisabled","bandwidthPlaylistReps","highestRemainingBandwidthRep","bandwidthBestRep","haveResolution","resolutionBestRepList","resolutionBestRep","resolutionPlusOneList","resolutionPlusOneSmallest","resolutionPlusOneRep","chosenRep","lastBandwidthSelector","systemBandwidth","parseInt","movingAverageBandwidthSelector","decay","average","minRebufferMaxBandwidthSelector","segmentDuration","timeUntilRebuffer","currentTimeline","compatiblePlaylists","enabledPlaylists","bandwidthPlaylists","hasAttribute","rebufferingEstimates","syncPoint","getSyncPoint","numRequests","requestTimeEstimate","estimateSegmentRequestTime","rebufferingImpact","noRebufferingPlaylists","estimate","b","lowestBitrateCompatibleVariantSelector","playlistsWithVideo","./playlist","11","backwardDuration","endSequence","precise","forwardDuration","intervalDuration","backward","forward","totalDuration","sumDurations","startIndex","endIndex","durations","_ref","safeLiveIndex","distanceFromEnd","safeDistance","useSafeLiveEnd","createTimeRange","isWholeNumber","num","roundSignificantDigit","increment","numDecimalDigits","scale","pow","temp","ceilLeastSignificantDigit","floorLeastSignificantDigit","getMediaInfoForTime","startTime","numSegments","time","mediaIndex","isBlacklisted","blacklisted","disabled","attr","NaN","size","currentBandwidth","12","clamp","_ref2","filterRanges","timeRanges","predicate","results","findSoleUncommonTimeRangesEnd","edges","overlapsCurrentEnd","span","some","bufferIntersection","bufferA","bufferB","arity","extents","calculateBufferedPercent","adjustedRange","referenceRange","referenceDuration","adjustedDuration","bufferMissingFromAdjusted","adjustedIntersection","referenceIntersection","adjustedOverlap","referenceOverlap","getSegmentBufferedPercent","startOfSegment","endOfSegment","originalSegmentRange","adjustedSegmentRange","percent","isNaN","strArr","playbackRate","13","defaultOptions","errorInterval","getSource","IWillNotUseThisInPlugins","sourceObj","currentSource_","initPlugin","player","lastCalled","localOptions","ready","loadedMetadataHandler","setSource","src","errorHandler","cleanupEvents","reinitPlugin","newOptions","reloadSourceOnError","14","enableFunction","loader","playlistUri","changePlaylistFn","enable","incompatible","currentlyEnabled","Representation","hlsHandler","fastChangeFunction","masterPlaylistController_","fastQualityChange_","resolution","renditionSelectionMixin","representations","15","_urlToolkit","_urlToolkit2","resolveUrl","baseURL","relativeURL","test","buildAbsoluteURL","url-toolkit","16","_x4","_x5","_x6","_sourceUpdater","_sourceUpdater2","_videojsContribMediaSourcesEs5RemoveCuesFromTrackJs","_videojsContribMediaSourcesEs5RemoveCuesFromTrackJs2","_mediaSegmentRequest","_playlistSelectors","CHECK_BUFFER_DELAY","detectEndOfStream","segmentIndex","appendedLastSegment","finite","isFinite","illegalMediaSwitch","startingMedia","newSegmentMedia","containsAudio","containsVideo","safeBackBufferTrimTime","removeToTime","SegmentLoader","throughput","roundTrip","resetStats_","currentTime_","seeking_","duration_","mediaSource_","loaderType_","startingMedia_","goalBufferLength_","checkBufferTimeout_","error_","currentTimeline_","pendingSegment_","mimeType_","sourceUpdater_","xhrOptions_","activeInitSegmentId_","initSegments_","syncPoint_","fetchAtBuffer_","mediaBytesTransferred","mediaRequests","mediaRequestsAborted","mediaRequestsTimedout","mediaRequestsErrored","mediaTransferDuration","abort_","monitorBuffer_","abortRequests","_error","set","storedMap","playlist_","setDateTimeMapping","couldBeginLoading_","init_","newPlaylist","oldPlaylist","segmentInfo","syncInfo","mediaSequenceDiff","saveExpiredSegmentInfo","_mimeType","remove","monitorBufferTick_","fillBuffer_","updating","checkBuffer_","buffered_","timeline","timestampOffset","reset","loadSegment_","lastBufferedEnd","bufferedTime","getSyncSegmentCandidate_","generateSegmentInfo_","mediaSourceInfo","segmentIndexArray","isSyncRequest","random","measuredBandwidth","requestTimeRemaining","switchCandidate","timeSavedBySwitching","minimumTimeSaving","simpleSegment","abortRequestEarly_","trimBackBuffer_","createSimplifiedSegmentObj_","handleProgress_","segmentRequestFinished_","processSegmentResponse_","handleSegment_","timingInfo","probeSegmentInfo","illegalMediaSwitchError","timelineMapping","mappingForTimeline","initId","appendBuffer","handleUpdateEnd_","isWalkingForward","recordThroughput_","addSegmentMetadataCue_","segmentProcessingTime","segmentProcessingThroughput","Cue","WebKitDataCue","JSON","stringify","./media-segment-request","./playlist-selectors","./source-updater","videojs-contrib-media-sources/es5/remove-cues-from-track.js","17","SourceUpdater","createSourceBuffer","sourceBuffer_","addSourceBuffer","onUpdateendCallback_","pendingCallback","pendingCallback_","runCallback_","callbacks_","timestampOffset_","processedAppend_","queueCallback_","callback","callbacks","shift","18","_muxJsLibMp4Probe","_muxJsLibMp4Probe2","_muxJsLibToolsTsInspectorJs","syncPointStrategies","run","datetimeToDisplayTime","dateTimeObject","playlistTime","getTime","playlistStart","lastDistance","distance","abs","discontinuityStarts","discontinuity","discontinuitySequence","discontinuitySync","discontinuities","SyncController","inspectCache_","timelines","syncPoints","runStrategies_","selectSyncPoint_","strategy","bestSyncPoint","bestDistance","bestStrategy","newDistance","lastRemovedSegment","playlistTimestamp","probeMp4Segment_","probeTsSegment_","calculateSegmentTimeMapping_","saveDiscontinuitySyncInfo_","timescales","timescale","timeInfo","inspect","segmentStartTime","segmentEndTime","dts","dtsTime","mappingObj","accuracy","mediaIndexDiff","mux.js/lib/mp4/probe","mux.js/lib/tools/ts-inspector.js","19","parsed","exec","20","VTT_LINE_TERMINATORS","char","charCodeAt","uintToString","uintArray","apply","VTTSegmentLoader","_SegmentLoader","subtitlesTrack_","combinedByteLength","combinedSegment","_track","skipEmptySegments_","timestampOffsetForTimeline","checkTimestampOffset","empty","WebVTT","_ret","loadHandler","requested","parseVTTCues_","updateTimeMapping_","decoder","decodeBytesToString","TextDecoder","StringDecoder","vttjs","timestampmap","MPEGTS","LOCAL","oncue","ontimestampmap","onparsingerror","mapData","parse","segmentData","flush","diff","firstStart","lastStart","21","xhrFactory","XhrFunction","beforeRequest","reqResponse","responseTime","statusCode","originalAbort","22","precompute","tables","encTable","decTable","sbox","sboxInv","x","xInv","d","th","x2","x4","x8","tEnc","tDec","aesTables","AES","_tables","tmp","encKey","decKey","keyLen","rcon","_key","encrypted0","encrypted1","encrypted2","encrypted3","out","a2","b2","c2","nInnerRounds","kIndex","table","table0","table1","table2","table3","23","_stream","_stream2","AsyncStream","_Stream","jobs","timeout_","processJob_","job","./stream","24","_aes","_aes2","_asyncStream","_asyncStream2","_pkcs7","ntoh","word","decrypt","initVector","encrypted32","Int32Array","decipher","decrypted32","init0","init1","init2","init3","wordIx","STEP","asyncStream_","decryptChunk_","subarray","unpad","./aes","./async-stream","pkcs7","25","_decrypter","./decrypter","26","Stream","listeners","listener","index","splice","args","destination","27","PADDING","plaintext","padding","28","pad","./pad.js","./unpad.js","29","padded","30","31","doccy","topLevel","minDoc","document","min-document","32","win","33","_lineStream","_lineStream2","_parseStream","_parseStream2","_parser","_parser2","LineStream","ParseStream","./line-stream","./parse-stream","./parser","34","_possibleConstructorReturn","ReferenceError","nextNewline","35","attributeSeparator","keyvalue","RegExp","parseAttributes","attrs","line","tagType","title","version","number","playlistType","allowed","URI","BYTERANGE","_attributes$BYTERANGE","_attributes$BYTERANGE2","dateTimeString","IV","toLowerCase","text","36","_extends","assign","hasOwnProperty","lineStream","parseStream","pipe","uris","currentUri","currentMap","defaultMediaGroups","allowCache","entry","rendition","allow-cache","endlist","inf","METHOD","method","media-sequence","discontinuity-sequence","playlist-type","stream-inf","TYPE","NAME","mediaGroupType","DEFAULT","autoselect","AUTOSELECT","LANGUAGE","CHARACTERISTICS","FORCED","program-date-time","targetduration","totalduration","cue-out","cue-out-cont","cue-in","cueIn","comment","chunk","37","38","AacStream","everything","timeStamp","init","setTimestamp","timestamp","parseId3TagSize","header","byteIndex","returnSize","flags","footerPresent","parseAdtsSize","lowThree","middle","highTwo","bytesLeft","packet","tempLength","frameSize","pts","../utils/stream.js","39","ADTS_SAMPLING_FREQUENCIES","parseSyncSafeInteger","percentEncode","parseIso88591","unescape","parseType","parseSampleRate","parseAacTimestamp","frameStart","frame","frameHeader","owner","40","AdtsStream","frameLength","protectionSkipBytes","frameEnd","oldBuffer","sampleCount","adtsFrameDuration","frameNum","audioobjecttype","channelcount","samplerate","samplingfrequencyindex","samplesize","41","H264Stream","NalByteStream","PROFILES_WITH_OPTIONAL_SPS_DATA","ExpGolomb","swapBuffer","100","110","122","244","44","83","86","118","128","138","139","134","currentPts","currentDts","discardEmulationPreventionBytes","readSequenceParameterSet","skipScalingList","nalByteStream","nalUnitType","escapedRBSP","config","expGolombDecoder","deltaScale","lastScale","nextScale","readExpGolomb","newLength","newData","emulationPreventionBytesPositions","sourceIndex","profileIdc","levelIdc","profileCompatibility","chromaFormatIdc","picOrderCntType","numRefFramesInPicOrderCntCycle","picWidthInMbsMinus1","picHeightInMapUnitsMinus1","frameMbsOnlyFlag","scalingListCount","sarRatio","aspectRatioIdc","frameCropLeftOffset","frameCropRightOffset","frameCropTopOffset","frameCropBottomOffset","sarScale","readUnsignedByte","skipUnsignedExpGolomb","readUnsignedExpGolomb","skipBits","readBoolean","skipExpGolomb","readBits","ceil","../utils/exp-golomb.js","42","highPrefix","lowPrefix","zeroFill","makeTable","metaTable","part","concat","coneOfSilence","96000","88200","64000","48000","44100","32000","24000","16000","12000","11025","8000","43","CoalesceStream","numberOfTracks","metadataStream","videoTags","audioTags","videoTrack","audioTrack","pendingCaptions","pendingMetadata","pendingTracks","processedTracks","output","frames","tags","flushSource","id3","caption","timelineStartPts","captions","captionStreams","metadata","timelineStartInfo","startPts","endPts","stream","cueTime","dispatchType","FlvTag","getFlvHeader","metadataLength","headBytes","head","setUint8","setUint32","METADATA_TAG","writeMetaDataDouble","finalize","./flv-tag.js","45","extraData","adHoc","bufferStartSize","prepareWrite","flv","minLength","position","widthBytes","heightBytes","videocodecidBytes","keyFrame","VIDEO_TAG","AUDIO_TAG","writeBytes","writeByte","byte","writeShort","short","setUint16","negIndex","pos","nalUnitSize","startNalUnit","endNalUnit","nalContainer","nalStart","nalLength","val","setFloat64","writeMetaDataBoolean","dtsDelta","len","frameTime","isAudioFrame","isVideoFrame","isMetaData","isKeyFrame","46","Transmuxer","./flv-header","./flv-tag","./transmuxer","47","TagList","list","metaDataTag","48","VideoSegmentStream","AudioSegmentStream","collectTimelineInfo","extraDataTag","m2ts","sps","pps","oldExtraData","adtsFrames","videoKeyFrames","round","currentFrame","adtsFrame","lastMetaPts","writeMetaDataTags","onVideoKeyFrame","h264Frame","nalUnits","finishFrame","newMetadata","metaTag","extraTag","currentNal","packetStream","elementaryStream","videoTimestampRolloverStream","audioTimestampRolloverStream","timedMetadataTimestampRolloverStream","adtsStream","h264Stream","videoSegmentStream","audioSegmentStream","captionStream","coalesceStream","MetadataStream","TransportPacketStream","TransportParseStream","ElementaryStream","TimestampRolloverStream","CaptionStream","resetCaptions","../codecs/adts.js","../codecs/h264","../m2ts/m2ts.js","./coalesce-stream.js","./tag-list.js","49","USER_DATA_REGISTERED_ITU_T_T35","RBSP_TRAILING_BITS","parseSei","payloadType","payloadSize","payload","parseUserData","sei","parseCaptionPackets","userData","ccData","captionPackets_","ccStreams_","Cea608Stream","cc","latestDts_","ignoreNextEqualDts_","elem","idx","presortIndex","dispatchCea608Packet","activeCea608Channel_","ccStream","setsChannel1Active","setsChannel2Active","CHARACTER_TRANSLATION","92","94","95","96","123","124","125","126","127","304","305","306","307","308","309","310","311","312","313","314","315","316","317","318","319","544","545","546","547","548","549","550","551","552","553","554","555","556","557","558","559","560","561","562","563","564","565","566","567","568","569","570","571","572","573","574","575","800","801","802","803","804","805","806","807","808","809","810","811","812","813","814","815","816","817","818","819","820","821","822","823","824","825","826","827","828","829","830","831","getCharFromCode","BOTTOM_ROW","ROWS","createDisplayBuffer","field","dataChannel","field_","dataChannel_","name_","setConstants","swap","char0","char1","lastControlCode_","PADDING_","RESUME_CAPTION_LOADING_","END_OF_CAPTION_","clearFormatting","flushDisplayed","displayed_","nonDisplayed_","startPts_","ROLL_UP_2_ROWS_","topRow_","ROLL_UP_3_ROWS_","ROLL_UP_4_ROWS_","CARRIAGE_RETURN_","shiftRowsUp_","BACKSPACE_","ERASE_DISPLAYED_MEMORY_","ERASE_NON_DISPLAYED_MEMORY_","RESUME_DIRECT_CAPTIONING_","isSpecialCharacter","column_","isExtCharacter","row_","isMidRowCode","addFormatting","isOffsetControlCode","isPAC","row","formatting_","isColorPAC","isNormalChar","content","trim","BASE_","EXT_","CONTROL_","OFFSET_","format","reverse","popOn","baseRow","rollUp","paintOn","../utils/stream","50","StreamTypes","m2tsStreamTypes","MP2T_PACKET_LENGTH","SYNC_BYTE","bytesInBuffer","parsePsi","parsePat","parsePmt","packetsWaitingForPmt","programMapTable","psi","payloadUnitStartIndicator","pat","section_number","last_section_number","pmtPid","pmt","sectionLength","tableEnd","programInfoLength","timed-metadata","streamType","pid","H264_STREAM_TYPE","ADTS_STREAM_TYPE","METADATA_STREAM_TYPE","processPes_","STREAM_TYPES","h264","adts","timedMetadata","parsePes","pes","ptsDtsFlags","packetLength","dataAlignmentIndicator","flushStream","forceFlush","fragment","packetData","packetFlushable","baseMediaDecodeTime","codec","PAT_PID","./caption-stream","./metadata-stream","./stream-types","./stream-types.js","./timestamp-rollover-stream","51","parseUtf8","decodeURIComponent","tagParsers","TXXX","description","WXXX","PRIV","privateData","tagSize","bufferSize","console","52","parsePid","parsePayloadUnitStartIndicator","parseAdaptionField","pusi","payloadOffset","parsePesType","parsePesTime","parseNalUnitType","videoPacketContainsKeyFrame","nalType","frameBuffer","frameI","frameSyncPoint","foundKeyFrame","53","54","MAX_TS","RO_THRESH","handleRollover","reference","direction","lastDTS","referenceDTS","type_","55","generator","./mp4-generator","56","box","dinf","esds","ftyp","mdat","mfhd","minf","moof","moov","mvex","mvhd","trak","tkhd","mdia","mdhd","hdlr","sdtp","stbl","stsd","traf","trex","trun","types","MAJOR_BRAND","MINOR_VERSION","AVC1_BRAND","VIDEO_HDLR","AUDIO_HDLR","HDLR_TYPES","VMHD","SMHD","DREF","STCO","STSC","STSZ","STTS","UINT32_MAX","avc1","avcC","btrt","dref","mp4a","smhd","stco","stsc","stsz","stts","styp","tfdt","tfhd","vmhd","sequenceNumber","trackFragments","boxes","samples","dependsOn","isDependedOn","videoSample","audioSample","sequenceParameterSets","pictureParameterSets","trackFragmentHeader","trackFragmentDecodeTime","trackFragmentRun","sampleDependencyTable","dataOffset","upperWordBaseMediaDecodeTime","lowerWordBaseMediaDecodeTime","audioTrun","videoTrun","trunHeader","durationPresent","sizePresent","flagsPresent","compositionTimeOffset","sample","isLeading","hasRedundancy","paddingValue","isNonSyncSample","degradationPriority","fileType","movie","57","findBox","path","subresults","traks","trafs","baseTimes","baseTime","58","createDefaultSample","isLikelyAacData","collectDtsInfo","clearDtsInfo","calculateTrackBaseMediaDecodeTime","arrayEquals","sumFrameByteLengths","mp4","clock","AUDIO_PROPERTIES","VIDEO_PROPERTIES","ONE_SECOND_IN_TS","currentObj","sum","earliestAllowedDts","audioAppendStartTs","videoBaseMediaDecodeTime","prop","setEarliestDts","earliestDts","setVideoBaseMediaDecodeTime","setAudioAppendStart","trimAdtsFramesByEarliestDts_","prefixWithSilence_","generateSampleTable_","concatenateFrameData_","baseMediaDecodeTimeTs","silentFrame","frameDuration","audioGapDuration","audioFillFrameCount","audioFillDuration","audioTsToVideoTs","videoTsToAudioTs","minSegmentDts","minSegmentPts","gopsToAlignWith","minPTS","gopCache_","nalUnit","gopForFusion","gops","resetStream_","groupNalsIntoFrames_","groupFramesIntoGops_","getGopForFusion_","unshift","nalCount","extendFirstKeyFrame_","alignedGops","alignGopsAtEnd","alignGopsAtEnd_","alignGopsAtStart_","gop","pop","concatenateNalData_","dtsDistance","nearestGopObj","currentGop","currentGopObj","halfSecond","allowableOverlap","nearestDistance","baseDataOffset","h","nalsByteLength","numberOfNals","totalByteLength","alignIndex","gopIndex","align","alignEndIndex","matchFound","trimIndex","total","alignGopsWith","newGopsToAlignWith","maxSegmentPts","maxSegmentDts","timeSinceStartOfTimeline","remux","remuxTracks","pendingBoxes","pendingBytes","emittedTracks","info","hasFlushed","transmuxPipeline_","setupAacPipeline","pipeline","aacStream","headOfPipeline","setupTsPipeline","setBaseMediaDecodeTime","isAac","../aac","../data/silence","../utils/clock","./mp4-generator.js","59","probe","ts","aac","PES_TIMESCALE","parsePsi_","parseAudioPes_","pesType","endLoop","parseVideoPes_","firstKeyFrame","adjustTimestamp_","baseTimestamp","audioBaseTimestamp","ptsTime","videoBaseTimestamp","inspectAac_","audioCount","sampleRate","audioTimescale","inspectTs_","isAacData","../aac/probe.js","../m2ts/probe.js","../m2ts/stream-types.js","../m2ts/timestamp-rollover-stream.js","60","secondsToVideoTs","secondsToAudioTs","videoTsToSeconds","audioTsToSeconds","seconds","61","workingData","workingBytesAvailable","workingWord","workingBitsAvailable","bitsAvailable","loadWord","workingBytes","availableBytes","skipBytes","bits","valu","skipLeadingZeros","leadingZeroCount","clz","62","63","root","URL_REGEX","FIRST_SEGMENT_REGEX","SLASH_DOT_REGEX","SLASH_DOT_DOT_REGEX","URLToolkit","opts","alwaysNormalize","basePartsForNormalise","parseURL","normalizePath","buildURLFromParts","relativeParts","scheme","baseParts","netLoc","pathParts","builtParts","params","query","baseURLPath","newPath","lastIndexOf","parts","amd","64","deprecateOldCue","durationOfVideo","dur","addTextTrackData","sourceHandler","captionArray","metadataArray","inbandTextTracks_","videoDuration","metadataTrack_","cuesArray","cuesGroupedByStartTime","timeSlot","sortedStartTimes","cueGroup","nextTime","65","isAudioCodec","isVideoCodec","parseContentType","parameters","parameter","pair","_name","orig","profile","avcLevel","profileHex","avcLevelHex","66","createTextTracksIfNecessary","sourceBuffer","player_","textTracks","getTrackById","67","flashConstants","TIME_BETWEEN_CHUNKS","BYTES_PER_CHUNK","68","_globalDocument","_globalDocument2","_flashSourceBuffer","_flashSourceBuffer2","_flashConstants","_flashConstants2","_codecUtils","FlashMediaSource","sourceBuffers","swfObj","getElementById","swfId","parentNode","vjs_load","parsedType","vjs_endOfStream","vjs_getProperty","vjs_setProperty","./codec-utils","./flash-constants","./flash-source-buffer","global/document","69","_muxJsLibFlv","_muxJsLibFlv2","_removeCuesFromTrack","_removeCuesFromTrack2","_createTextTracksIfNecessary","_createTextTracksIfNecessary2","_addTextTrackData","_flashTransmuxerWorker","_flashTransmuxerWorker2","resolveFlashTransmuxWorker","scheduleTick","func","generateRandomString","toDecimalPlaces","places","FlashSourceBuffer","encodedHeader","chunkSize_","buffer_","bufferSize_","basePtsOffset_","audioBufferEnd_","videoBufferEnd_","btoa","safePlayerId","flashEncodedHeaderName_","flashEncodedDataName_","vjs_appendChunkReady","transmuxer_","action","receiveBuffer_","vjs_discontinuity","onHlsReset","onHlsReset_","vjs_abort","flvBytes","convertTagsToData_","processBuffer_","chunkSize","binary","b64str","segmentByteLength","videoTargetPts","firstVideoTag","firstAudioTag","currentIndex","currentTag","nextTag","filteredVideoTags","audioTargetPts","filteredAudioTags","getOrderedTags_","fudgeFactor","adjustedTime","vjs_adjustCurrentTime","./add-text-track-data","./create-text-tracks-if-necessary","./flash-transmuxer-worker","./remove-cues-from-track","mux.js/lib/flv","70","wireTransmuxerEvents","transmuxer","MessageHandlers","FlashTransmuxerWorker","messageHandlers","71","_virtualSourceBuffer","_virtualSourceBuffer2","HtmlMediaSource","nativeMediaSource_","activeSourceBuffers_","updateActiveSourceBuffers_","appendAudioInitSegment_","audioDisabled_","audioCodec_","disableCombined","disableAudioOnly","videoCodec_","onPlayerMediachange_","onHlsSegmentTimeMapping_","timeMapping_","eventName","querySelector","url_","sourcebuffer","el_","createRealSourceBuffers_","./virtual-source-buffer","72","removeCuesFromTrack","removeCue","73","_muxJsLibMp4","_muxJsLibMp42","initArray","typedArray","gopInfo","appendStart","TransmuxerWorker","mux.js/lib/mp4","74","_flashMediaSource","_flashMediaSource2","_htmlMediaSource","_htmlMediaSource2","urlCount","defaults","mediaSources","open","msObjectURL","supportsNativeMediaSources","getTech","URL","createObjectURL","objectUrlPrefix","./flash-media-source","./html-media-source","75","_transmuxerWorker","_transmuxerWorker2","resolveTransmuxWorker","makeWrappedSourceBuffer","wrapper","realBuffer_","_loop","gopsSafeToAlignWith","currentTimePts","updateGopBuffer","removeGopBuffer","updatedBuffer","VirtualSourceBuffer","pendingBuffers_","bufferUpdating_","codecs_","gopBuffer_","safeAppend_","data_","done_","appendGopInfo_","videoBuffer_","audioBuffer_","appendWindowStart","videoBuffered","audioBuffered","processPendingSegments_","codecProperty","shouldTrigger","every","sortedSegments","segmentObj","triggerUpdateend","concatAndAppendSegments_","destinationBuffer","tempBuffer","originalError","./transmuxer-worker","76","bundleFn","sources","cache","webpack","webpackBootstrapFn","modules","installedModules","__webpack_require__","moduleId","m","entryModule","bundleWithBrowserify","fn","fnModuleKey","cacheKeys","cacheKey","cacheExports","fnModuleCache","entryKey","entryCache","bundleWithWebpack","fnModuleId","sourceStrings","devMode","sKey","modulesString","fnModuleExports","fnSourceString","mappedSourceStrings","blob","Blob","webkitURL","mozURL","msURL","workerUrl","worker","Worker","objectURL","77","_xhr","_xhr2","_binUtils2","_videojsContribMediaSources","_masterPlaylistController","_renditionMixin","_renditionMixin2","_playbackWatcher","_playbackWatcher2","_reloadSourceOnError","_reloadSourceOnError2","_playlistSelectorsJs","STANDARD_PLAYLIST_SELECTOR","INITIAL_PLAYLIST_SELECTOR","INITIAL_BANDWIDTH","handleHlsMediaChange","qualityLevels","selectedIndex","selectedIndex_","handleHlsLoadedMetadata","addQualityLevel","canPlaySource","supportsNativeHls","createElement","isSupported","canPlay","canItPlay","canPlayType","Component","getComponent","HlsHandler","_Component","options_","playerId","_player","source_","ignoreNextSeekingEvent_","setOptions_","overrideNative","featuresNativeVideoTracks","featuresNativeAudioTracks","fullscreenElement","webkitFullscreenElement","mozFullScreenElement","msFullscreenElement","contains","pauseLoading","option","_src","playbackWatcher_","players","invBandwidth","invThroughput","systemBitrate","mediaRequests_","mediaRequestsAborted_","mediaRequestsTimedout_","mediaRequestsErrored_","mediaTransferDuration_","mediaBytesTransferred_","mediaSecondsLoaded_","setupQualityLevels_","qualityLevels_","HlsSourceHandler","canHandleSource","srcObj","handleSource","mpegurlRE","flashTech","registerSourceHandler","use","registerComponent","m3u8","registerPlugin","plugin","./master-playlist-controller","./playback-watcher","./playlist-selectors.js","./reload-source-on-error","./rendition-mixin","./xhr","videojs-contrib-media-sources","render","_vm","_h","$createElement","_c","_self","fluid","pt-0","fullBlock","heading","$t","customClasses","ref","staticClass","playerOptions","playsinline","playerReadied","playerOptions2","$event","playerReadied2","playerOptions3","playerReadied3","staticRenderFns","videojs","video_cjs_default","VideoPlayervue_type_script_lang_js_","muted","playbackRates","poster","controlBar","timeDivider","durationDisplay","flash","html5","methods","audioTrackList","extensions_VideoPlayervue_type_script_lang_js_","component","componentNormalizer","__file","__webpack_exports__"],"mappings":"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AAAt6C,KAAAyW,IAAA,SAQA,WACA,IAAA3sB,EAyCA,GAxCA0vD,GACAe,QACAC,QACAC,QACAtC,QACAuC,QACAtC,QACAC,QACAY,QACAX,QACAU,QACAD,QACAR,QACAC,QACAC,QACAC,QACAiC,QACAhC,QACAC,QACAM,QACA0B,QACAzB,QACA0B,QACAC,QACA1B,QACA2B,QACAC,QACAC,QACAC,QACAC,QACA9B,QACAR,QACAU,QACAD,QACAR,QACAsC,SAKA,qBAAA7pD,WAAA,CAIA,IAAAzH,KAAA0vD,EACAA,EAAA9kB,eAAA5qC,KACA0vD,EAAA1vD,IACAA,EAAA2+B,WAAA,GACA3+B,EAAA2+B,WAAA,GACA3+B,EAAA2+B,WAAA,GACA3+B,EAAA2+B,WAAA,KAKAgxB,EAAA,IAAAloD,YACA,IAAAk3B,WAAA,GACA,IAAAA,WAAA,GACA,IAAAA,WAAA,GACA,IAAAA,WAAA,KAEAkxB,EAAA,IAAApoD,YACA,IAAAk3B,WAAA,GACA,IAAAA,WAAA,GACA,IAAAA,WAAA,GACA,IAAAA,WAAA,KAEAixB,EAAA,IAAAnoD,YAAA,UACAqoD,EAAA,IAAAroD,YACA,EACA,MACA,QACA,gBACA,QACA,QACA,QACA,eACA,cACA,oBAEAsoD,EAAA,IAAAtoD,YACA,EACA,MACA,QACA,gBACA,QACA,QACA,QACA,eACA,cACA,oBAEAuoD,GACAnhD,MAAAihD,EACAhhD,MAAAihD,GAEAI,EAAA,IAAA1oD,YACA,EACA,MACA,QACA,SACA,eACA,EACA,QAEAyoD,EAAA,IAAAzoD,YACA,EACA,MACA,IACA,MAEA2oD,EAAA,IAAA3oD,YACA,EACA,MACA,UAEA4oD,EAAAD,EACAE,EAAA,IAAA7oD,YACA,EACA,MACA,QACA,UAEA8oD,EAAAH,EACAH,EAAA,IAAAxoD,YACA,EACA,MACA,IACA,IACA,IACA,QApIA,GAwIA2mD,EAAA,SAAAhhD,GACA,IAGApN,EACAiG,EACAiZ,EAJAg/B,KACAzwB,EAAA,EAKA,IAAAztB,EAAA,EAAaA,EAAA6C,UAAAxC,OAAsBL,IACnCk+C,EAAA18C,KAAAqB,UAAA7C,IAGAA,EAAAk+C,EAAA79C,OAGA,MAAAL,IACAytB,GAAAywB,EAAAl+C,GAAAoF,WAQA,IANAa,EAAA,IAAAwB,WAAAgmB,EAAA,GACAvO,EAAA,IAAAC,SAAAlZ,EAAAf,OAAAe,EAAAd,WAAAc,EAAAb,YACA8Z,EAAAu4B,UAAA,EAAAxxC,EAAAb,YACAa,EAAAkwB,IAAA/oB,EAAA,GAGApN,EAAA,EAAAytB,EAAA,EAAuBztB,EAAAk+C,EAAA79C,OAAoBL,IAC3CiG,EAAAkwB,IAAA+nB,EAAAl+C,GAAAytB,GACAA,GAAAywB,EAAAl+C,GAAAoF,WAEA,OAAAa,GAGAooD,EAAA,WACA,OAAAD,EAAAsB,EAAArB,KAAAD,EAAAsB,EAAAkB,KAAAT,KAGA7B,EAAA,SAAAlsD,GACA,OAAAgsD,EAAAsB,EAAApB,KAAA,IAAA7mD,YACA,EACA,MAGA,EACA,GACA,IACA,EAGA,EACA,GACA,GACA,GACA,MACA,YACA,YAGA,EACA,EAGArF,EAAA4tC,iBAAA,EAAA5tC,EAAA+tC,yBAAA,EACA/tC,EAAA+tC,wBAAA,EAAA/tC,EAAA6tC,cAAA,EACA,UAIAse,EAAA,WACA,OAAAH,EAAAsB,EAAAnB,KAAAoB,EAAAC,EAAAD,EAAAE,IAGAV,EAAA,SAAA/hD,GACA,OAAAghD,EAAAsB,EAAAP,KAAAa,EAAA5iD,KAEAohD,EAAA,SAAA3oD,GACA,OAAAuoD,EAAAsB,EAAAlB,KAAA3oD,IAEAqpD,EAAA,SAAA9sD,GACA,IAAA6D,EAAA,IAAAwB,YACA,EACA,MACA,QACA,QACA,WAEArF,EAAAY,WAAA,OACAZ,EAAAY,WAAA,OACAZ,EAAAY,WAAA,MACA,IAAAZ,EAAAY,SACA,OACA,MAaA,OAPAZ,EAAA8tC,aACAjqC,EAAA,IAAA7D,EAAA8tC,aAAA,OACAjqC,EAAA,IAAA7D,EAAA8tC,aAAA,OACAjqC,EAAA,IAAA7D,EAAA8tC,aAAA,MACAjqC,EAAA,QAAA7D,EAAA,YAGAgsD,EAAAsB,EAAAR,KAAAjpD,IAEAgpD,EAAA,SAAA7sD,GACA,OAAAgsD,EAAAsB,EAAAT,KAAAC,EAAA9sD,GAAA+sD,EAAA/sD,EAAAgL,MAAAshD,EAAAtsD,KAEAqsD,EAAA,SAAA8C,GACA,OAAAnD,EAAAsB,EAAAjB,KAAA,IAAAhnD,YACA,EACA,OACA,WAAA8pD,IAAA,IACA,SAAAA,IAAA,IACA,MAAAA,IAAA,EACA,IAAAA,MAGA7C,EAAA,SAAAtsD,GACA,OAAAgsD,EAAAsB,EAAAhB,KACA,UAAAtsD,EAAAgL,KAAAghD,EAAAsB,EAAA4B,KAAArB,GAAA7B,EAAAsB,EAAAoB,KAAAZ,GACA7B,IACAgB,EAAAjtD,KAEAusD,EAAA,SAAA4C,EAAAz1C,GACA,IACA01C,KACAxxD,EAAA8b,EAAAzb,OAEA,MAAAL,IACAwxD,EAAAxxD,GAAAuvD,EAAAzzC,EAAA9b,IAEA,OAAAouD,EAAAtvB,MAAA,MACA4wB,EAAAf,KACAF,EAAA8C,IACA7c,OAAA8c,KAOA5C,EAAA,SAAA9yC,GACA,IACA9b,EAAA8b,EAAAzb,OACAoxD,KAEA,MAAAzxD,IACAyxD,EAAAzxD,GAAA+uD,EAAAjzC,EAAA9b,IAGA,OAAAouD,EAAAtvB,MAAA,MAAA4wB,EAAAd,KAAAE,EAAA,aAAApa,OAAA+c,GAAA/c,OAAAma,EAAA/yC,MAEA+yC,EAAA,SAAA/yC,GACA,IACA9b,EAAA8b,EAAAzb,OACAoxD,KAEA,MAAAzxD,IACAyxD,EAAAzxD,GAAAwvD,EAAA1zC,EAAA9b,IAEA,OAAAouD,EAAAtvB,MAAA,MAAA4wB,EAAAb,MAAAna,OAAA+c,KAEA3C,EAAA,SAAA9rD,GACA,IACAiC,EAAA,IAAAwC,YACA,EACA,MACA,QACA,QACA,YACA,WAAAzE,IAAA,IACA,SAAAA,IAAA,IACA,MAAAA,IAAA,EACA,IAAAA,EACA,QACA,IACA,IACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,SACA,QACA,QACA,QACA,QACA,QACA,QACA,kBAEA,OAAAorD,EAAAsB,EAAAZ,KAAA7pD,IAGAmqD,EAAA,SAAAhtD,GACA,IAGA0rC,EACA9tC,EAHA0xD,EAAAtvD,EAAAsvD,YACAzsD,EAAA,IAAAwC,WAAA,EAAAiqD,EAAArxD,QAOA,IAAAL,EAAA,EAAaA,EAAA0xD,EAAArxD,OAAoBL,IACjC8tC,EAAA4jB,EAAA1xD,GAAA8tC,MAEA7oC,EAAAjF,EAAA,GAAA8tC,EAAA6jB,WAAA,EACA7jB,EAAA8jB,cAAA,EACA9jB,EAAA,cAGA,OAAAsgB,EAAAsB,EAAAN,KACAnqD,IAGAoqD,EAAA,SAAAjtD,GACA,OAAAgsD,EAAAsB,EAAAL,KACAC,EAAAltD,GACAgsD,EAAAsB,EAAAwB,KAAAX,GACAnC,EAAAsB,EAAAsB,KAAAX,GACAjC,EAAAsB,EAAAuB,KAAAX,GACAlC,EAAAsB,EAAAqB,KAAAX,KAGA,WACA,IAAAyB,EAAAC,EAEAxC,EAAA,SAAAltD,GAEA,OAAAgsD,EAAAsB,EAAAJ,KAAA,IAAA7nD,YACA,EACA,MACA,UACA,UAAArF,EAAAgL,KAAAykD,EAAAzvD,GAAA0vD,EAAA1vD,KAGAyvD,EAAA,SAAAzvD,GACA,IAKApC,EAJAm7C,EAAA/4C,EAAA+4C,QACAC,EAAAh5C,EAAAg5C,QACA2W,KACAC,KAIA,IAAAhyD,EAAA,EAAeA,EAAAm7C,EAAA96C,OAAgBL,IAC/B+xD,EAAAvwD,MAAA,MAAA25C,EAAAn7C,GAAAoF,cAAA,GACA2sD,EAAAvwD,KAAA,IAAA25C,EAAAn7C,GAAAoF,YACA2sD,IAAArd,OAAAhzC,MAAAoE,UAAAC,MAAA3F,KAAA+6C,EAAAn7C,KAIA,IAAAA,EAAA,EAAeA,EAAAo7C,EAAA/6C,OAAgBL,IAC/BgyD,EAAAxwD,MAAA,MAAA45C,EAAAp7C,GAAAoF,cAAA,GACA4sD,EAAAxwD,KAAA,IAAA45C,EAAAp7C,GAAAoF,YACA4sD,IAAAtd,OAAAhzC,MAAAoE,UAAAC,MAAA3F,KAAAg7C,EAAAp7C,KAGA,OAAAouD,EAAAsB,EAAAe,KAAA,IAAAhpD,YACA,MACA,MACA,IACA,IACA,IACA,QACA,QACA,SACA,MAAArF,EAAA8lB,QAAA,EACA,IAAA9lB,EAAA8lB,OACA,MAAA9lB,EAAAomB,SAAA,EACA,IAAApmB,EAAAomB,OACA,SACA,SACA,QACA,IACA,GACA,gBACA,eACA,eACA,cACA,cACA,QACA,QACA,MACA,KACA,QACA4lC,EAAAsB,EAAAgB,KAAA,IAAAjpD,YACA,EACArF,EAAAqwC,WACArwC,EAAAuwC,qBACAvwC,EAAAswC,SACA,KACAgC,QACAyG,EAAA96C,SACAq0C,OAAAqd,GAAArd,QACA0G,EAAA/6C,SACAq0C,OAAAsd,KACA5D,EAAAsB,EAAAiB,KAAA,IAAAlpD,YACA,aACA,aACA,kBAKAqqD,EAAA,SAAA1vD,GACA,OAAAgsD,EAAAsB,EAAAmB,KAAA,IAAAppD,YAGA,MACA,MACA,IAGA,QACA,SACA,MAAArF,EAAA6tC,eAAA,EACA,IAAA7tC,EAAA6tC,cAEA,MAAA7tC,EAAAguC,aAAA,EACA,IAAAhuC,EAAAguC,WACA,IACA,KAEA,MAAAhuC,EAAA8tC,aAAA,EACA,IAAA9tC,EAAA8tC,WACA,MAGAoe,EAAAlsD,KAzGA,GA6GA4sD,EAAA,SAAA5sD,GACA,IAAA6D,EAAA,IAAAwB,YACA,EACA,MACA,QACA,SACA,WAAArF,EAAA0W,KAAA,IACA,SAAA1W,EAAA0W,KAAA,IACA,MAAA1W,EAAA0W,KAAA,EACA,IAAA1W,EAAA0W,GACA,SACA,WAAA1W,EAAAY,WAAA,IACA,SAAAZ,EAAAY,WAAA,IACA,MAAAZ,EAAAY,WAAA,EACA,IAAAZ,EAAAY,SACA,QACA,QACA,IACA,IACA,IACA,IACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,UACA,MAAAZ,EAAA8lB,QAAA,EACA,IAAA9lB,EAAA8lB,MACA,KACA,MAAA9lB,EAAAomB,SAAA,EACA,IAAApmB,EAAAomB,OACA,MAGA,OAAA4lC,EAAAsB,EAAAV,KAAA/oD,IAOAspD,EAAA,SAAAntD,GACA,IAAA6vD,EAAAC,EAAAC,EACAC,EAAAC,EACAC,EAAAC,EA2CA,OAzCAN,EAAA7D,EAAAsB,EAAA2B,KAAA,IAAA5pD,YACA,EACA,QACA,WAAArF,EAAA0W,KAAA,IACA,SAAA1W,EAAA0W,KAAA,IACA,MAAA1W,EAAA0W,KAAA,EACA,IAAA1W,EAAA0W,GACA,QACA,QACA,QACA,WAGAw5C,EAAAp8C,KAAAuI,MAAArc,EAAA+oD,qBAAAqF,EAAA,IACA+B,EAAAr8C,KAAAuI,MAAArc,EAAA+oD,qBAAAqF,EAAA,IAEA0B,EAAA9D,EAAAsB,EAAA0B,KAAA,IAAA3pD,YACA,EACA,MAEA6qD,IAAA,OACAA,IAAA,OACAA,IAAA,MACA,IAAAA,EACAC,IAAA,OACAA,IAAA,OACAA,IAAA,MACA,IAAAA,KAMAF,EAAA,GAQA,UAAAjwD,EAAAgL,MACA+kD,EAAA1C,EAAArtD,EAAAiwD,GACAjE,EAAAsB,EAAAH,KACA0C,EACAC,EACAC,KAMAC,EAAAhD,EAAAhtD,GACA+vD,EAAA1C,EAAArtD,EACAgwD,EAAA/xD,OAAAgyD,GACAjE,EAAAsB,EAAAH,KACA0C,EACAC,EACAC,EACAC,KAQArD,EAAA,SAAA3sD,GAEA,OADAA,EAAAY,SAAAZ,EAAAY,UAAA,WACAorD,EAAAsB,EAAAX,KACAC,EAAA5sD,GACA6sD,EAAA7sD,KAGAotD,EAAA,SAAAptD,GACA,IAAA6D,EAAA,IAAAwB,YACA,EACA,OACA,WAAArF,EAAA0W,KAAA,IACA,SAAA1W,EAAA0W,KAAA,IACA,MAAA1W,EAAA0W,KAAA,EACA,IAAA1W,EAAA0W,GACA,QACA,QACA,QACA,UAUA,MAJA,UAAA1W,EAAAgL,OACAnH,IAAA5F,OAAA,MAGA+tD,EAAAsB,EAAAF,KAAAvpD,IAGA,WACA,IAAAusD,EAAAC,EAAAC,EAMAA,EAAA,SAAAhB,EAAA9uD,GACA,IAAA+vD,EAAA,EAAAC,EAAA,EACAC,EAAA,EAAAC,EAAA,EAkBA,OAfApB,EAAArxD,cACAY,IAAAywD,EAAA,GAAA1uD,WACA2vD,EAAA,QAEA1xD,IAAAywD,EAAA,GAAAjkC,OACAmlC,EAAA,QAEA3xD,IAAAywD,EAAA,GAAA5jB,QACA+kB,EAAA,QAEA5xD,IAAAywD,EAAA,GAAAoB,wBACAA,EAAA,KAKA,EACA,EACAH,EAAAC,EAAAC,EAAAC,EACA,GACA,WAAApB,EAAArxD,UAAA,IACA,SAAAqxD,EAAArxD,UAAA,IACA,MAAAqxD,EAAArxD,UAAA,EACA,IAAAqxD,EAAArxD,QACA,WAAAuC,KAAA,IACA,SAAAA,KAAA,IACA,MAAAA,KAAA,EACA,IAAAA,IAIA6vD,EAAA,SAAArwD,EAAAQ,GACA,IAAAqC,EAAAysD,EAAAqB,EAAA/yD,EAOA,IALA0xD,EAAAtvD,EAAAsvD,YACA9uD,GAAA,MAAA8uD,EAAArxD,OAEA4E,EAAAytD,EAAAhB,EAAA9uD,GAEA5C,EAAA,EAAeA,EAAA0xD,EAAArxD,OAAoBL,IACnC+yD,EAAArB,EAAA1xD,GACAiF,IAAAyvC,SACA,WAAAqe,EAAA/vD,YAAA,IACA,SAAA+vD,EAAA/vD,YAAA,IACA,MAAA+vD,EAAA/vD,YAAA,EACA,IAAA+vD,EAAA/vD,UACA,WAAA+vD,EAAAtlC,QAAA,IACA,SAAAslC,EAAAtlC,QAAA,IACA,MAAAslC,EAAAtlC,QAAA,EACA,IAAAslC,EAAAtlC,KACAslC,EAAAjlB,MAAAklB,WAAA,EAAAD,EAAAjlB,MAAA6jB,UACAoB,EAAAjlB,MAAA8jB,cAAA,EACAmB,EAAAjlB,MAAAmlB,eAAA,EACAF,EAAAjlB,MAAAolB,cAAA,EACAH,EAAAjlB,MAAAqlB,gBACA,MAAAJ,EAAAjlB,MAAAslB,oBACA,GAAAL,EAAAjlB,MAAAslB,qBACA,WAAAL,EAAAD,yBAAA,IACA,SAAAC,EAAAD,yBAAA,IACA,MAAAC,EAAAD,yBAAA,EACA,IAAAC,EAAAD,wBAGA,OAAA1E,EAAAsB,EAAAD,KAAA,IAAAhoD,WAAAxC,KAGAutD,EAAA,SAAApwD,EAAAQ,GACA,IAAAqC,EAAAysD,EAAAqB,EAAA/yD,EAOA,IALA0xD,EAAAtvD,EAAAsvD,YACA9uD,GAAA,KAAA8uD,EAAArxD,OAEA4E,EAAAytD,EAAAhB,EAAA9uD,GAEA5C,EAAA,EAAeA,EAAA0xD,EAAArxD,OAAoBL,IACnC+yD,EAAArB,EAAA1xD,GACAiF,IAAAyvC,SACA,WAAAqe,EAAA/vD,YAAA,IACA,SAAA+vD,EAAA/vD,YAAA,IACA,MAAA+vD,EAAA/vD,YAAA,EACA,IAAA+vD,EAAA/vD,UACA,WAAA+vD,EAAAtlC,QAAA,IACA,SAAAslC,EAAAtlC,QAAA,IACA,MAAAslC,EAAAtlC,QAAA,EACA,IAAAslC,EAAAtlC,OAGA,OAAA2gC,EAAAsB,EAAAD,KAAA,IAAAhoD,WAAAxC,KAGAwqD,EAAA,SAAArtD,EAAAQ,GACA,gBAAAR,EAAAgL,KACAolD,EAAApwD,EAAAQ,GAGA6vD,EAAArwD,EAAAQ,IA3GA,GA+GAvD,EAAAC,SACAivD,OACAC,OACAG,OACAC,OACAtpD,YAAA,SAAAwW,GACA,IAGA7V,EAFAotD,EAAA9E,IACA+E,EAAA1E,EAAA9yC,GAMA,OAHA7V,EAAA,IAAAwB,WAAA4rD,EAAAjuD,WAAAkuD,EAAAluD,YACAa,EAAAkwB,IAAAk9B,GACAptD,EAAAkwB,IAAAm9B,EAAAD,EAAAjuD,YACAa,SAIIstD,IAAA,SAAAp0D,EAAAE,EAAAC,GASJ,aAEA,IAAAk0D,EAAAxkB,EAAAvR,EAAAzQ,EAGAwmC,EAAA,SAAA3tD,EAAA4tD,GACA,IACAzzD,EAAAytB,EAAArgB,EAAAlJ,EAAAwvD,EADAzlC,KAGA,IAAAwlC,EAAApzD,OAEA,YAGA,IAAAL,EAAA,EAAaA,EAAA6F,EAAAT,YACbqoB,EAAA5nB,EAAA7F,IAAA,GACAytB,GAAA5nB,EAAA7F,EAAA,OACAytB,GAAA5nB,EAAA7F,EAAA,MACAytB,GAAA5nB,EAAA7F,EAAA,GAEAoN,EAAA4hC,EAAAnpC,EAAAogC,SAAAjmC,EAAA,EAAAA,EAAA,IAEAkE,EAAAupB,EAAA,EAAAztB,EAAAytB,EAAA5nB,EAAAT,WAEAgI,IAAAqmD,EAAA,KACA,IAAAA,EAAApzD,OAGA4tB,EAAAzsB,KAAAqE,EAAAogC,SAAAjmC,EAAA,EAAAkE,KAGAwvD,EAAAF,EAAA3tD,EAAAogC,SAAAjmC,EAAA,EAAAkE,GAAAuvD,EAAA1tD,MAAA,IACA2tD,EAAArzD,SACA4tB,IAAAymB,OAAAgf,MAIA1zD,EAAAkE,EAIA,OAAA+pB,GAQA+gB,EAAA,SAAA9pC,GACA,IAAAe,EAAA,GAKA,OAJAA,GAAA1B,OAAAC,aAAAU,EAAA,IACAe,GAAA1B,OAAAC,aAAAU,EAAA,IACAe,GAAA1B,OAAAC,aAAAU,EAAA,IACAe,GAAA1B,OAAAC,aAAAU,EAAA,IACAe,GAqBAw3B,EAAA,SAAA8P,GACA,IACAtnC,KACA0tD,EAAAH,EAAAjmB,GAAA,gBAGA,OAAAomB,EAAA7zC,OAAA,SAAA7Z,EAAA8oD,GACA,IAAAC,EAAAnlB,EAAAhD,EAAA/tB,EAAAo2C,EAGA,OADAF,EAAAwE,EAAAzE,GAAA,YACAC,GAGAnlB,EAAAmlB,EAAA,GACAnoB,EAAA,IAAAgD,EAAA,MACA/wB,EAAAk2C,EAAAnoB,IAAA,GACAmoB,EAAAnoB,EAAA,OACAmoB,EAAAnoB,EAAA,MACAmoB,EAAAnoB,EAAA,GAEAqoB,EAAAsE,EAAAzE,GAAA,mBACAG,GAGArlB,EAAAqlB,EAAA,GACAroB,EAAA,IAAAgD,EAAA,MACA5jC,EAAA6S,GAAAo2C,EAAAroB,IAAA,GACAqoB,EAAAroB,EAAA,OACAqoB,EAAAroB,EAAA,MACAqoB,EAAAroB,EAAA,GACA5gC,GARA,MAXA,MAoBGA,IAmBH+mB,EAAA,SAAAyQ,EAAAutB,GACA,IAAA4I,EAAAC,EAAA5tD,EA6CA,OA1CA2tD,EAAAJ,EAAAxI,GAAA,gBAGA6I,KAAAnf,OAAA5V,SAAA80B,EAAAjwD,IAAA,SAAA4rD,GACA,OAAAiE,EAAAjE,GAAA,SAAA5rD,IAAA,SAAA0tD,GACA,IAAAv4C,EAAA4T,EAAAonC,EA+BA,OA5BAh7C,EAAAu4C,EAAA,OACAA,EAAA,OACAA,EAAA,MACAA,EAAA,GAEA3kC,EAAA+Q,EAAA3kB,IAAA,IAGAg7C,EAAAN,EAAAjE,GAAA,SAAA5rD,IAAA,SAAAytD,GACA,IAAAvnB,EAAA5jC,EAcA,OAZA4jC,EAAAunB,EAAA,GACAnrD,EAAAmrD,EAAA,OACAA,EAAA,OACAA,EAAA,MACAA,EAAA,GACA,IAAAvnB,IACA5jC,GAAAiQ,KAAAyW,IAAA,MACA1mB,GAAAmrD,EAAA,OACAA,EAAA,OACAA,EAAA,OACAA,EAAA,KAEAnrD,IACO,GACP6tD,KAAAtuD,IAGAsuD,EAAApnC,OAKAzmB,EAAAiQ,KAAAwD,IAAAolB,MAAA,KAAA+0B,GACAlgC,SAAA1tB,KAAA,GAGA5G,EAAAC,SACA0vC,YACAvR,YACAzQ,kBAGI+mC,IAAA,SAAA50D,EAAAE,EAAAC,GAWJ,aAEA,IA6BAw7C,EAAAC,EAAAV,EAAA7E,EAIAwe,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EAvCA5tB,EAAAvnC,EAAA,sBACAo1D,EAAAp1D,EAAA,sBACA+7C,EAAA/7C,EAAA,mBACAqwC,EAAArwC,EAAA,qBACAmxC,EAAAnxC,EAAA,kBAAAmxC,WACAlD,EAAAjuC,EAAA,UACAw1C,EAAAx1C,EAAA,mBACAq1D,EAAAr1D,EAAA,kBAGAs1D,GACA,kBACA,eACA,aACA,yBACA,cAGAC,GACA,QACA,SACA,aACA,WACA,wBAGAC,EAAA,IAmBAX,EAAA,WACA,OACAvmC,KAAA,EACAqgB,OACAklB,UAAA,EACArB,UAAA,EACAC,aAAA,EACAqB,cAAA,EACAG,oBAAA,KAKAa,EAAA,SAAApuD,GACA,OAAAA,EAAA,SAAA84B,WAAA,IACA94B,EAAA,SAAA84B,WAAA,IACA94B,EAAA,SAAA84B,WAAA,IASA01B,EAAA,SAAAt0D,EAAA+qB,GACA,IACA9qB,EAEA,GAAAD,EAAAM,SAAAyqB,EAAAzqB,OACA,SAIA,IAAAL,EAAA,EAAaA,EAAAD,EAAAM,OAAcL,IAC3B,GAAAD,EAAAC,KAAA8qB,EAAA9qB,GACA,SAIA,UAMAs0D,EAAA,SAAAptC,GACA,IACAlnB,EACA40D,EACAC,EAAA,EAGA,IAAA70D,EAAA,EAAaA,EAAAknB,EAAA7mB,OAAkBL,IAC/B40D,EAAA1tC,EAAAlnB,GACA60D,GAAAD,EAAA/uD,KAAAT,WAGA,OAAAyvD,GAQA9Z,EAAA,SAAA34C,GACA,IACAk5C,KACAiW,EAAA,EACAuD,EAAA,EACAC,EAAA,EACAC,EAAAxvD,IAEAu1C,EAAAj1C,UAAAynC,KAAAntC,KAAAqM,MAEAA,KAAAjL,KAAA,SAAAqE,GACAquD,EAAA9xD,EAAAyD,GAEAzD,GACAqyD,EAAA5vD,QAAA,SAAAowD,GACA7yD,EAAA6yD,GAAApvD,EAAAovD,KAKA3Z,EAAA95C,KAAAqE,IAGA4G,KAAAyoD,eAAA,SAAAC,GACAL,EAAAK,EAAA/yD,EAAAy0C,kBAAAsU,qBAGA1+C,KAAA2oD,4BAAA,SAAAjK,GACA6J,EAAA7J,GAGA1+C,KAAA4oD,oBAAA,SAAA5nB,GACAsnB,EAAAtnB,GAGAhhC,KAAAo0B,MAAA,WACA,IACAuV,EACAuY,EACAH,EACAiD,EAGA,IAAAnW,EAAAj7C,QAKA+1C,EAAA3pC,KAAA6oD,6BAAAha,GACAl5C,EAAA+oD,oBAAAiJ,EAAAhyD,GAEAqK,KAAA8oD,mBAAAnzD,EAAAg0C,GAIAh0C,EAAAsvD,QAAAjlD,KAAA+oD,qBAAApf,GAGAoY,EAAA+F,EAAA/F,KAAA/hD,KAAAgpD,sBAAArf,IAEAkF,KAEAqT,EAAA4F,EAAA5F,KAAA4C,GAAAnvD,IACAqvD,EAAA,IAAAhqD,WAAAknD,EAAAvpD,WAAAopD,EAAAppD,YAGAmsD,IAEAE,EAAAt7B,IAAAw4B,GACA8C,EAAAt7B,IAAAq4B,EAAAG,EAAAvpD,YAEA+uD,EAAA/xD,GAEAqK,KAAAoH,QAAA,QAA0BzR,QAAAqvD,UAC1BhlD,KAAAoH,QAAA,8BA9BApH,KAAAoH,QAAA,8BAmCApH,KAAA8oD,mBAAA,SAAAnzD,EAAAg0C,GACA,IACAsf,EAKAC,EACA31D,EALA41D,EAAA,EACAC,EAAA,EACAC,EAAA,EACAC,EAAA,EAIA,GAAA3f,EAAA/1C,SAIAq1D,EAAAlB,EAAAwB,iBAAA5zD,EAAA+oD,oBAAA/oD,EAAA8tC,YAEA0lB,EAAA1/C,KAAA+9B,KAAA0gB,GAAAvyD,EAAA8tC,WAAA,OAEA6kB,GAAAC,IAEAa,EACAH,EAAAx/C,KAAAC,IAAA4+C,EAAAC,GAEAc,EAAA5/C,KAAAuI,MAAAo3C,EAAAD,GACAG,EAAAD,EAAAF,KAKAE,EAAA,GAAAC,EAAApB,EAAA,KAYA,IARAgB,EAAAhhB,EAAAvyC,EAAA8tC,YAEAylB,IAGAA,EAAAvf,EAAA,GAAAvwC,MAGA7F,EAAA,EAAeA,EAAA81D,EAAyB91D,IACxCo2C,EAAAtP,OAAA9mC,EAAA,GACA6F,KAAA8vD,IAIAvzD,EAAA+oD,qBACAj1C,KAAAuI,MAAA+1C,EAAAyB,iBAAAF,EAAA3zD,EAAA8tC,eAOAzjC,KAAA6oD,6BAAA,SAAAha,GACA,OAAAl5C,EAAA8zD,eAAApB,EACAxZ,GAIAl5C,EAAA8zD,cAAA1wD,IAEA81C,EAAA/tC,OAAA,SAAAkuC,GAEA,OAAAA,EAAA3d,KAAAg3B,IACA1yD,EAAA8zD,cAAAhgD,KAAAwD,IAAAtX,EAAA8zD,cAAAza,EAAA3d,KACA17B,EAAA+zD,cAAA/zD,EAAA8zD,eACA,OAQAzpD,KAAA+oD,qBAAA,SAAApf,GACA,IACAp2C,EACAy7C,EACAiW,KAEA,IAAA1xD,EAAA,EAAeA,EAAAo2C,EAAA/1C,OAAmBL,IAClCy7C,EAAArF,EAAAp2C,GACA0xD,EAAAlwD,MACAisB,KAAAguB,EAAA51C,KAAAT,WACApC,SAAA,OAGA,OAAA0uD,GAIAjlD,KAAAgpD,sBAAA,SAAArf,GACA,IACAp2C,EACAy7C,EACA4W,EAAA,EACAxsD,EAAA,IAAA4B,WAAA6sD,EAAAle,IAEA,IAAAp2C,EAAA,EAAeA,EAAAo2C,EAAA/1C,OAAmBL,IAClCy7C,EAAArF,EAAAp2C,GAEA6F,EAAAswB,IAAAslB,EAAA51C,KAAAwsD,GACAA,GAAA5W,EAAA51C,KAAAT,WAEA,OAAAS,IAIAk1C,EAAAj1C,UAAA,IAAA4gC,EAWAoU,EAAA,SAAA14C,EAAAgN,GACA,IAIA2iC,EACAqJ,EAJAmW,EAAA,EACAxV,KACAqa,KAIAhnD,QAEA0rC,EAAAh1C,UAAAynC,KAAAntC,KAAAqM,aAEArK,EAAAi0D,OAEA5pD,KAAA6pD,aAEA7pD,KAAAjL,KAAA,SAAA+0D,GACArC,EAAA9xD,EAAAm0D,GAGA,2BAAAA,EAAA1kB,aAAAE,IACAA,EAAAwkB,EAAAxkB,OACA3vC,EAAA+4C,KAAAob,EAAA1wD,MAEA6uD,EAAA7vD,QAAA,SAAAowD,GACA7yD,EAAA6yD,GAAAljB,EAAAkjB,IACOxoD,OAGP,2BAAA8pD,EAAA1kB,aACAuJ,IACAA,EAAAmb,EAAA1wD,KACAzD,EAAAg5C,KAAAmb,EAAA1wD,OAIAk2C,EAAAv6C,KAAA+0D,IAGA9pD,KAAAo0B,MAAA,WACA,IACAuV,EACAogB,EACAC,EACA9H,EACAH,EACAiD,EAIA,MAAA1V,EAAA17C,OAAA,CACA,kCAAA07C,EAAA,GAAAlK,YACA,MAEAkK,EAAA5gB,QAIA,OAAA4gB,EAAA17C,OAGA,OAFAoM,KAAAiqD,oBACAjqD,KAAAoH,QAAA,6BAgDA,GAzCAuiC,EAAA3pC,KAAAkqD,qBAAA5a,GACA0a,EAAAhqD,KAAAmqD,qBAAAxgB,GAoBAqgB,EAAA,MAAAhe,WAEA+d,EAAA/pD,KAAAoqD,iBAAA9a,EAAA,GAAA35C,GAEAo0D,GACAC,EAAAK,QAAAN,GAGAC,EAAArxD,YAAAoxD,EAAApxD,WACAqxD,EAAAM,UAAAP,EAAAO,SACAN,EAAAjoB,IAAAgoB,EAAAhoB,IACAioB,EAAA34B,IAAA04B,EAAA14B,IACA24B,EAAAzzD,UAAAwzD,EAAAxzD,UAGAyzD,EAAAhqD,KAAAuqD,qBAAAP,IAKAL,EAAA/1D,OAAA,CACA,IAAA42D,EAQA,GALAA,EADA7nD,EAAA8nD,eACAzqD,KAAA0qD,gBAAAV,GAEAhqD,KAAA2qD,kBAAAX,IAGAQ,EAiBA,OAfAxqD,KAAA6pD,UAAAQ,SACAO,IAAAZ,EAAAa,MACAlc,IAAAh5C,EAAAg5C,IACAD,IAAA/4C,EAAA+4C,MAIA1uC,KAAA6pD,UAAAj2D,OAAA6V,KAAAwD,IAAA,EAAAjN,KAAA6pD,UAAAj2D,QAGA07C,KAGAtvC,KAAAiqD,oBACAjqD,KAAAoH,QAAA,6BAMAsgD,EAAA/xD,GAEAq0D,EAAAQ,EAGA/C,EAAA9xD,EAAAq0D,GAIAr0D,EAAAsvD,QAAAjlD,KAAA+oD,qBAAAiB,GAGAjI,EAAA+F,EAAA/F,KAAA/hD,KAAA8qD,oBAAAd,IAEAr0D,EAAA+oD,oBAAAiJ,EAAAhyD,GAEAqK,KAAAoH,QAAA,oBAAA4iD,EAAA9yD,IAAA,SAAA0zD,GACA,OACA7oB,IAAA6oB,EAAA7oB,IACA1Q,IAAAu5B,EAAAv5B,IACA14B,WAAAiyD,EAAAjyD,eAKAqH,KAAA6pD,UAAAQ,SACAO,IAAAZ,EAAAa,MACAlc,IAAAh5C,EAAAg5C,IACAD,IAAA/4C,EAAA+4C,MAIA1uC,KAAA6pD,UAAAj2D,OAAA6V,KAAAwD,IAAA,EAAAjN,KAAA6pD,UAAAj2D,QAGA07C,KAEAtvC,KAAAoH,QAAA,sBAAAzR,EAAA+oD,qBACA1+C,KAAAoH,QAAA,oBAAAzR,EAAAy0C,mBAEA8X,EAAA4F,EAAA5F,KAAA4C,GAAAnvD,IAIAqvD,EAAA,IAAAhqD,WAAAknD,EAAAvpD,WAAAopD,EAAAppD,YAGAmsD,IAEAE,EAAAt7B,IAAAw4B,GACA8C,EAAAt7B,IAAAq4B,EAAAG,EAAAvpD,YAEAqH,KAAAoH,QAAA,QAA0BzR,QAAAqvD,UAE1BhlD,KAAAiqD,eAGAjqD,KAAAoH,QAAA,8BAGApH,KAAAiqD,aAAA,WACAvC,EAAA/xD,GAIA2vC,OAAA9wC,EACAm6C,OAAAn6C,GAKAwL,KAAAoqD,iBAAA,SAAAN,GACA,IAIAiB,EACAC,EACAC,EACAC,EACA33D,EAPA43D,EAAA,KACAC,EAAA,IACAC,EAAAtyD,IAQA,IAAAxF,EAAA,EAAeA,EAAAyM,KAAA6pD,UAAAj2D,OAA2BL,IAC1C23D,EAAAlrD,KAAA6pD,UAAAt2D,GACA03D,EAAAC,EAAAN,IAGAj1D,EAAAg5C,KAAAiZ,EAAAjyD,EAAAg5C,IAAA,GAAAuc,EAAAvc,IAAA,KACAh5C,EAAA+4C,KAAAkZ,EAAAjyD,EAAA+4C,IAAA,GAAAwc,EAAAxc,IAAA,MAKAuc,EAAA55B,IAAA17B,EAAAy0C,kBAAA/Y,MAKA05B,EAAAjB,EAAAz4B,IAAA45B,EAAA55B,IAAA45B,EAAA10D,SAIAw0D,IAAAK,GACAL,GAAAI,KAIAH,GACAK,EAAAN,KACAC,EAAAE,EACAG,EAAAN,KAKA,OAAAC,EACAA,EAAAJ,IAEA,MAGA5qD,KAAAuqD,qBAAA,SAAAP,GACA,IAAAiB,EAiBA,OAfAjB,EAAA,MAAAhe,UAAAge,EAAAp2D,OAAA,IAEAq3D,EAAAjB,EAAAt7B,QAEAs7B,EAAArxD,YAAAsyD,EAAAtyD,WACAqxD,EAAAM,UAAAW,EAAAX,SAKAN,EAAA,MAAA34B,IAAA45B,EAAA55B,IACA24B,EAAA,MAAAjoB,IAAAkpB,EAAAlpB,IACAioB,EAAA,MAAAzzD,UAAA00D,EAAA10D,UAGAyzD,GAOAhqD,KAAAkqD,qBAAA,SAAA5a,GACA,IACA/7C,EACAo8C,EACAX,KACArF,KAIA,IAFAqF,EAAAr2C,WAAA,EAEApF,EAAA,EAAeA,EAAA+7C,EAAA17C,OAAqBL,IACpCo8C,EAAAL,EAAA/7C,GAGA,+BAAAo8C,EAAAvK,aAGA4J,EAAAp7C,SACAo7C,EAAAz4C,SAAAo5C,EAAAte,IAAA2d,EAAA3d,IACAsY,EAAA50C,KAAAi6C,IAEAA,GAAAW,GACAX,EAAAr2C,WAAAg3C,EAAAv2C,KAAAT,WACAq2C,EAAAjN,IAAA4N,EAAA5N,IACAiN,EAAA3d,IAAAse,EAAAte,MAGA,8CAAAse,EAAAvK,cACA4J,EAAAhD,UAAA,GAEAgD,EAAAz4C,SAAAo5C,EAAAte,IAAA2d,EAAA3d,IACA2d,EAAAr2C,YAAAg3C,EAAAv2C,KAAAT,WACAq2C,EAAAj6C,KAAA46C,IAcA,OARAhG,EAAA/1C,UACAo7C,EAAAz4C,UACAy4C,EAAAz4C,UAAA,KACAy4C,EAAAz4C,SAAAozC,IAAA/1C,OAAA,GAAA2C,UAIAozC,EAAA50C,KAAAi6C,GACArF,GAOA3pC,KAAAmqD,qBAAA,SAAAxgB,GACA,IACAp2C,EACAy7C,EACAic,KACAjB,KAiBA,IAbAiB,EAAAtyD,WAAA,EACAsyD,EAAAX,SAAA,EACAW,EAAA10D,SAAA,EACA00D,EAAAlpB,IAAA4H,EAAA,GAAA5H,IACAkpB,EAAA55B,IAAAsY,EAAA,GAAAtY,IAGA24B,EAAArxD,WAAA,EACAqxD,EAAAM,SAAA,EACAN,EAAAzzD,SAAA,EACAyzD,EAAAjoB,IAAA4H,EAAA,GAAA5H,IACAioB,EAAA34B,IAAAsY,EAAA,GAAAtY,IAEA99B,EAAA,EAAeA,EAAAo2C,EAAA/1C,OAAmBL,IAClCy7C,EAAArF,EAAAp2C,GAEAy7C,EAAAhD,UAGAif,EAAAr3D,SACAo2D,EAAAj1D,KAAAk2D,GACAjB,EAAArxD,YAAAsyD,EAAAtyD,WACAqxD,EAAAM,UAAAW,EAAAX,SACAN,EAAAzzD,UAAA00D,EAAA10D,UAGA00D,GAAAjc,GACAic,EAAAX,SAAAtb,EAAAp7C,OACAq3D,EAAAtyD,WAAAq2C,EAAAr2C,WACAsyD,EAAAlpB,IAAAiN,EAAAjN,IACAkpB,EAAA55B,IAAA2d,EAAA3d,IACA45B,EAAA10D,SAAAy4C,EAAAz4C,WAEA00D,EAAA10D,UAAAy4C,EAAAz4C,SACA00D,EAAAX,UAAAtb,EAAAp7C,OACAq3D,EAAAtyD,YAAAq2C,EAAAr2C,WACAsyD,EAAAl2D,KAAAi6C,IAaA,OATAgb,EAAAp2D,QAAAq3D,EAAA10D,UAAA,IACA00D,EAAA10D,SAAAyzD,IAAAp2D,OAAA,GAAA2C,UAEAyzD,EAAArxD,YAAAsyD,EAAAtyD,WACAqxD,EAAAM,UAAAW,EAAAX,SACAN,EAAAzzD,UAAA00D,EAAA10D,SAGAyzD,EAAAj1D,KAAAk2D,GACAjB,GAIAhqD,KAAA+oD,qBAAA,SAAAiB,EAAAsB,GACA,IACAC,EAAAh4D,EACA+yD,EACA2E,EACAjc,EACA4W,EAAA0F,GAAA,EACArG,KAEA,IAAAsG,EAAA,EAAeA,EAAAvB,EAAAp2D,OAAiB23D,IAGhC,IAFAN,EAAAjB,EAAAuB,GAEAh4D,EAAA,EAAiBA,EAAA03D,EAAAr3D,OAAuBL,IACxCy7C,EAAAic,EAAA13D,GAEA+yD,EAAAiB,IAEAjB,EAAAV,aACAU,EAAAD,sBAAArX,EAAAjN,IAAAiN,EAAA3d,IACAi1B,EAAA/vD,SAAAy4C,EAAAz4C,SACA+vD,EAAAtlC,KAAA,EAAAguB,EAAAp7C,OACA0yD,EAAAtlC,MAAAguB,EAAAr2C,WAEAq2C,EAAAhD,WACAsa,EAAAjlB,MAAA6jB,UAAA,GAGAU,GAAAU,EAAAtlC,KAEAikC,EAAAlwD,KAAAuxD,GAGA,OAAArB,GAIAjlD,KAAA8qD,oBAAA,SAAAd,GACA,IACAuB,EAAAh4D,EAAAoG,EACAsxD,EACAjc,EACAW,EACAiW,EAAA,EACA4F,EAAAxB,EAAArxD,WACA8yD,EAAAzB,EAAAM,SACAoB,EAAAF,EAAA,EAAAC,EACAryD,EAAA,IAAA4B,WAAA0wD,GACAj5C,EAAA,IAAAC,SAAAtZ,EAAAX,QAGA,IAAA8yD,EAAA,EAAeA,EAAAvB,EAAAp2D,OAAiB23D,IAIhC,IAHAN,EAAAjB,EAAAuB,GAGAh4D,EAAA,EAAiBA,EAAA03D,EAAAr3D,OAAuBL,IAIxC,IAHAy7C,EAAAic,EAAA13D,GAGAoG,EAAA,EAAmBA,EAAAq1C,EAAAp7C,OAAyB+F,IAC5Cg2C,EAAAX,EAAAr1C,GAEA8Y,EAAAu4B,UAAA4a,EAAAjW,EAAAv2C,KAAAT,YACAitD,GAAA,EACAxsD,EAAAswB,IAAAimB,EAAAv2C,KAAAwsD,GACAA,GAAAjW,EAAAv2C,KAAAT,WAIA,OAAAS,GAKA4G,KAAA2qD,kBAAA,SAAAX,GACA,IAAA2B,EAAAC,EAAAC,EAAAjB,EAAAjyD,EAAA2xD,EAAA/zD,EAAAi0D,EAEA7xD,EAAAqxD,EAAArxD,WACA2xD,EAAAN,EAAAM,SACA/zD,EAAAyzD,EAAAzzD,SACAo1D,EAAAC,EAAA,EAEA,MAAAD,EAAAhC,EAAA/1D,QAAAg4D,EAAA5B,EAAAp2D,OAAA,CAIA,GAHAi4D,EAAAlC,EAAAgC,GACAf,EAAAZ,EAAA4B,GAEAC,EAAA9pB,MAAA6oB,EAAA7oB,IACA,MAGA6oB,EAAA7oB,IAAA8pB,EAAA9pB,IAGA4pB,KAMAC,IACAjzD,GAAAiyD,EAAAjyD,WACA2xD,GAAAM,EAAAN,SACA/zD,GAAAq0D,EAAAr0D,UAGA,WAAAq1D,EAEA5B,EAGA4B,IAAA5B,EAAAp2D,OAEA,MAGA42D,EAAAR,EAAA1wD,MAAAsyD,GACApB,EAAA7xD,aACA6xD,EAAAj0D,WACAi0D,EAAAF,WACAE,EAAAzoB,IAAAyoB,EAAA,GAAAzoB,IACAyoB,EAAAn5B,IAAAm5B,EAAA,GAAAn5B,IAEAm5B,IAKAxqD,KAAA0qD,gBAAA,SAAAV,GACA,IAAA2B,EAAAC,EAAAC,EAAAjB,EAAAkB,EAAAC,EAmCAC,EAjCAL,EAAAhC,EAAA/1D,OAAA,EACAg4D,EAAA5B,EAAAp2D,OAAA,EACAk4D,EAAA,KACAC,GAAA,EAEA,MAAAJ,GAAA,GAAAC,GAAA,GAIA,GAHAC,EAAAlC,EAAAgC,GACAf,EAAAZ,EAAA4B,GAEAC,EAAA9pB,MAAA6oB,EAAA7oB,IAAA,CACAgqB,GAAA,EACA,MAGAF,EAAA9pB,IAAA6oB,EAAA7oB,IACA4pB,KAIAA,IAAAhC,EAAA/1D,OAAA,IAIAk4D,EAAAF,GAGAA,KAGA,IAAAG,GAAA,OAAAD,EACA,YAWA,GALAE,EADAD,EACAH,EAEAE,EAGA,IAAAE,EACA,OAAAhC,EAGA,IAAAQ,EAAAR,EAAA1wD,MAAA0yD,GACA7hB,EAAAqgB,EAAAn3C,OAAA,SAAA44C,EAAArB,GAIA,OAHAqB,EAAAtzD,YAAAiyD,EAAAjyD,WACAszD,EAAA11D,UAAAq0D,EAAAr0D,SACA01D,EAAA3B,UAAAM,EAAAN,SACA2B,IACQtzD,WAAA,EAAApC,SAAA,EAAA+zD,SAAA,IAQR,OANAE,EAAA7xD,WAAAwxC,EAAAxxC,WACA6xD,EAAAj0D,SAAA4zC,EAAA5zC,SACAi0D,EAAAF,SAAAngB,EAAAmgB,SACAE,EAAAzoB,IAAAyoB,EAAA,GAAAzoB,IACAyoB,EAAAn5B,IAAAm5B,EAAA,GAAAn5B,IAEAm5B,GAGAxqD,KAAAksD,cAAA,SAAAC,GACAxC,EAAAwC,IAIA9d,EAAAh1C,UAAA,IAAA4gC,EAOAwtB,EAAA,SAAA9xD,EAAAyD,GACA,kBAAAA,EAAA2oC,WACAvtC,IAAAmB,EAAAy0C,kBAAArI,MACApsC,EAAAy0C,kBAAArI,IAAA3oC,EAAA2oC,UAGAvtC,IAAAmB,EAAA+zD,cACA/zD,EAAA+zD,cAAAtwD,EAAA2oC,IAEApsC,EAAA+zD,cAAAjgD,KAAAwD,IAAAtX,EAAA+zD,cAAAtwD,EAAA2oC,UAGAvtC,IAAAmB,EAAAy2D,cACAz2D,EAAAy2D,cAAAhzD,EAAA2oC,IAEApsC,EAAAy2D,cAAA3iD,KAAAC,IAAA/T,EAAAy2D,cAAAhzD,EAAA2oC,MAIA,kBAAA3oC,EAAAi4B,WACA78B,IAAAmB,EAAAy0C,kBAAA/Y,MACA17B,EAAAy0C,kBAAA/Y,IAAAj4B,EAAAi4B,UAGA78B,IAAAmB,EAAA8zD,cACA9zD,EAAA8zD,cAAArwD,EAAAi4B,IAEA17B,EAAA8zD,cAAAhgD,KAAAwD,IAAAtX,EAAA8zD,cAAArwD,EAAAi4B,UAGA78B,IAAAmB,EAAA02D,cACA12D,EAAA02D,cAAAjzD,EAAAi4B,IAEA17B,EAAA02D,cAAA5iD,KAAAC,IAAA/T,EAAA02D,cAAAjzD,EAAAi4B,OASAq2B,EAAA,SAAA/xD,UACAA,EAAA8zD,qBACA9zD,EAAA02D,qBACA12D,EAAA+zD,qBACA/zD,EAAAy2D,eAQAzE,EAAA,SAAAhyD,GACA,IACA+oD,EACAz+B,EAGAqsC,EAAA32D,EAAA8zD,cAAA9zD,EAAAy0C,kBAAA/Y,IAoBA,OAhBAqtB,EAAA/oD,EAAAy0C,kBAAAsU,oBAGAA,GAAA4N,EAGA5N,EAAAj1C,KAAAC,IAAA,EAAAg1C,GAEA,UAAA/oD,EAAAgL,OAGAsf,EAAAtqB,EAAA8tC,WAAAykB,EACAxJ,GAAAz+B,EACAy+B,EAAAj1C,KAAAuI,MAAA0sC,IAGAA,GAQA3V,EAAA,SAAApmC,EAAAsmC,GAIAjpC,KAAAgpC,eAAA,EACAhpC,KAAAipC,iBAEA,qBAAAtmC,EAAA4pD,MACAvsD,KAAAwsD,cAAA7pD,EAAA4pD,MAEAvsD,KAAAwsD,aAAA,EAGAxsD,KAAAwpC,iBACAxpC,KAAAopC,WAAA,KACAppC,KAAAysD,gBACAzsD,KAAAspC,mBACAtpC,KAAAupC,mBACAvpC,KAAA0sD,aAAA,EACA1sD,KAAA2sD,cAAA,EAEA5jB,EAAA1vC,UAAAynC,KAAAntC,KAAAqM,MAGAA,KAAAjL,KAAA,SAAA20C,GAGA,OAAAA,EAAA3L,KACA/9B,KAAAspC,gBAAAv0C,KAAA20C,GAGAA,EAAAC,OACA3pC,KAAAupC,gBAAAx0C,KAAA20C,IAMA1pC,KAAAwpC,cAAAz0C,KAAA20C,EAAA/zC,OACAqK,KAAAysD,aAAA13D,KAAA20C,EAAAsb,OACAhlD,KAAA0sD,cAAAhjB,EAAAsb,MAAArsD,WAEA,UAAA+wC,EAAA/zC,MAAAgL,OACAX,KAAAopC,WAAAM,EAAA/zC,YAEA,UAAA+zC,EAAA/zC,MAAAgL,OACAX,KAAAqpC,WAAAK,EAAA/zC,WAKAozC,EAAA1vC,UAAA,IAAA4gC,EACA8O,EAAA1vC,UAAA+6B,MAAA,SAAAyV,GACA,IAQAE,EACAD,EACAjxC,EAEAtF,EAXA4C,EAAA,EACA2E,GACAmvC,YACAC,kBACAC,YACAyiB,SAKA5iB,EAAA,EAGA,GAAAhqC,KAAAwpC,cAAA51C,OAAAoM,KAAAgpC,eAAA,CACA,0BAAAa,GACA,uBAAAA,EAIA,OACK,GAAA7pC,KAAAwsD,YAGL,OACK,OAAAxsD,KAAAwpC,cAAA51C,OAaL,OANAoM,KAAA2sD,qBAEA3sD,KAAA2sD,eAAA3sD,KAAAgpC,iBACAhpC,KAAAoH,QAAA,QACApH,KAAA2sD,cAAA,IAuCA,IAjCA3sD,KAAAopC,YACAY,EAAAhqC,KAAAopC,WAAAgB,kBAAArI,IACAkmB,EAAA7vD,QAAA,SAAAowD,GACA1tD,EAAA8xD,KAAApE,GAAAxoD,KAAAopC,WAAAof,IACKxoD,OACFA,KAAAqpC,aACHW,EAAAhqC,KAAAqpC,WAAAe,kBAAArI,IACAimB,EAAA5vD,QAAA,SAAAowD,GACA1tD,EAAA8xD,KAAApE,GAAAxoD,KAAAqpC,WAAAmf,IACKxoD,OAGL,IAAAA,KAAAwpC,cAAA51C,OACAkH,EAAA6F,KAAAX,KAAAwpC,cAAA,GAAA7oC,KAEA7F,EAAA6F,KAAA,WAGAX,KAAA2sD,eAAA3sD,KAAAwpC,cAAA51C,OAEAiF,EAAAivD,EAAAjvD,YAAAmH,KAAAwpC,eAGA1uC,EAAAjC,YAAA,IAAAmC,WAAAnC,EAAAF,YAIAmC,EAAAjC,YAAA6wB,IAAA7wB,GAGAiC,EAAA1B,KAAA,IAAA4B,WAAAgF,KAAA0sD,cAGAn5D,EAAA,EAAaA,EAAAyM,KAAAysD,aAAA74D,OAA8BL,IAC3CuH,EAAA1B,KAAAswB,IAAA1pB,KAAAysD,aAAAl5D,GAAA4C,GACAA,GAAA6J,KAAAysD,aAAAl5D,GAAAoF,WAKA,IAAApF,EAAA,EAAaA,EAAAyM,KAAAspC,gBAAA11C,OAAiCL,IAC9Cw2C,EAAA/pC,KAAAspC,gBAAA/1C,GACAw2C,EAAAxpB,UAAAwpB,EAAAM,SAAAL,EACAD,EAAAxpB,WAAA,IACAwpB,EAAAvzC,QAAAuzC,EAAAO,OAAAN,EACAD,EAAAvzC,SAAA,IACAsE,EAAAovC,eAAAH,EAAAQ,SAAA,EACAzvC,EAAAmvC,SAAAl1C,KAAAg1C,GAKA,IAAAx2C,EAAA,EAAaA,EAAAyM,KAAAupC,gBAAA31C,OAAiCL,IAC9Cu2C,EAAA9pC,KAAAupC,gBAAAh2C,GACAu2C,EAAAU,QAAAV,EAAA/H,IAAAiI,EACAF,EAAAU,SAAA,IACA1vC,EAAAqvC,SAAAp1C,KAAA+0C,GAIAhvC,EAAAqvC,SAAAM,aAAAzqC,KAAAipC,eAAAwB,aAGAzqC,KAAAwpC,cAAA51C,OAAA,EACAoM,KAAAopC,WAAA,KACAppC,KAAAysD,aAAA74D,OAAA,EACAoM,KAAAspC,gBAAA11C,OAAA,EACAoM,KAAA0sD,aAAA,EACA1sD,KAAAupC,gBAAA31C,OAAA,EAGAoM,KAAAoH,QAAA,OAAAtM,GAGAkF,KAAA2sD,eAAA3sD,KAAAgpC,iBACAhpC,KAAAoH,QAAA,QACApH,KAAA2sD,cAAA,IASA/e,EAAA,SAAAjrC,GACA,IAGAymC,EACAC,EAHAzuC,EAAAoF,KACA6sD,GAAA,EAIAjf,EAAAv0C,UAAAynC,KAAAntC,KAAAqM,MAEA2C,QACA3C,KAAA0+C,oBAAA/7C,EAAA+7C,qBAAA,EACA1+C,KAAA8sD,qBAEA9sD,KAAA+sD,iBAAA,WACA,IAAAC,KACAhtD,KAAA8sD,kBAAAE,EAEAA,EAAArsD,KAAA,MACAqsD,EAAA/jB,eAAA,IAAAwF,EAAA8B,eAGAyc,EAAAC,UAAA,IAAAtsB,EACAqsB,EAAAjd,6BAAA,IAAAtB,EAAAkC,wBAAA,SACAqc,EAAAhd,qCAAA,IAAAvB,EAAAkC,wBAAA,kBACAqc,EAAA/c,WAAA,IAAAlN,EACAiqB,EAAA1c,eAAA,IAAAvH,EAAApmC,EAAAqqD,EAAA/jB,gBACA+jB,EAAAE,eAAAF,EAAAC,UAEAD,EAAAC,UACA3uB,KAAA0uB,EAAAjd,8BACAzR,KAAA0uB,EAAA/c,YACA+c,EAAAC,UACA3uB,KAAA0uB,EAAAhd,sCACA1R,KAAA0uB,EAAA/jB,gBACA3K,KAAA0uB,EAAA1c,gBAEA0c,EAAA/jB,eAAAhjC,GAAA,qBAAA08B,GACAqqB,EAAAC,UAAAlsB,aAAA4B,EAAA9B,aAGAmsB,EAAAC,UAAAhnD,GAAA,gBAAA7M,GACA,mBAAAA,EAAAuH,MAAAqsD,EAAA5c,qBACA/G,MACAe,mBACAsU,oBAAA9jD,EAAA8jD,qBAEAC,MAAA,OACAh+C,KAAA,SAGAqsD,EAAA1c,eAAAtH,iBACAgkB,EAAA5c,mBAAA,IAAA9B,EAAAjF,GAEA2jB,EAAA/c,WACA3R,KAAA0uB,EAAA5c,oBACA9R,KAAA0uB,EAAA1c,mBAKA0c,EAAA1c,eAAArqC,GAAA,OAAAjG,KAAAoH,QAAA9C,KAAAtE,KAAA,SAEAgtD,EAAA1c,eAAArqC,GAAA,OAAAjG,KAAAoH,QAAA9C,KAAAtE,KAAA,UAGAA,KAAAmtD,gBAAA,WACA,IAAAH,KACAhtD,KAAA8sD,kBAAAE,EAEAA,EAAArsD,KAAA,KACAqsD,EAAA/jB,eAAA,IAAAwF,EAAA8B,eAGAyc,EAAApd,aAAA,IAAAnB,EAAA+B,sBACAwc,EAAA3uB,YAAA,IAAAoQ,EAAAgC,qBACAuc,EAAAnd,iBAAA,IAAApB,EAAAiC,iBACAsc,EAAAld,6BAAA,IAAArB,EAAAkC,wBAAA,SACAqc,EAAAjd,6BAAA,IAAAtB,EAAAkC,wBAAA,SACAqc,EAAAhd,qCAAA,IAAAvB,EAAAkC,wBAAA,kBACAqc,EAAA/c,WAAA,IAAAlN,EACAiqB,EAAA9c,WAAA,IAAArM,EACAmpB,EAAA3c,cAAA,IAAA5B,EAAAmC,cACAoc,EAAA1c,eAAA,IAAAvH,EAAApmC,EAAAqqD,EAAA/jB,gBACA+jB,EAAAE,eAAAF,EAAApd,aAGAod,EAAApd,aACAtR,KAAA0uB,EAAA3uB,aACAC,KAAA0uB,EAAAnd,kBAIAmd,EAAAnd,iBACAvR,KAAA0uB,EAAAld,8BACAxR,KAAA0uB,EAAA9c,YACA8c,EAAAnd,iBACAvR,KAAA0uB,EAAAjd,8BACAzR,KAAA0uB,EAAA/c,YAEA+c,EAAAnd,iBACAvR,KAAA0uB,EAAAhd,sCACA1R,KAAA0uB,EAAA/jB,gBACA3K,KAAA0uB,EAAA1c,gBAGA0c,EAAA9c,WAAA5R,KAAA0uB,EAAA3c,eACA/R,KAAA0uB,EAAA1c,gBAEA0c,EAAAnd,iBAAA5pC,GAAA,gBAAA7M,GACA,IAAA7F,EAEA,gBAAA6F,EAAAuH,KAAA,CACApN,EAAA6F,EAAAiW,OAAAzb,OAGA,MAAAL,IACA61C,GAAA,UAAAhwC,EAAAiW,OAAA9b,GAAAoN,KAGW0oC,GAAA,UAAAjwC,EAAAiW,OAAA9b,GAAAoN,OACX0oC,EAAAjwC,EAAAiW,OAAA9b,GACA81C,EAAAe,kBAAAsU,oBAAA9jD,EAAA8jD,sBAJAtV,EAAAhwC,EAAAiW,OAAA9b,GACA61C,EAAAgB,kBAAAsU,oBAAA9jD,EAAA8jD,qBAQAtV,IAAA4jB,EAAA7c,qBACA6c,EAAA1c,eAAAtH,iBACAgkB,EAAA7c,mBAAA,IAAA9B,EAAAjF,EAAAzmC,GAEAqqD,EAAA7c,mBAAAlqC,GAAA,6BAAAmkC,GAIAf,IACAA,EAAAe,oBAKA4iB,EAAA5c,mBAAAqY,eAAAre,EAAA/Y,QAIA27B,EAAA7c,mBAAAlqC,GAAA,oBACArL,EAAAwM,QAAA9C,KAAA1J,EAAA,YAEAoyD,EAAA7c,mBAAAlqC,GAAA,+BAAAy4C,GACArV,GACA2jB,EAAA5c,mBAAAuY,4BAAAjK,KAKAsO,EAAA9c,WACA5R,KAAA0uB,EAAA7c,oBACA7R,KAAA0uB,EAAA1c,iBAGAjH,IAAA2jB,EAAA5c,qBAEA4c,EAAA1c,eAAAtH,iBACAgkB,EAAA5c,mBAAA,IAAA9B,EAAAjF,GAGA2jB,EAAA/c,WACA3R,KAAA0uB,EAAA5c,oBACA9R,KAAA0uB,EAAA1c,oBAMA0c,EAAA1c,eAAArqC,GAAA,OAAAjG,KAAAoH,QAAA9C,KAAAtE,KAAA,SAEAgtD,EAAA1c,eAAArqC,GAAA,OAAAjG,KAAAoH,QAAA9C,KAAAtE,KAAA,UAIAA,KAAAotD,uBAAA,SAAA1O,GACA,IAAAsO,EAAAhtD,KAAA8sD,kBAEA9sD,KAAA0+C,sBACArV,IACAA,EAAAe,kBAAA/Y,SAAA78B,EACA60C,EAAAe,kBAAArI,SAAAvtC,EACAkzD,EAAAre,GACAA,EAAAe,kBAAAsU,sBACAsO,EAAAjd,8BACAid,EAAAjd,6BAAArgB,iBAGA0Z,IACA4jB,EAAA7c,qBACA6c,EAAA7c,mBAAA0Z,aACAmD,EAAAld,6BAAApgB,iBAEA0Z,EAAAgB,kBAAA/Y,SAAA78B,EACA40C,EAAAgB,kBAAArI,SAAAvtC,EACAkzD,EAAAte,GACA4jB,EAAA3c,cAAAtlB,QACAqe,EAAAgB,kBAAAsU,uBAGAsO,EAAAhd,sCACAgd,EAAAhd,qCAAAtgB,iBAIA1vB,KAAA4oD,oBAAA,SAAA5nB,GACAqI,GACArpC,KAAA8sD,kBAAA1c,mBAAAwY,oBAAA5nB,IAIAhhC,KAAAksD,cAAA,SAAAvC,GACAvgB,GAAAppC,KAAA8sD,kBAAA3c,oBACAnwC,KAAA8sD,kBAAA3c,mBAAA+b,cAAAvC,IAKA3pD,KAAAjL,KAAA,SAAAqE,GACA,GAAAyzD,EAAA,CACA,IAAAQ,EAAA7F,EAAApuD,GAEAi0D,GAAA,QAAArtD,KAAA8sD,kBAAAnsD,KACAX,KAAA+sD,mBACOM,GAAA,OAAArtD,KAAA8sD,kBAAAnsD,MACPX,KAAAmtD,kBAEAN,GAAA,EAEA7sD,KAAA8sD,kBAAAI,eAAAn4D,KAAAqE,IAIA4G,KAAAo0B,MAAA,WACAy4B,GAAA,EAEA7sD,KAAA8sD,kBAAAI,eAAA94B,SAIAp0B,KAAA6wC,cAAA,WACA7wC,KAAA8sD,kBAAAzc,eACArwC,KAAA8sD,kBAAAzc,cAAAtlB,UAKA6iB,EAAAv0C,UAAA,IAAA4gC,EAEArnC,EAAAC,SACA+6C,aACAS,qBACAC,qBACA0Z,mBACAC,sBAGGqF,SAAA,GAAAxc,oBAAA,GAAAC,iBAAA,GAAAwc,kBAAA,GAAAvc,kBAAA,GAAAwc,iBAAA,GAAAxrB,qBAAA,GAAAyrB,qBAAA,KAAqKC,IAAA,SAAAh7D,EAAAE,EAAAC,GASxK,aAEA,IAAAopD,EAAAvpD,EAAA,2BACAuuD,EAAAvuD,EAAA,wCAAAuuD,eACA0M,KACAA,EAAAC,GAAAl7D,EAAA,oBACAi7D,EAAAE,IAAAn7D,EAAA,mBAGA,IACAo7D,EAAA,IACA3R,EAAA,IACAC,EAAA,GAEAoL,EAAA,SAAApuD,GACA,OAAAA,EAAA,SAAA84B,WAAA,IACA94B,EAAA,SAAA84B,WAAA,IACA94B,EAAA,SAAA84B,WAAA,IAUA67B,EAAA,SAAAv1D,EAAAykD,GACA,IAGArb,EAAAjhC,EAFAwe,EAAA,EACAC,EAAA+8B,EAGA,MAAA/8B,EAAA5mB,EAAAG,WAEA,GAAAH,EAAA2mB,KAAAi9B,GAAA5jD,EAAA4mB,KAAAg9B,EAiCAj9B,IACAC,QAlCA,CAKA,OAHAwiB,EAAAppC,EAAAghC,SAAAra,EAAAC,GACAze,EAAAgtD,EAAAC,GAAArrB,UAAAX,EAAAqb,EAAAM,KAEA58C,GACA,UACAs8C,EAAAM,MACAN,EAAAM,IAAAoQ,EAAAC,GAAArR,SAAA3a,IAEA,MACA,UACAqb,EAAA9lB,QACA8lB,EAAA9lB,MAAAw2B,EAAAC,GAAApR,SAAA5a,IAEA,MACA,QACA,MAIA,GAAAqb,EAAAM,KAAAN,EAAA9lB,MACA,OAGAhY,GAAAg9B,EACA/8B,GAAA+8B,IAgBA6R,EAAA,SAAAx1D,EAAAykD,EAAAzjD,GACA,IAGAooC,EAAAjhC,EAAAstD,EAAA/N,EAAAruB,EAFA1S,EAAA,EACAC,EAAA+8B,EAGA+R,GAAA,EAGA,MAAA9uC,EAAA5mB,EAAAG,WAEA,GAAAH,EAAA2mB,KAAAi9B,GAAA5jD,EAAA4mB,KAAAg9B,EAkCAj9B,IACAC,QAnCA,CAKA,OAHAwiB,EAAAppC,EAAAghC,SAAAra,EAAAC,GACAze,EAAAgtD,EAAAC,GAAArrB,UAAAX,EAAAqb,EAAAM,KAEA58C,GACA,UACAstD,EAAAN,EAAAC,GAAAxN,aAAAxe,EAAAqb,EAAA9lB,OACA+oB,EAAAyN,EAAAC,GAAA5N,+BAAApe,GACA,UAAAqsB,GAAA/N,IACAruB,EAAA87B,EAAAC,GAAAvN,aAAAze,GACA/P,IACAA,EAAAlxB,KAAA,QACAnH,EAAA6I,MAAAtN,KAAA88B,GACAq8B,GAAA,IAGA,MACA,QACA,MAGA,GAAAA,EACA,MAGA/uC,GAAAg9B,EACA/8B,GAAA+8B,EAYA/8B,EAAA5mB,EAAAG,WACAwmB,EAAAC,EAAA+8B,EACA+R,GAAA,EACA,MAAA/uC,GAAA,EAEA,GAAA3mB,EAAA2mB,KAAAi9B,GAAA5jD,EAAA4mB,KAAAg9B,EAkCAj9B,IACAC,QAnCA,CAKA,OAHAwiB,EAAAppC,EAAAghC,SAAAra,EAAAC,GACAze,EAAAgtD,EAAAC,GAAArrB,UAAAX,EAAAqb,EAAAM,KAEA58C,GACA,UACAstD,EAAAN,EAAAC,GAAAxN,aAAAxe,EAAAqb,EAAA9lB,OACA+oB,EAAAyN,EAAAC,GAAA5N,+BAAApe,GACA,UAAAqsB,GAAA/N,IACAruB,EAAA87B,EAAAC,GAAAvN,aAAAze,GACA/P,IACAA,EAAAlxB,KAAA,QACAnH,EAAA6I,MAAAtN,KAAA88B,GACAq8B,GAAA,IAGA,MACA,QACA,MAGA,GAAAA,EACA,MAGA/uC,GAAAg9B,EACA/8B,GAAA+8B,IAiBAgS,EAAA,SAAA31D,EAAAykD,EAAAzjD,GACA,IAGAooC,EAAAjhC,EAAAstD,EAAA/N,EAAAruB,EAAA8Q,EAAApvC,EAAA0qD,EAFA9+B,EAAA,EACAC,EAAA+8B,EAGA+R,GAAA,EAEAlf,GACA51C,QACA4nB,KAAA,GAIA,MAAA5B,EAAA5mB,EAAAG,WAEA,GAAAH,EAAA2mB,KAAAi9B,GAAA5jD,EAAA4mB,KAAAg9B,EAwDAj9B,IACAC,QAzDA,CAKA,OAHAwiB,EAAAppC,EAAAghC,SAAAra,EAAAC,GACAze,EAAAgtD,EAAAC,GAAArrB,UAAAX,EAAAqb,EAAAM,KAEA58C,GACA,UAGA,GAFAstD,EAAAN,EAAAC,GAAAxN,aAAAxe,EAAAqb,EAAA9lB,OACA+oB,EAAAyN,EAAAC,GAAA5N,+BAAApe,GACA,UAAAqsB,IACA/N,IAAAgO,IACAr8B,EAAA87B,EAAAC,GAAAvN,aAAAze,GACA/P,IACAA,EAAAlxB,KAAA,QACAnH,EAAA4I,MAAArN,KAAA88B,GACAq8B,GAAA,KAGA10D,EAAA40D,eAAA,CACA,GAAAlO,GACA,IAAAlR,EAAAhuB,KAAA,CACA2hB,EAAA,IAAA3nC,WAAAg0C,EAAAhuB,MACAztB,EAAA,EACA,MAAAy7C,EAAA51C,KAAAxF,OACAqqD,EAAAjP,EAAA51C,KAAAs1B,QACAiU,EAAAjZ,IAAAu0B,EAAA1qD,GACAA,GAAA0qD,EAAAtlD,WAEAg1D,EAAAC,GAAArN,4BAAA5d,KACAnpC,EAAA40D,cAAAT,EAAAC,GAAAvN,aAAA1d,GACAnpC,EAAA40D,cAAAztD,KAAA,SAEAquC,EAAAhuB,KAAA,EAGAguB,EAAA51C,KAAArE,KAAA6sC,GACAoN,EAAAhuB,MAAA4gB,EAAAjpC,WAGA,MACA,QACA,MAGA,GAAAu1D,GAAA10D,EAAA40D,cACA,MAGAjvC,GAAAg9B,EACA/8B,GAAA+8B,EAYA/8B,EAAA5mB,EAAAG,WACAwmB,EAAAC,EAAA+8B,EACA+R,GAAA,EACA,MAAA/uC,GAAA,EAEA,GAAA3mB,EAAA2mB,KAAAi9B,GAAA5jD,EAAA4mB,KAAAg9B,EAkCAj9B,IACAC,QAnCA,CAKA,OAHAwiB,EAAAppC,EAAAghC,SAAAra,EAAAC,GACAze,EAAAgtD,EAAAC,GAAArrB,UAAAX,EAAAqb,EAAAM,KAEA58C,GACA,UACAstD,EAAAN,EAAAC,GAAAxN,aAAAxe,EAAAqb,EAAA9lB,OACA+oB,EAAAyN,EAAAC,GAAA5N,+BAAApe,GACA,UAAAqsB,GAAA/N,IACAruB,EAAA87B,EAAAC,GAAAvN,aAAAze,GACA/P,IACAA,EAAAlxB,KAAA,QACAnH,EAAA4I,MAAArN,KAAA88B,GACAq8B,GAAA,IAGA,MACA,QACA,MAGA,GAAAA,EACA,MAGA/uC,GAAAg9B,EACA/8B,GAAA+8B,IAgBAkS,EAAA,SAAAnkC,EAAAokC,GACA,GAAApkC,EAAA7nB,OAAA6nB,EAAA7nB,MAAAzO,OAAA,CACA,IAAA26D,EAAAD,EACA,qBAAAC,IACAA,EAAArkC,EAAA7nB,MAAA,GAAAgvB,KAEAnH,EAAA7nB,MAAAjK,QAAA,SAAAw0D,GACAA,EAAAv7B,IAAA4vB,EAAA2L,EAAAv7B,IAAAk9B,GACA3B,EAAA7qB,IAAAkf,EAAA2L,EAAA7qB,IAAAwsB,GAEA3B,EAAAt7B,QAAAs7B,EAAAv7B,IAAAy8B,EACAlB,EAAA4B,QAAA5B,EAAA7qB,IAAA+rB,IAIA,GAAA5jC,EAAA9nB,OAAA8nB,EAAA9nB,MAAAxO,OAAA,CACA,IAAA66D,EAAAH,EAWA,GAVA,qBAAAG,IACAA,EAAAvkC,EAAA9nB,MAAA,GAAAivB,KAEAnH,EAAA9nB,MAAAhK,QAAA,SAAAw0D,GACAA,EAAAv7B,IAAA4vB,EAAA2L,EAAAv7B,IAAAo9B,GACA7B,EAAA7qB,IAAAkf,EAAA2L,EAAA7qB,IAAA0sB,GAEA7B,EAAAt7B,QAAAs7B,EAAAv7B,IAAAy8B,EACAlB,EAAA4B,QAAA5B,EAAA7qB,IAAA+rB,IAEA5jC,EAAAkkC,cAAA,CACA,IAAAzrB,EAAAzY,EAAAkkC,cACAzrB,EAAAtR,IAAA4vB,EAAAte,EAAAtR,IAAAo9B,GACA9rB,EAAAZ,IAAAkf,EAAAte,EAAAZ,IAAA0sB,GAEA9rB,EAAArR,QAAAqR,EAAAtR,IAAAy8B,EACAnrB,EAAA6rB,QAAA7rB,EAAAtR,IAAAy8B,KAQAY,EAAA,SAAAl2D,GACA,IAOAopC,EANAssB,GAAA,EACAS,EAAA,EACAC,EAAA,KACA5tB,EAAA,KACAc,EAAA,EACAX,EAAA,EAGA,MAAA3oC,EAAA5E,OAAAutC,GAAA,GACA,IAAAxgC,EAAAgtD,EAAAE,IAAAtrB,UAAA/pC,EAAA2oC,GACA,OAAAxgC,GACA,qBAGA,GAAAnI,EAAA5E,OAAAutC,EAAA,IACA+sB,GAAA,EACA,MAOA,GAJApsB,EAAA6rB,EAAAE,IAAA5sB,gBAAAzoC,EAAA2oC,GAIAW,EAAAtpC,EAAA5E,OAAA,CACAs6D,GAAA,EACA,MAEA,OAAAltB,IACAY,EAAAppC,EAAAghC,SAAA2H,IAAAW,GACAd,EAAA2sB,EAAAE,IAAAprB,kBAAAb,IAEAT,GAAAW,EACA,MACA,YAGA,GAAAtpC,EAAA5E,OAAAutC,EAAA,GACA+sB,GAAA,EACA,MAOA,GAJApsB,EAAA6rB,EAAAE,IAAAtsB,cAAA/oC,EAAA2oC,GAIAW,EAAAtpC,EAAA5E,OAAA,CACAs6D,GAAA,EACA,MAEA,OAAAU,IACAhtB,EAAAppC,EAAAghC,SAAA2H,IAAAW,GACA8sB,EAAAjB,EAAAE,IAAArrB,gBAAAZ,IAEA+sB,IACAxtB,GAAAW,EACA,MACA,QACAX,IACA,MAEA,GAAA+sB,EACA,YAGA,UAAAU,GAAA,OAAA5tB,EACA,YAGA,IAAA6tB,EAAAf,EAAAc,EAEAp1D,GACA6I,QAEA1B,KAAA,QACA0wB,IAAA2P,EACAe,IAAAf,IAGArgC,KAAA,QACA0wB,IAAA2P,EAAA,KAAA2tB,EAAAE,EACA9sB,IAAAf,EAAA,KAAA2tB,EAAAE,KAKA,OAAAr1D,GAQAs1D,EAAA,SAAAt2D,GACA,IAAAykD,GACAM,IAAA,KACApmB,MAAA,MAGA39B,KAIA,QAAA+jD,KAFAwQ,EAAAv1D,EAAAykD,GAEAA,EAAA9lB,MACA,GAAA8lB,EAAA9lB,MAAAgH,eAAAof,GAAA,CACA,IAAA58C,EAAAs8C,EAAA9lB,MAAAomB,GACA,OAAA58C,GACA,KAAAs7C,EAAAuB,iBACAhkD,EAAA4I,SACA+rD,EAAA31D,EAAAykD,EAAAzjD,GACA,IAAAA,EAAA4I,MAAAxO,eACA4F,EAAA4I,MAEA,MACA,KAAA65C,EAAAwB,iBACAjkD,EAAA6I,SACA2rD,EAAAx1D,EAAAykD,EAAAzjD,GACA,IAAAA,EAAA6I,MAAAzO,eACA4F,EAAA6I,MAEA,MACA,QACA,OAIA,OAAA7I,GAWA03B,EAAA,SAAA14B,EAAA81D,GACA,IAEA90D,EAFAu1D,EAAAvH,EAAAhvD,GAUA,OALAgB,EADAu1D,EACAL,EAAAl2D,GAEAs2D,EAAAt2D,GAGAgB,MAAA6I,OAAA7I,EAAA4I,QAIAisD,EAAA70D,EAAA80D,GAEA90D,GALA,MAQA5G,EAAAC,SACAq+B,aAGG89B,kBAAA,GAAAC,mBAAA,GAAAC,0BAAA,GAAAC,uCAAA,KAAkHC,IAAA,SAAA18D,EAAAE,EAAAC,GACrH,IAEAw8D,EACAC,EACAC,EACAC,EACAjG,EACAC,EANAtB,EAAA,IAQAmH,EAAA,SAAAI,GACA,OAAAA,EAAAvH,GAGAoH,EAAA,SAAAG,EAAAb,GACA,OAAAa,EAAAb,GAGAW,EAAA,SAAAvuB,GACA,OAAAA,EAAAknB,GAGAsH,EAAA,SAAAxuB,EAAA4tB,GACA,OAAA5tB,EAAA4tB,GAGArF,EAAA,SAAAvoB,EAAA4tB,GACA,OAAAS,EAAAG,EAAAxuB,EAAA4tB,KAGApF,EAAA,SAAAxoB,EAAA4tB,GACA,OAAAU,EAAAC,EAAAvuB,GAAA4tB,IAGAh8D,EAAAC,SACAw8D,mBACAC,mBACAC,mBACAC,mBACAjG,mBACAC,yBAGIkG,IAAA,SAAAh9D,EAAAE,EAAAC,GACJ,aAEA,IAAAmxC,EAMAA,EAAA,SAAA2rB,GACA,IAEAC,EAAAD,EAAAh3D,WAGAk3D,EAAA,EAGAC,EAAA,EAGA9vD,KAAApM,OAAA,WACA,SAAAg8D,GAIA5vD,KAAA+vD,cAAA,WACA,SAAAH,EAAAE,GAIA9vD,KAAAgwD,SAAA,WACA,IACApkB,EAAA+jB,EAAAh3D,WAAAi3D,EACAK,EAAA,IAAAj1D,WAAA,GACAk1D,EAAAzmD,KAAAwD,IAAA,EAAA2iD,GAEA,OAAAM,EACA,UAAA18D,MAAA,sBAGAy8D,EAAAvmC,IAAAimC,EAAAn2B,SAAAoS,EACAA,EAAAskB,IACAL,EAAA,IAAAn9C,SAAAu9C,EAAAx3D,QAAAka,UAAA,GAGAm9C,EAAA,EAAAI,EACAN,GAAAM,GAIAlwD,KAAAonC,SAAA,SAAA5zB,GACA,IAAA28C,EACAL,EAAAt8C,GACAq8C,IAAAr8C,EACAs8C,GAAAt8C,IAEAA,GAAAs8C,EACAK,EAAA1mD,KAAAuI,MAAAwB,EAAA,GAEAA,GAAA,EAAA28C,EACAP,GAAAO,EAEAnwD,KAAAgwD,WAEAH,IAAAr8C,EACAs8C,GAAAt8C,IAKAxT,KAAAunC,SAAA,SAAAvmB,GACA,IACAovC,EAAA3mD,KAAAwD,IAAA6iD,EAAA9uC,GACAqvC,EAAAR,IAAA,GAAAO,EAUA,OARAN,GAAAM,EACAN,EAAA,EACAD,IAAAO,EACKR,EAAA,GACL5vD,KAAAgwD,WAGAI,EAAApvC,EAAAovC,EACAA,EAAA,EACAC,GAAAD,EAAApwD,KAAAunC,SAAA6oB,GAEAC,GAIArwD,KAAAswD,iBAAA,WACA,IAAAC,EACA,IAAAA,EAAA,EAA8BA,EAAAT,IAAyCS,EACvE,QAAAV,EAAA,aAAAU,GAIA,OAFAV,IAAAU,EACAT,GAAAS,EACAA,EAMA,OADAvwD,KAAAgwD,WACAO,EAAAvwD,KAAAswD,oBAIAtwD,KAAAknC,sBAAA,WACAlnC,KAAAonC,SAAA,EAAApnC,KAAAswD,qBAIAtwD,KAAAsnC,cAAA,WACAtnC,KAAAonC,SAAA,EAAApnC,KAAAswD,qBAIAtwD,KAAAmnC,sBAAA,WACA,IAAAqpB,EAAAxwD,KAAAswD,mBACA,OAAAtwD,KAAAunC,SAAAipB,EAAA,MAIAxwD,KAAA2lC,cAAA,WACA,IAAA0qB,EAAArwD,KAAAmnC,wBACA,SAAAkpB,EAEA,EAAAA,IAAA,GAEA,GAAAA,IAAA,IAKArwD,KAAAqnC,YAAA,WACA,WAAArnC,KAAAunC,SAAA,IAIAvnC,KAAAinC,iBAAA,WACA,OAAAjnC,KAAAunC,SAAA,IAGAvnC,KAAAgwD,YAGAp9D,EAAAC,QAAAmxC,OAEIysB,IAAA,SAAA/9D,EAAAE,EAAAC,GAUJ,aAEA,IAAAonC,EAAA,WACAj6B,KAAA8gC,KAAA,WACA,IAAA5G,KAOAl6B,KAAAiG,GAAA,SAAAtF,EAAAw5B,GACAD,EAAAv5B,KACAu5B,EAAAv5B,OAEAu5B,EAAAv5B,GAAAu5B,EAAAv5B,GAAAsnC,OAAA9N,IAQAn6B,KAAA4V,IAAA,SAAAjV,EAAAw5B,GACA,IAAAC,EACA,QAAAF,EAAAv5B,KAGAy5B,EAAAF,EAAAv5B,GAAAyN,QAAA+rB,GACAD,EAAAv5B,GAAAu5B,EAAAv5B,GAAArH,QACA4gC,EAAAv5B,GAAA05B,OAAAD,EAAA,GACAA,GAAA,IAOAp6B,KAAAoH,QAAA,SAAAzG,GACA,IAAA8tB,EAAAl7B,EAAAK,EAAA0mC,EAEA,GADA7L,EAAAyL,EAAAv5B,GACA8tB,EAOA,OAAAr4B,UAAAxC,OAEA,IADAA,EAAA66B,EAAA76B,OACAL,EAAA,EAAmBA,EAAAK,IAAYL,EAC/Bk7B,EAAAl7B,GAAAI,KAAAqM,KAAA5J,UAAA,QAEO,CAGP,IAFAkkC,KACA/mC,EAAA6C,UAAAxC,OACAL,EAAA,EAAmBA,EAAA6C,UAAAxC,SAAsBL,EACzC+mC,EAAAvlC,KAAAqB,UAAA7C,IAGA,IADAK,EAAA66B,EAAA76B,OACAL,EAAA,EAAmBA,EAAAK,IAAYL,EAC/Bk7B,EAAAl7B,GAAA8+B,MAAAryB,KAAAs6B,KAOAt6B,KAAAmM,QAAA,WACA+tB,QAcAD,EAAA5gC,UAAAilC,KAAA,SAAA/D,GASA,OARAv6B,KAAAiG,GAAA,gBAAA7M,GACAmhC,EAAAxlC,KAAAqE,KAGA4G,KAAAiG,GAAA,gBAAA4jC,GACAtP,EAAAnG,MAAAyV,KAGAtP,GAOAN,EAAA5gC,UAAAtE,KAAA,SAAAqE,GACA4G,KAAAoH,QAAA,OAAAhO,IAGA6gC,EAAA5gC,UAAA+6B,MAAA,SAAAyV,GACA7pC,KAAAoH,QAAA,OAAAyiC,IAGAj3C,EAAAC,QAAAonC,OAEIy2B,IAAA,SAAAh+D,EAAAE,EAAAC,IAIJ,SAAA89D,GAGA,IAAAC,EAAA,2EACAC,EAAA,oBACAC,EAAA,oBACAC,EAAA,qCAEAC,GAOA/qC,iBAAA,SAAAH,EAAAC,EAAAkrC,GAKA,GAJAA,QAEAnrC,IAAAs1B,OACAr1B,IAAAq1B,QACAr1B,EAAA,CAIA,IAAAkrC,EAAAC,gBACA,OAAAprC,EAEA,IAAAqrC,EAAAnxD,KAAAoxD,SAAAtrC,GACA,IAAAqrC,EACA,UAAA39D,MAAA,mCAGA,OADA29D,EAAAnK,KAAAgK,EAAAK,cAAAF,EAAAnK,MACAgK,EAAAM,kBAAAH,GAEA,IAAAI,EAAAvxD,KAAAoxD,SAAArrC,GACA,IAAAwrC,EACA,UAAA/9D,MAAA,uCAEA,GAAA+9D,EAAAC,OAGA,OAAAP,EAAAC,iBAGAK,EAAAvK,KAAAgK,EAAAK,cAAAE,EAAAvK,MACAgK,EAAAM,kBAAAC,IAHAxrC,EAKA,IAAA0rC,EAAAzxD,KAAAoxD,SAAAtrC,GACA,IAAA2rC,EACA,UAAAj+D,MAAA,mCAEA,IAAAi+D,EAAAC,QAAAD,EAAAzK,MAAA,MAAAyK,EAAAzK,KAAA,IAGA,IAAA2K,EAAAd,EAAA/+B,KAAA2/B,EAAAzK,MACAyK,EAAAC,OAAAC,EAAA,GACAF,EAAAzK,KAAA2K,EAAA,GAEAF,EAAAC,SAAAD,EAAAzK,OACAyK,EAAAzK,KAAA,KAEA,IAAA4K,GAGAJ,OAAAC,EAAAD,OACAE,OAAAH,EAAAG,OACA1K,KAAA,KACA6K,OAAAN,EAAAM,OACAC,MAAAP,EAAAO,MACAvT,SAAAgT,EAAAhT,UAEA,IAAAgT,EAAAG,SAIAE,EAAAF,OAAAD,EAAAC,OAGA,MAAAH,EAAAvK,KAAA,IACA,GAAAuK,EAAAvK,KAgBW,CAKX,IAAA+K,EAAAN,EAAAzK,KACAgL,EAAAD,EAAAn6D,UAAA,EAAAm6D,EAAAE,YAAA,QAAAV,EAAAvK,KACA4K,EAAA5K,KAAAgK,EAAAK,cAAAW,QApBAJ,EAAA5K,KAAAyK,EAAAzK,KAIAuK,EAAAM,SACAD,EAAAC,OAAAJ,EAAAI,OAIAN,EAAAO,QACAF,EAAAE,MAAAL,EAAAK,QAiBA,OAHA,OAAAF,EAAA5K,OACA4K,EAAA5K,KAAAiK,EAAAC,gBAAAF,EAAAK,cAAAE,EAAAvK,MAAAuK,EAAAvK,MAEAgK,EAAAM,kBAAAM,IAEAR,SAAA,SAAAvuD,GACA,IAAAqvD,EAAAtB,EAAA9+B,KAAAjvB,GACA,OAAAqvD,GAIAV,OAAAU,EAAA,OACAR,OAAAQ,EAAA,OACAlL,KAAAkL,EAAA,OACAL,OAAAK,EAAA,OACAJ,MAAAI,EAAA,OACA3T,SAAA2T,EAAA,QARA,MAWAb,cAAA,SAAArK,GAOAA,IAAA/vD,MAAA,IAAAykD,UAAAziD,KAAA,IAAAsH,QAAAuwD,EAAA,IASA,MAAA9J,EAAApzD,UAAAozD,IAAAzmD,QAAAwwD,EAAA,KAAAn9D,QACA,OAAAozD,EAAA/vD,MAAA,IAAAykD,UAAAziD,KAAA,KAEAq4D,kBAAA,SAAAY,GACA,OAAAA,EAAAV,OAAAU,EAAAR,OAAAQ,EAAAlL,KAAAkL,EAAAL,OAAAK,EAAAJ,MAAAI,EAAA3T,WAKA,kBAAA1rD,GAAA,kBAAAD,EACAA,EAAAC,QAAAm+D,EACA,oBAAAl+D,KAAAq/D,IACAr/D,KAAA,WAA2B,OAAAk+D,IAC3B,kBAAAn+D,EACAA,EAAA,cAAAm+D,EAEAL,EAAA,cAAAK,GA7JA,CA8JChxD,WAGGoyD,IAAA,SAAA1/D,EAAAE,EAAAC,IACJ,SAAA6I,GAIA,aAMA,SAAAtG,EAAAC,GAAsC,OAAAA,KAAAC,WAAAD,GAAuCE,QAAAF,GAJ7EvB,OAAAC,eAAAlB,EAAA,cACAmB,OAAA,IAKA,IAAAwB,EAAA9C,EAAA,iBAEA+C,EAAAL,EAAAI,GAEA+I,EAAA,qBAAAC,cAAA,gCAAA9C,IAAA,gBAEA+C,EAAArJ,EAAAmJ,GAUA8zD,EAAA,SAAAv8D,GACAhC,OAAA8H,iBAAA9F,EAAA6sC,OACAt2B,IACAnP,IAAA,WAEA,OADAuB,EAAA,WAAAwD,IAAAC,KAAA,0DACApM,EAAA9B,MAAAqE,MAGArE,OACAkJ,IAAA,WAEA,OADAuB,EAAA,WAAAwD,IAAAC,KAAA,8DACApM,EAAA9B,MAAAoF,OAGAsmD,aACAxiD,IAAA,WAEA,OADAuB,EAAA,WAAAwD,IAAAC,KAAA,oEACApM,EAAA9B,MAAAoF,UAMAk5D,EAAA,SAAA/7D,GACA,IAAAg8D,OAAA/9D,EAOA,OAJA+9D,EADApvC,MAAA5sB,IAAAkT,KAAA+lB,IAAAj5B,KAAAwC,IACAoiB,OAAAC,UAEA7kB,EAEAg8D,GAWAC,EAAA,SAAAC,EAAAC,EAAAC,GACA,IAAAxlC,EAAA13B,EAAA,WAAA23B,eAAA33B,EAAA,WAAAgB,OAEAi8D,GACAA,EAAAt6D,QAAA,SAAA2xC,GACA,IAAAp0C,EAAAo0C,EAAAQ,OAEAvqC,KAAA4yD,kBAAAj9D,GAAAiB,OAAA,IAAAu2B,EAAA4c,EAAAxpB,UAAAvgB,KAAA8qB,gBAAAif,EAAAvzC,QAAAwJ,KAAA8qB,gBAAAif,EAAAhM,QACK00B,GAGLE,GACA,WACA,IAAAE,EAAAP,EAAAG,EAAAxqC,aAAA1xB,UAEAo8D,EAAAv6D,QAAA,SAAA+xC,GACA,IAAA1pB,EAAA0pB,EAAAK,QAAAxqC,KAAA8qB,gBAEAqf,EAAAR,OAAAvxC,QAAA,SAAAuqC,GACA,IAAA7sC,EAAA,IAAAq3B,EAAA1M,IAAAkiB,EAAA3uC,OAAA2uC,EAAA9/B,KAAA8/B,EAAAvpC,MAAA,IAEAtD,EAAA6sC,QACA7sC,EAAA9B,MAAA2uC,EACA0vB,EAAAv8D,GAEAkK,KAAA8yD,eAAAl8D,OAAAd,IACSkK,OACFyyD,GAKPA,EAAAK,gBAAAL,EAAAK,eAAAj9D,MAAA48D,EAAAK,eAAAj9D,KAAAjC,QACA,WAMA,IALA,IAAAiC,EAAA48D,EAAAK,eAAAj9D,KACAk9D,KAIAx/D,EAAA,EAAyBA,EAAAsC,EAAAjC,OAAiBL,IAC1CsC,EAAAtC,IACAw/D,EAAAh+D,KAAAc,EAAAtC,IAKA,IAAAy/D,EAAAD,EAAA1/C,OAAA,SAAAhe,EAAAS,GACA,IAAAm9D,EAAA59D,EAAAS,EAAAyqB,eAKA,OAHA0yC,EAAAl+D,KAAAe,GACAT,EAAAS,EAAAyqB,WAAA0yC,EAEA59D,OAIA69D,EAAAp/D,OAAAqE,KAAA66D,GAAAp4C,KAAA,SAAAtnB,EAAA+qB,GACA,OAAAlD,OAAA7nB,GAAA6nB,OAAAkD,KAIA60C,EAAA96D,QAAA,SAAAmoB,EAAA+xB,GACA,IAAA6gB,EAAAH,EAAAzyC,GACA6yC,EAAAj4C,OAAA+3C,EAAA5gB,EAAA,KAAAugB,EAGAM,EAAA/6D,QAAA,SAAAtC,GACAA,EAAAU,QAAA48D,MAlCA,GArBA,IAgEAvgE,EAAA,YACA2/D,mBACAF,mBAEA1/D,EAAAC,UAAA,aACCc,KAAAqM,KAAA,qBAAAtE,IAAA,qBAAAd,UAAA,qBAAA4D,oBACEpH,gBAAA,KAAmBi8D,IAAA,SAAA3gE,EAAAE,EAAAC,GAYtB,aAEAiB,OAAAC,eAAAlB,EAAA,cACAmB,OAAA,IAEA,IAAAs/D,EAAA,SAAA3U,GACA,uBAAA34B,KAAA24B,IAWA4U,EAAA,SAAA5U,GACA,wBAAA34B,KAAA24B,IAYA6U,EAAA,SAAA7yD,GACA,IAAAhE,GAAgBgE,KAAA,GAAA8yD,eAChBA,EAAA9yD,EAAAy6C,OAAAnkD,MAAA,KAeA,OAZA0F,EAAAgE,KAAA8yD,EAAA/kC,QAAA0sB,OACAqY,EAAAr7D,QAAA,SAAAs7D,GACA,IAAAC,EAAAD,EAAAtY,OAAAnkD,MAAA,KAEA,GAAA08D,EAAA//D,OAAA,GACA,IAAAggE,EAAAD,EAAA,GAAApzD,QAAA,SAAA66C,OACApnD,EAAA2/D,EAAA,GAAApzD,QAAA,SAAA66C,OAEAz+C,EAAA82D,WAAAG,GAAA5/D,KAIA2I,GAWA8D,EAAA,SAAAI,GACA,OAAAA,EAAA3J,IAAA,SAAAynD,GACA,OAAAA,EAAAp+C,QAAA,+BAAAszD,EAAAC,EAAAC,GACA,IAAAC,GAAA,KAAA74C,OAAA24C,GAAAn8D,SAAA,KAAA2B,OAAA,GACA26D,GAAA,KAAA94C,OAAA44C,GAAAp8D,SAAA,KAAA2B,OAAA,GAEA,cAAA06D,EAAA,KAAAC,OAKAphE,EAAA,YACAygE,eACAE,mBACAD,eACA9yD,yBAEA7N,EAAAC,UAAA,gBACIqhE,IAAA,SAAAxhE,EAAAE,EAAAC,GAaJ,aAEAiB,OAAAC,eAAAlB,EAAA,cACAmB,OAAA,IAEA,IAAAmgE,EAAA,SAAAC,EAAAlwD,EAAA5N,GACA,IAAAwtB,EAAA5f,EAAAmwD,QAGA,GAAA/9D,EAAA2zC,UAAA3zC,EAAA2zC,SAAAr2C,OAKA,QAAA0b,KAJA8kD,EAAAxB,oBACAwB,EAAAxB,sBAGAt8D,EAAA4zC,eACA,IAAAkqB,EAAAxB,kBAAAtjD,GAAA,CACAwU,EAAAxgB,MAAA8D,SAA8BzG,KAAA,QAAA4H,KAAA,YAC9B,IAAA5S,EAAAmuB,EAAAwwC,aAAAC,aAAAjlD,GAMA8kD,EAAAxB,kBAAAtjD,GAJA3Z,GAQAmuB,EAAAlf,oBACAC,KAAA,WACAwH,GAAAiD,EACAxK,MAAAwK,IACW,GAAA3Z,MAMXW,EAAA6zC,UAAA7zC,EAAA6zC,SAAAv2C,SAAAwgE,EAAAtB,iBACAsB,EAAAtB,eAAAhvC,EAAAlf,oBACAC,KAAA,WACAC,MAAA,mBACK,GAAAnP,MACLy+D,EAAAtB,eAAAjvD,gCAAAvN,EAAA6zC,SAAAM,eAIA53C,EAAA,WAAAshE,EACAvhE,EAAAC,UAAA,gBACI2hE,IAAA,SAAA9hE,EAAAE,EAAAC,GAcJ,aAEAiB,OAAAC,eAAAlB,EAAA,cACAmB,OAAA,IAEA,IAAAygE,GAEAC,oBAAA,EACAC,gBAAA,OAGA9hE,EAAA,WAAA4hE,EACA7hE,EAAAC,UAAA,gBACI+hE,IAAA,SAAAliE,EAAAE,EAAAC,IACJ,SAAA6I,GAIA,aAEA5H,OAAAC,eAAAlB,EAAA,cACAmB,OAAA,IAGA,IAAA2H,EAAA,WAAiC,SAAAC,EAAAC,EAAAC,GAA2C,QAAAvI,EAAA,EAAgBA,EAAAuI,EAAAlI,OAAkBL,IAAA,CAAO,IAAAwI,EAAAD,EAAAvI,GAA2BwI,EAAAC,WAAAD,EAAAC,aAAA,EAAwDD,EAAAE,cAAA,EAAgC,UAAAF,MAAAG,UAAA,GAAuDpI,OAAAC,eAAA8H,EAAAE,EAAA1D,IAAA0D,IAA+D,gBAAAI,EAAAC,EAAAC,GAA2L,OAAlID,GAAAR,EAAAO,EAAA9C,UAAA+C,GAAqEC,GAAAT,EAAAO,EAAAE,GAA6DF,GAAzhB,GAEAG,EAAA,SAAAC,EAAAC,EAAAC,GAAuC,IAAAC,GAAA,EAAmB,MAAAA,EAAA,CAA4B,IAAAC,EAAAJ,EAAAK,EAAAJ,EAAAK,EAAAJ,EAAiDC,GAAA,EAAgB,OAAAC,MAAAG,SAAAzD,WAAkD,IAAA0D,EAAAjJ,OAAAkJ,yBAAAL,EAAAC,GAA8D,QAAApI,IAAAuI,EAAA,CAAuO,aAAAA,EAA4B,OAAAA,EAAA/I,MAA4B,IAAAiJ,EAAAF,EAAAG,IAAuB,QAAA1I,IAAAyI,EAA4B,OAAoB,OAAAA,EAAAtJ,KAAAkJ,GAA5U,IAAAM,EAAArJ,OAAAsJ,eAAAT,GAA4C,UAAAQ,EAAuB,OAA2BZ,EAAAY,EAAaX,EAAAI,EAAgBH,EAAAI,EAAgBH,GAAA,EAAeK,EAAAI,OAAA3I,IAE3b,SAAAY,EAAAC,GAAsC,OAAAA,KAAAC,WAAAD,GAAuCE,QAAAF,GAE7E,SAAAgI,EAAAC,EAAAnB,GAAiD,KAAAmB,aAAAnB,GAA0C,UAAAhH,UAAA,qCAE3F,SAAAoI,EAAAC,EAAAC,GAA0C,uBAAAA,GAAA,OAAAA,EAA+D,UAAAtI,UAAA,kEAAAsI,GAAuGD,EAAAnE,UAAAvF,OAAA4J,OAAAD,KAAApE,WAAyEsE,aAAe3J,MAAAwJ,EAAAxB,YAAA,EAAAE,UAAA,EAAAD,cAAA,KAA6EwB,IAAA3J,OAAA8J,eAAA9J,OAAA8J,eAAAJ,EAAAC,GAAAD,EAAAK,UAAAJ,GAErX,IAAAo3D,EAAAniE,EAAA,mBAEAoiE,EAAA1/D,EAAAy/D,GAEAt2D,EAAA,qBAAAC,cAAA,gCAAA9C,IAAA,gBAEA+C,EAAArJ,EAAAmJ,GAEAw2D,EAAAriE,EAAA,yBAEAsiE,EAAA5/D,EAAA2/D,GAEAE,EAAAviE,EAAA,qBAEAwiE,EAAA9/D,EAAA6/D,GAEAE,EAAAziE,EAAA,iBAWA0iE,EAAA,SAAA1yD,GAGA,SAAA0yD,IACA,IAAAxyD,EAAA5C,KAEA3C,EAAA2C,KAAAo1D,GAEA94D,EAAAxI,OAAAsJ,eAAAg4D,EAAA/7D,WAAA,cAAA2G,MAAArM,KAAAqM,MACAA,KAAAq1D,iBACAr1D,KAAAoK,WAAA,SAEApK,KAAAiG,IAAA,0CAAAnL,GAEA8H,EAAA0yD,OAAAR,EAAA,WAAAS,eAAAz6D,EAAA06D,OACA5yD,EAAAyxD,SAAA,EAAA51D,EAAA,YAAAmE,EAAA0yD,OAAAG,YACA7yD,EAAAU,MAAAV,EAAA0yD,OAAAtyD,KACAJ,EAAAwH,WAAA,OAEAxH,EAAAU,MAAA2C,GAAA,qBACA,IAAA1S,EAAAqP,EAAAyyD,cAAAzhE,OAEA,MAAAL,IACAqP,EAAAyyD,cAAA9hE,GAAA2U,UAKAtF,EAAA0yD,QACA1yD,EAAA0yD,OAAAI,aA4EA,OAxGAn4D,EAAA63D,EAAA1yD,GAgDA/G,EAAAy5D,IACA/8D,IAAA,oBACArE,MAAA,eAYAqE,IAAA,kBACArE,MAAA,SAAA2M,GACA,IAAAg1D,GAAA,EAAAR,EAAA3B,kBAAA7yD,GACAyzD,OAAA5/D,EAGA,kBAAAmhE,EAAAh1D,MAAA,eAAAg1D,EAAAh1D,KAIA,UAAAnN,MAAA,gCAIA,OANA4gE,EAAA,IAAAY,EAAA,WAAAh1D,MAKAA,KAAAq1D,cAAAtgE,KAAAq/D,GACAA,KAYA/7D,IAAA,cACArE,MAAA,SAAAiU,GACA,YAAAA,EAEAjI,KAAAsD,MAAA2E,MAAA,GACO,WAAAA,GAEPjI,KAAAsD,MAAA2E,MAAA,GAEA,UAAAjI,KAAAoK,aACApK,KAAAoK,WAAA,QACApK,KAAAs1D,OAAAM,uBAKAR,EAzGA,CA0GC32D,EAAA,WAAAyO,aAEDra,EAAA,WAAAuiE,EACA,IACAthE,OAAAC,eAAAqhE,EAAA/7D,UAAA,YAOA6D,IAAA,WACA,OAAA8C,KAAAs1D,OAIAt1D,KAAAs1D,OAAAO,gBAAA,YAHA90C,KAYA2I,IAAA,SAAA11B,GACA,IAAAT,OAAAiB,EACAqX,EAAA7L,KAAAs1D,OAAAO,gBAAA,YAIA,GAFA71D,KAAAs1D,OAAAQ,gBAAA,WAAA9hE,GAEAA,EAAA6X,EAGA,IAAAtY,EAAA,EAAmBA,EAAAyM,KAAAq1D,cAAAzhE,OAA+BL,IAClDyM,KAAAq1D,cAAA9hE,GAAAg3B,OAAAv2B,EAAA6X,GAIA,OAAA7X,KAGC,MAAAjB,GAIDqiE,EAAA/7D,UAAA9C,SAAAwqB,IAGA,QAAAnkB,KAAAs4D,EAAA,WACAE,EAAAx4D,GAAAs4D,EAAA,WAAAt4D,GAEAhK,EAAAC,UAAA,aACCc,KAAAqM,KAAA,qBAAAtE,IAAA,qBAAAd,UAAA,qBAAA4D,oBACEu3D,gBAAA,GAAAC,oBAAA,GAAAC,wBAAA,GAAAC,kBAAA,KAA0FC,IAAA,SAAAzjE,EAAAE,EAAAC,IAC7F,SAAA6I,GAIA,aAEA5H,OAAAC,eAAAlB,EAAA,cACAmB,OAAA,IAGA,IAAA2H,EAAA,WAAiC,SAAAC,EAAAC,EAAAC,GAA2C,QAAAvI,EAAA,EAAgBA,EAAAuI,EAAAlI,OAAkBL,IAAA,CAAO,IAAAwI,EAAAD,EAAAvI,GAA2BwI,EAAAC,WAAAD,EAAAC,aAAA,EAAwDD,EAAAE,cAAA,EAAgC,UAAAF,MAAAG,UAAA,GAAuDpI,OAAAC,eAAA8H,EAAAE,EAAA1D,IAAA0D,IAA+D,gBAAAI,EAAAC,EAAAC,GAA2L,OAAlID,GAAAR,EAAAO,EAAA9C,UAAA+C,GAAqEC,GAAAT,EAAAO,EAAAE,GAA6DF,GAAzhB,GAEAG,EAAA,SAAAC,EAAAC,EAAAC,GAAuC,IAAAC,GAAA,EAAmB,MAAAA,EAAA,CAA4B,IAAAC,EAAAJ,EAAAK,EAAAJ,EAAAK,EAAAJ,EAAiDC,GAAA,EAAgB,OAAAC,MAAAG,SAAAzD,WAAkD,IAAA0D,EAAAjJ,OAAAkJ,yBAAAL,EAAAC,GAA8D,QAAApI,IAAAuI,EAAA,CAAuO,aAAAA,EAA4B,OAAAA,EAAA/I,MAA4B,IAAAiJ,EAAAF,EAAAG,IAAuB,QAAA1I,IAAAyI,EAA4B,OAAoB,OAAAA,EAAAtJ,KAAAkJ,GAA5U,IAAAM,EAAArJ,OAAAsJ,eAAAT,GAA4C,UAAAQ,EAAuB,OAA2BZ,EAAAY,EAAaX,EAAAI,EAAgBH,EAAAI,EAAgBH,GAAA,EAAeK,EAAAI,OAAA3I,IAE3b,SAAAY,EAAAC,GAAsC,OAAAA,KAAAC,WAAAD,GAAuCE,QAAAF,GAE7E,SAAAgI,EAAAC,EAAAnB,GAAiD,KAAAmB,aAAAnB,GAA0C,UAAAhH,UAAA,qCAE3F,SAAAoI,EAAAC,EAAAC,GAA0C,uBAAAA,GAAA,OAAAA,EAA+D,UAAAtI,UAAA,kEAAAsI,GAAuGD,EAAAnE,UAAAvF,OAAA4J,OAAAD,KAAApE,WAAyEsE,aAAe3J,MAAAwJ,EAAAxB,YAAA,EAAAE,UAAA,EAAAD,cAAA,KAA6EwB,IAAA3J,OAAA8J,eAAA9J,OAAA8J,eAAAJ,EAAAC,GAAAD,EAAAK,UAAAJ,GAErX,IAAAjI,EAAA9C,EAAA,iBAEA+C,EAAAL,EAAAI,GAEA+I,EAAA,qBAAAC,cAAA,gCAAA9C,IAAA,gBAEA+C,EAAArJ,EAAAmJ,GAEA63D,EAAA1jE,EAAA,kBAEA2jE,EAAAjhE,EAAAghE,GAEAE,EAAA5jE,EAAA,4BAEA6jE,EAAAnhE,EAAAkhE,GAEAE,EAAA9jE,EAAA,qCAEA+jE,EAAArhE,EAAAohE,GAEAE,EAAAhkE,EAAA,yBAEAikE,EAAAjkE,EAAA,6BAEAkkE,EAAAxhE,EAAAuhE,GAEA53D,EAAArM,EAAA,cAEAsM,EAAA5J,EAAA2J,GAEAk2D,EAAAviE,EAAA,qBAEAwiE,EAAA9/D,EAAA6/D,GAEA4B,EAAA,WACA,IAAAr9D,OAAAhF,EAEA,IACAgF,EAAA9G,EAAA0N,QAAA,6BACG,MAAArN,IAIH,OAAAyG,GAUAs9D,EAAA,SAAAC,GAGAthE,EAAA,WAAAsgB,WAAAghD,EAAA7B,EAAA,WAAAR,sBAUAsC,EAAA,WACA,OAAAvtD,KAAA+hB,SAAA7zB,SAAA,IAAA2B,MAAA,MAYA29D,EAAA,SAAAp3C,EAAAq3C,IACA,kBAAAA,KAAA,KACAA,EAAA,GAGA,IAAAj3C,EAAAxW,KAAAyW,IAAA,GAAAg3C,GAEA,OAAAztD,KAAAslC,MAAAlvB,EAAAI,MAYAk3C,EAAA,SAAAz0D,GAGA,SAAAy0D,EAAAjzD,GACA,IAAAtB,EAAA5C,KAEA3C,EAAA2C,KAAAm3D,GAEA76D,EAAAxI,OAAAsJ,eAAA+5D,EAAA99D,WAAA,cAAA2G,MAAArM,KAAAqM,MACA,IAAAo3D,OAAA5iE,EAIAwL,KAAAq3D,WAAAnC,EAAA,WAAAP,gBAGA30D,KAAAs3D,WAGAt3D,KAAAu3D,YAAA,EAKAv3D,KAAAw3D,eAAAz2C,IAEA/gB,KAAAioB,aAAA/jB,EAEAlE,KAAAy3D,gBAAA12C,IACA/gB,KAAA03D,gBAAA32C,IAKA/gB,KAAA0qB,UAAA,EACA1qB,KAAAquB,iBAAA,EAEA+oC,EAAA3hE,EAAA,WAAAkiE,KAAA7/D,OAAAC,aAAAs6B,MAAA,KAAAp9B,MAAAoE,UAAAC,MAAA3F,KAAA0iE,EAAA,WAAA1rB,kBASA,IAAAitB,EAAA53D,KAAAioB,aAAAosC,QAAAhoD,KAAA9L,QAAA,qBAEAP,KAAA63D,wBAAA,0BAAAD,EAAAZ,IACAh3D,KAAA83D,sBAAA,wBAAAF,EAAAZ,IAEAvhE,EAAA,WAAAuK,KAAA63D,yBAAA,WAEA,cADApiE,EAAA,WAAAmN,EAAAi1D,yBACAT,GAGAp3D,KAAAioB,aAAAqtC,OAAAyC,qBAAA/3D,KAAA63D,yBAEA73D,KAAAg4D,aAAA,EAAAh5D,EAAA,YAAA43D,EAAA,WAAAC,KACA72D,KAAAg4D,YAAA58D,aAAkC68D,OAAA,OAAAt1D,aAClC3C,KAAAg4D,YAAAn9D,UAAA,SAAAC,GACA,SAAAA,EAAA1B,KAAA6+D,QACAr1D,EAAAs1D,eAAAp9D,EAAA1B,KAAA9C,UAIA0J,KAAAgI,IAAA,uBACApF,EAAAqlB,aAAA3kB,MAAA8D,QAAA,oBAGAtT,OAAAC,eAAAiM,KAAA,mBACA9C,IAAA,WACA,OAAA8C,KAAAquB,kBAEA3E,IAAA,SAAAujB,GACA,kBAAAA,MAAA,IACAjtC,KAAAquB,iBAAA4e,EAEAjtC,KAAAioB,aAAAqtC,OAAA6C,oBAGAn4D,KAAAw3D,eAAAz2C,IACA/gB,KAAAy3D,gBAAA12C,IACA/gB,KAAA03D,gBAAA32C,IAEA/gB,KAAAg4D,YAAA58D,aAAwC68D,OAAA,cAKxCnkE,OAAAC,eAAAiM,KAAA,YACA9C,IAAA,WACA,IAAA8C,KAAAioB,eAAAjoB,KAAAioB,aAAAqtC,UAAA,oBAAAt1D,KAAAioB,aAAAqtC,QACA,OAAA72D,EAAA,WAAAkhB,kBAGA,IAAAzW,EAAAlJ,KAAAioB,aAAAqtC,OAAAO,gBAAA,YAMA,OAJA3sD,KAAAtV,SACAsV,EAAA,MAAA+tD,EAAA/tD,EAAA,SACAA,EAAA,MAAA+tD,EAAA/tD,EAAA,UAEAzK,EAAA,WAAA+F,iBAAA0E,MAMAlJ,KAAAioB,aAAAosC,QAAApuD,GAAA,oBAEA,IADA,EAAAswD,EAAA,cAAAx9D,IAAA6J,EAAAkwD,gBACAlwD,EAAAgwD,kBACA,QAAAj9D,KAAAiN,EAAAgwD,mBACA,EAAA2D,EAAA,cAAAx9D,IAAA6J,EAAAgwD,kBAAAj9D,MAKA,IAAAyiE,EAAAp4D,KAAAq4D,YAAA/zD,KAAAtE,MAIAA,KAAAioB,aAAAosC,QAAA/wD,MAAA2C,GAAA,YAAAmyD,GAEAp4D,KAAAioB,aAAAosC,QAAA/wD,MAAAE,IAAAyC,GAAA,qBACArD,EAAAo1D,YAAA9rD,YACAtJ,EAAAqlB,aAAAosC,QAAA/wD,MAAAsS,IAAA,YAAAwiD,KAgYA,OA5fA76D,EAAA45D,EAAAz0D,GAwIA/G,EAAAw7D,IACA9+D,IAAA,eACArE,MAAA,SAAAwE,GACA,IAAAyP,OAAAzT,EAEA,GAAAwL,KAAA0qB,SAIA,MAHAziB,EAAA,IAAAzU,MAAA,yEACAyU,EAAAM,KAAA,oBACAN,EAAAxU,KAAA,GACAwU,EAEAjI,KAAA0qB,UAAA,EACA1qB,KAAAioB,aAAA7d,WAAA,OACApK,KAAAoH,SAAoBzG,KAAA,WAEpBX,KAAAg4D,YAAA58D,aACA68D,OAAA,OACA7+D,KAAAZ,EAAAC,OACAC,WAAAF,EAAAE,WACAC,WAAAH,EAAAG,aACOH,EAAAC,SACPuH,KAAAg4D,YAAA58D,aAAoC68D,OAAA,aASpC5/D,IAAA,QACArE,MAAA,WACAgM,KAAAs3D,WACAt3D,KAAAu3D,YAAA,EACAv3D,KAAAioB,aAAAqtC,OAAAgD,YAGAt4D,KAAA0qB,WACA1qB,KAAA0qB,UAAA,EACA1qB,KAAAoH,SAAsBzG,KAAA,kBActBtI,IAAA,SACArE,MAAA,SAAAwD,EAAAC,GAEA,IADA,EAAA8+D,EAAA,YAAA/+D,EAAAC,EAAAuI,KAAA8yD,gBACA9yD,KAAA4yD,kBACA,QAAAj9D,KAAAqK,KAAA4yD,mBACA,EAAA2D,EAAA,YAAA/+D,EAAAC,EAAAuI,KAAA4yD,kBAAAj9D,IAGAqK,KAAAoH,SAAoBzG,KAAA,WACpBX,KAAAoH,SAAoBzG,KAAA,iBAUpBtI,IAAA,iBACArE,MAAA,SAAAsC,GACA,IAAA0P,EAAAhG,MAGA,EAAAy2D,EAAA,YAAAz2D,UAAAioB,aAAA3xB,IACA,EAAAogE,EAAAlE,kBAAAxyD,KAAA1J,EAAA2zC,SAAA3zC,EAAA6zC,UAGA2sB,EAAA,WACA,IAAAyB,EAAAvyD,EAAAwyD,mBAAAliE,GAEA,IAAA0P,EAAAsxD,QAAA1jE,QACAkjE,EAAA9wD,EAAAyyD,eAAAn0D,KAAA0B,IAGAuyD,IACAvyD,EAAAsxD,QAAAviE,KAAAwjE,GACAvyD,EAAAuxD,aAAAgB,EAAA5/D,iBAWAN,IAAA,iBACArE,MAAA,WACA,IAAA+U,EAAA/I,KAEA04D,EAAAxD,EAAA,WAAAP,gBAEA,GAAA30D,KAAAs3D,QAAA1jE,OAAA,CAUA,IAAA4sC,EAAAxgC,KAAAs3D,QAAA,GAAA99B,SAAA,EAAAk/B,GAGAl4B,EAAA7nC,WAAA+/D,GAAA14D,KAAAs3D,QAAA,GAAA3+D,aAAA+/D,EACA14D,KAAAs3D,QAAA5oC,QAEA1uB,KAAAs3D,QAAA,GAAAt3D,KAAAs3D,QAAA,GAAA99B,SAAAk/B,GAGA14D,KAAAu3D,aAAA/2B,EAAA7nC,WAMA,IAHA,IAAAggE,KACA/kE,EAAA4sC,EAAA7nC,WAEApF,EAAA,EAAqBA,EAAAK,EAAYL,IACjColE,EAAA5jE,KAAA+C,OAAAC,aAAAyoC,EAAAjtC,KAEA,IAAAqlE,EAAAnjE,EAAA,WAAAkiE,KAAAgB,EAAA1/D,KAAA,KAEAxD,EAAA,WAAAuK,KAAA83D,uBAAA,WAKA,OAFAhB,EAAA/tD,EAAA0vD,eAAAn0D,KAAAyE,WACAtT,EAAA,WAAAsT,EAAA+uD,uBACAc,GAIA54D,KAAAioB,aAAAqtC,OAAAyC,qBAAA/3D,KAAA83D,4BAtCA,IAAA93D,KAAA0qB,WACA1qB,KAAA0qB,UAAA,EACA1qB,KAAAoH,SAAwBzG,KAAA,kBAiDxBtI,IAAA,qBACArE,MAAA,SAAAmgC,GACA,IAAA0kC,EAAA,EACA71D,EAAAhD,KAAAioB,aAAA3kB,MACAw1D,EAAA,EACAxiE,OAAA9B,EACA00C,EAAA/U,EAAAyV,KAAAV,UACAC,EAAAhV,EAAAyV,KAAAT,UAIA,GAAAhmB,MAAAnjB,KAAAw3D,kBAAAtuB,EAAAt1C,QAAAu1C,EAAAv1C,QAAA,CAIA,IAAAmlE,EAAA7vB,EAAA,KAA6CnH,IAAAhpC,KAC7CigE,EAAA7vB,EAAA,KAA6CpH,IAAAhpC,KAE7CiH,KAAAw3D,eAAA/tD,KAAAwD,IAAA+rD,EAAAj3B,IAAAg3B,EAAAh3B,KAGA/+B,EAAAmC,YAGAnF,KAAA03D,gBAAA32C,IACA/gB,KAAAy3D,gBAAA12C,KAGAoC,MAAAnjB,KAAA03D,kBACA10D,EAAAkG,WAAAtV,SACAklE,EAAA91D,EAAAkG,WAAAzR,IAAA,GAAAuI,KAAA8qB,iBAIA9nB,EAAAmC,YACA2zD,EAAArvD,KAAAC,IAAAovD,EAAA91D,EAAAiC,cAAAjF,KAAA8qB,kBAIAguC,GAAA,IACAA,GAAA94D,KAAAw3D,gBAOAsB,EAAA94D,KAAA03D,gBAAA,GAIA,IAAAuB,EAAA/vB,EAAAt1C,OAIA,GAAAqlE,GAAA/vB,EAAA+vB,EAAA,GAAAl3B,KAAA+2B,EAAA,CAGA,QAAAG,EAAA,CACA,IAAAC,EAAAhwB,EAAA+vB,GAEA,KAAAC,EAAAn3B,IAAA+2B,KAMAI,EAAAltB,UAAAktB,EAAA/qB,aACA,MASA,MAAA8qB,EAAA,CACA,IAAAE,EAAAjwB,EAAA+vB,EAAA,GAEA,IAAAE,EAAAhrB,YACA,MAGA8qB,KAIA,IAAAG,EAAAlwB,EAAA5vC,MAAA2/D,GAEAI,OAAA7kE,EAGA6kE,EADAl2C,MAAAnjB,KAAAy3D,iBACAqB,EAOA94D,KAAAy3D,gBAAA,GAGA2B,EAAAxlE,SAIAylE,EAAA5vD,KAAAwD,IAAAosD,EAAAD,EAAA,GAAAr3B,MAIAk3B,EAAA,EAEA,MAAAA,EAAA9vB,EAAAv1C,OAAA,CACA,GAAAu1C,EAAA8vB,GAAAl3B,KAAAs3B,EACA,MAGAJ,IAGA,IAAAK,EAAAnwB,EAAA7vC,MAAA2/D,GAGAK,EAAA1lE,SACAoM,KAAAy3D,gBAAA6B,IAAA1lE,OAAA,GAAAmuC,KAEAq3B,EAAAxlE,SACAoM,KAAA03D,gBAAA0B,IAAAxlE,OAAA,GAAAmuC,KAGA,IAAA6H,EAAA5pC,KAAAu5D,gBAAAH,EAAAE,GAEA,OAAA1vB,EAAAh2C,OAAA,CAOA,GAAAg2C,EAAA,GAAA7H,IAAA+2B,GAAA91D,EAAAmC,UAAA,CACA,IAAAq0D,EAAA,KACAv0D,EAAAjC,EAAAiC,cACAovB,GAAAykC,EAAAlvB,EAAA,GAAA7H,KAAA,IACA03B,EAAAx0D,EAAAovB,EAEAolC,EAAAD,IACAC,EAAA,GAGA,IACAz5D,KAAAioB,aAAAqtC,OAAAoE,sBAAAD,GACS,MAAA1mE,KAST,QAAAQ,EAAA,EAAqBA,EAAAq2C,EAAAh2C,OAAiBL,IACtCslE,GAAAjvB,EAAAr2C,GAAAiF,MAAAG,WAEArC,EAAA,IAAA0E,WAAA69D,GACAtlE,EAAA,UAAAoG,EAAA,EAA4BpG,EAAAq2C,EAAAh2C,OAAiBL,IAC7C+C,EAAAozB,IAAAkgB,EAAAr2C,GAAAiF,MAAAmB,GACAA,GAAAiwC,EAAAr2C,GAAAiF,MAAAG,WAGA,OAAArC,MAWA+B,IAAA,kBACArE,MAAA,SAAAk1C,EAAAC,GACA,IAAAtvC,OAAArF,EACAo1C,KAEA,MAAAV,EAAAt1C,QAAAu1C,EAAAv1C,OASAiG,EARAqvC,EAAAt1C,OAGSu1C,EAAAv1C,QAGAu1C,EAAA,GAAA9X,IAAA6X,EAAA,GAAA7X,IAET8X,EAAAza,QAHAwa,EAAAxa,QAHAya,EAAAza,QAYAkb,EAAA70C,KAAA8E,GAGA,OAAA+vC,KAGAvxC,IAAA,cACArE,MAAA,WACAgM,KAAAg4D,YAAA58D,aAAoC68D,OAAA,sBAIpCd,EA7fA,CA8fC14D,EAAA,WAAAyO,aAEDra,EAAA,WAAAskE,EACAvkE,EAAAC,UAAA,aACCc,KAAAqM,KAAA,qBAAAtE,IAAA,qBAAAd,UAAA,qBAAA4D,oBACEm7D,wBAAA,GAAAC,oCAAA,GAAA5D,oBAAA,GAAA6D,4BAAA,GAAAC,2BAAA,GAAA1iE,gBAAA,GAAA2iE,iBAAA,GAAAhsD,WAAA,KAA6MisD,IAAA,SAAAtnE,EAAAE,EAAAC,GAIhN,aAEAiB,OAAAC,eAAAlB,EAAA,cACAmB,OAAA,IAGA,IAAA2H,EAAA,WAAiC,SAAAC,EAAAC,EAAAC,GAA2C,QAAAvI,EAAA,EAAgBA,EAAAuI,EAAAlI,OAAkBL,IAAA,CAAO,IAAAwI,EAAAD,EAAAvI,GAA2BwI,EAAAC,WAAAD,EAAAC,aAAA,EAAwDD,EAAAE,cAAA,EAAgC,UAAAF,MAAAG,UAAA,GAAuDpI,OAAAC,eAAA8H,EAAAE,EAAA1D,IAAA0D,IAA+D,gBAAAI,EAAAC,EAAAC,GAA2L,OAAlID,GAAAR,EAAAO,EAAA9C,UAAA+C,GAAqEC,GAAAT,EAAAO,EAAAE,GAA6DF,GAAzhB,GAEA,SAAA/G,EAAAC,GAAsC,OAAAA,KAAAC,WAAAD,GAAuCE,QAAAF,GAE7E,SAAAgI,EAAAC,EAAAnB,GAAiD,KAAAmB,aAAAnB,GAA0C,UAAAhH,UAAA,qCAE3F,IAAAK,EAAA9C,EAAA,iBAEA+C,EAAAL,EAAAI,GAEA4gE,EAAA1jE,EAAA,kBAEA2jE,EAAAjhE,EAAAghE,GASA6D,EAAA,SAAAC,GACAA,EAAAj0D,GAAA,gBAAA3P,GACAb,EAAA,WAAA2F,aACA68D,OAAA,OACA3hE,cAIA4jE,EAAAj0D,GAAA,gBAAA7M,GACA3D,EAAA,WAAA2F,aAA2C68D,OAAA,YAY3CkC,EAAA,WACA,SAAAA,EAAAx3D,GACAtF,EAAA2C,KAAAm6D,GAEAn6D,KAAA2C,cACA3C,KAAA8gC,OAkEA,OAnDAnlC,EAAAw+D,IACA9hE,IAAA,OACArE,MAAA,WACAgM,KAAAk6D,YACAl6D,KAAAk6D,WAAA/tD,UAEAnM,KAAAk6D,WAAA,IAAA7D,EAAA,WAAAzoB,WAAA5tC,KAAA2C,SACAs3D,EAAAj6D,KAAAk6D,eAUA7hE,IAAA,OACArE,MAAA,SAAAoF,GAEA,IAAA9C,EAAA,IAAA0E,WAAA5B,SAAAV,WAAAU,EAAAT,YAEAqH,KAAAk6D,WAAAnlE,KAAAuB,MAQA+B,IAAA,QACArE,MAAA,WACAgM,KAAA8gC,UAQAzoC,IAAA,QACArE,MAAA,WACAgM,KAAAk6D,WAAA9lC,WAGA/7B,IAAA,gBACArE,MAAA,WACAgM,KAAAk6D,WAAArpB,oBAIAspB,EAvEA,GA0EAC,EAAA,SAAAx/D,GACAA,EAAAC,UAAA,SAAAC,GACA,SAAAA,EAAA1B,KAAA6+D,QAAAn9D,EAAA1B,KAAAuJ,QACA3C,KAAAq6D,gBAAA,IAAAF,EAAAr/D,EAAA1B,KAAAuJ,UAIA3C,KAAAq6D,kBACAr6D,KAAAq6D,gBAAA,IAAAF,GAGAr/D,EAAA1B,MAAA0B,EAAA1B,KAAA6+D,QAAA,SAAAn9D,EAAA1B,KAAA6+D,QACAj4D,KAAAq6D,gBAAAv/D,EAAA1B,KAAA6+D,SACAj4D,KAAAq6D,gBAAAv/D,EAAA1B,KAAA6+D,QAAAn9D,EAAA1B,SAMAvG,EAAA,oBAAA+H,GACA,WAAAw/D,EAAAx/D,IAGAhI,EAAAC,UAAA,aACGuE,gBAAA,GAAA2iE,iBAAA,KAAuCO,IAAA,SAAA5nE,EAAAE,EAAAC,IAC1C,SAAA6I,GAIA,aAEA5H,OAAAC,eAAAlB,EAAA,cACAmB,OAAA,IAGA,IAAA2H,EAAA,WAAiC,SAAAC,EAAAC,EAAAC,GAA2C,QAAAvI,EAAA,EAAgBA,EAAAuI,EAAAlI,OAAkBL,IAAA,CAAO,IAAAwI,EAAAD,EAAAvI,GAA2BwI,EAAAC,WAAAD,EAAAC,aAAA,EAAwDD,EAAAE,cAAA,EAAgC,UAAAF,MAAAG,UAAA,GAAuDpI,OAAAC,eAAA8H,EAAAE,EAAA1D,IAAA0D,IAA+D,gBAAAI,EAAAC,EAAAC,GAA2L,OAAlID,GAAAR,EAAAO,EAAA9C,UAAA+C,GAAqEC,GAAAT,EAAAO,EAAAE,GAA6DF,GAAzhB,GAEAG,EAAA,SAAAC,EAAAC,EAAAC,GAAuC,IAAAC,GAAA,EAAmB,MAAAA,EAAA,CAA4B,IAAAC,EAAAJ,EAAAK,EAAAJ,EAAAK,EAAAJ,EAAiDC,GAAA,EAAgB,OAAAC,MAAAG,SAAAzD,WAAkD,IAAA0D,EAAAjJ,OAAAkJ,yBAAAL,EAAAC,GAA8D,QAAApI,IAAAuI,EAAA,CAAuO,aAAAA,EAA4B,OAAAA,EAAA/I,MAA4B,IAAAiJ,EAAAF,EAAAG,IAAuB,QAAA1I,IAAAyI,EAA4B,OAAoB,OAAAA,EAAAtJ,KAAAkJ,GAA5U,IAAAM,EAAArJ,OAAAsJ,eAAAT,GAA4C,UAAAQ,EAAuB,OAA2BZ,EAAAY,EAAaX,EAAAI,EAAgBH,EAAAI,EAAgBH,GAAA,EAAeK,EAAAI,OAAA3I,IAE3b,SAAAY,EAAAC,GAAsC,OAAAA,KAAAC,WAAAD,GAAuCE,QAAAF,GAE7E,SAAAgI,EAAAC,EAAAnB,GAAiD,KAAAmB,aAAAnB,GAA0C,UAAAhH,UAAA,qCAE3F,SAAAoI,EAAAC,EAAAC,GAA0C,uBAAAA,GAAA,OAAAA,EAA+D,UAAAtI,UAAA,kEAAAsI,GAAuGD,EAAAnE,UAAAvF,OAAA4J,OAAAD,KAAApE,WAAyEsE,aAAe3J,MAAAwJ,EAAAxB,YAAA,EAAAE,UAAA,EAAAD,cAAA,KAA6EwB,IAAA3J,OAAA8J,eAAA9J,OAAA8J,eAAAJ,EAAAC,GAAAD,EAAAK,UAAAJ,GAErX,IAAAjI,EAAA9C,EAAA,iBAEA+C,EAAAL,EAAAI,GAEAq/D,EAAAniE,EAAA,mBAEAoiE,EAAA1/D,EAAAy/D,GAEAt2D,EAAA,qBAAAC,cAAA,gCAAA9C,IAAA,gBAEA+C,EAAArJ,EAAAmJ,GAEAg8D,EAAA7nE,EAAA,2BAEA8nE,EAAAplE,EAAAmlE,GAEA7D,EAAAhkE,EAAA,yBAEAyiE,EAAAziE,EAAA,iBAWA+nE,EAAA,SAAA/3D,GAGA,SAAA+3D,IACA,IAAA73D,EAAA5C,KAEA3C,EAAA2C,KAAAy6D,GAEAn+D,EAAAxI,OAAAsJ,eAAAq9D,EAAAphE,WAAA,cAAA2G,MAAArM,KAAAqM,MACA,IAAApD,OAAApI,EAIA,IAAAoI,KAFAoD,KAAA06D,mBAAA,IAAAjlE,EAAA,WAAA0O,YAEAnE,KAAA06D,mBACA99D,KAAA69D,EAAAphE,WAAA,oBAAA2G,KAAA06D,mBAAA99D,KACAoD,KAAApD,GAAAoD,KAAA06D,mBAAA99D,GAAA0H,KAAAtE,KAAA06D,qBAOA16D,KAAAgoB,UAAAjH,IACAjtB,OAAAC,eAAAiM,KAAA,YACA9C,IAAA,WACA,OAAA8C,KAAAgoB,YAAAjvB,IACAiH,KAAAgoB,UAEAhoB,KAAA06D,mBAAAnkE,UAEAmzB,IAAA,SAAAnzB,GACAyJ,KAAAgoB,UAAAzxB,EACAA,IAAAwC,MACAiH,KAAA06D,mBAAAnkE,eAKAzC,OAAAC,eAAAiM,KAAA,YACA9C,IAAA,WACA,OAAA8C,KAAAgoB,YAAAjvB,IACA0F,EAAA,WAAA+F,mBAAA,EAAAxE,KAAA06D,mBAAAnkE,YAEAyJ,KAAA06D,mBAAAx1D,YAIApR,OAAAC,eAAAiM,KAAA,cACA9C,IAAA,WACA,OAAA8C,KAAA06D,mBAAAtwD,cAIAtW,OAAAC,eAAAiM,KAAA,uBACA9C,IAAA,WACA,OAAA8C,KAAA26D,wBAMA36D,KAAAq1D,iBAEAr1D,KAAA26D,wBAQA36D,KAAA46D,2BAAA,WAMA,GAJAh4D,EAAA+3D,qBAAA/mE,OAAA,EAIA,IAAAgP,EAAAyyD,cAAAzhE,OAAA,CACA,IAAAwgE,EAAAxxD,EAAAyyD,cAAA,GAKA,OAHAjB,EAAAyG,yBAAA,EACAzG,EAAA0G,gBAAA1G,EAAA2G,iBACAn4D,EAAA+3D,qBAAA5lE,KAAAq/D,GAaA,IALA,IAAA4G,GAAA,EACAC,GAAA,EAIA1nE,EAAA,EAAqBA,EAAAqP,EAAAyxD,QAAAhkD,cAAAzc,OAAwCL,IAAA,CAC7D,IAAAoC,EAAAiN,EAAAyxD,QAAAhkD,cAAA9c,GAEA,GAAAoC,EAAA4Z,SAAA,SAAA5Z,EAAAkP,KAAA,CAGAm2D,GAAA,EACAC,GAAA,EACA,OAIAr4D,EAAAyyD,cAAAj9D,QAAA,SAAAg8D,GAQA,GAFAA,EAAAyG,yBAAA,EAEAzG,EAAA8G,aAAA9G,EAAA2G,YAEA3G,EAAA0G,eAAAE,OACS,GAAA5G,EAAA8G,cAAA9G,EAAA2G,YAIT3G,EAAA0G,gBAAA,EACAG,GAAA,OACS,IAAA7G,EAAA8G,aAAA9G,EAAA2G,cAET3G,EAAA0G,eAAAG,EACAA,GACA,OAIAr4D,EAAA+3D,qBAAA5lE,KAAAq/D,MAIAp0D,KAAAm7D,qBAAA,WACAv4D,EAAAyyD,cAAAj9D,QAAA,SAAAg8D,GACAA,EAAAyG,yBAAA,KAIA76D,KAAAq4D,YAAA,WACAz1D,EAAAyyD,cAAAj9D,QAAA,SAAAg8D,GACAA,EAAA4D,aACA5D,EAAA4D,YAAA58D,aAAgD68D,OAAA,qBAKhDj4D,KAAAo7D,yBAAA,SAAAtgE,GACA8H,EAAAyyD,cAAAj9D,QAAA,SAAAK,GACA,OAAAA,EAAA4iE,aAAAvgE,EAAA0O,YAKA,0CAAApR,QAAA,SAAAkjE,GACAt7D,KAAA06D,mBAAAt2D,iBAAAk3D,EAAAt7D,KAAAoH,QAAA9C,KAAAtE,QACKA,MAILA,KAAAiG,GAAA,sBAAAnL,GAEA,IAAAsH,EAAA0yD,EAAA,WAAAyG,cAAA,SAAA34D,EAAA44D,KAAA,MAEAp5D,IAIAQ,EAAAyxD,SAAA,EAAA51D,EAAA,YAAA2D,EAAAqzD,YAIA7yD,EAAAyxD,QAAA/wD,MAAA2C,GAAA,YAAArD,EAAAy1D,aAIAz1D,EAAAyxD,QAAA/wD,MAAA2C,GAAA,2BAAArD,EAAAw4D,0BAEAx4D,EAAAyxD,QAAAhkD,aAAAzN,EAAAyxD,QAAAhkD,gBACAzN,EAAAyxD,QAAAhkD,cAAApK,GAAA,SAAArD,EAAAg4D,4BACAh4D,EAAAyxD,QAAAhkD,cAAApK,GAAA,WAAArD,EAAAg4D,4BACAh4D,EAAAyxD,QAAAhkD,cAAApK,GAAA,cAAArD,EAAAg4D,6BAGAh4D,EAAAyxD,QAAApuD,GAAA,cAAArD,EAAAu4D,yBAGAn7D,KAAAiG,GAAA,uBAAAnL,GAGA,IAFA,IAAAvE,GAAA,EAAAmgE,EAAApE,iBAAA1vD,EAAArM,UAEAhD,EAAA,EAAqBA,EAAAqP,EAAAyyD,cAAAzhE,OAAgCL,IAAA,CACrD,IAAAkoE,EAAA74D,EAAAyyD,cAAA9hE,GACAsC,EAAA4lE,EAAA3I,gBAAA2I,EAAA3I,eAAAj9D,KAEAA,KAAAjC,SACAiC,IAAAjC,OAAA,GAAA4C,QAAAD,MAOAyJ,KAAAiG,GAAA,uBAAAnL,GACAkF,KAAAq1D,cAAAj9D,QAAA,SAAAg8D,GACAA,EAAA4D,aACA5D,EAAA4D,YAAA9rD,cAIAlM,KAAAq1D,cAAAzhE,OAAA,EACAoM,KAAAq0D,UAIAr0D,KAAAq0D,QAAAhkD,aAAArQ,KAAAq0D,QAAAhkD,gBACArQ,KAAAq0D,QAAAhkD,cAAAuF,IAAA,SAAA5V,KAAA46D,4BACA56D,KAAAq0D,QAAAhkD,cAAAuF,IAAA,WAAA5V,KAAA46D,4BACA56D,KAAAq0D,QAAAhkD,cAAAuF,IAAA,cAAA5V,KAAA46D,6BAOA56D,KAAAq0D,QAAAqH,MACA17D,KAAAq0D,QAAAz+C,IAAA,cAAA5V,KAAAm7D,sBACAn7D,KAAAq0D,QAAA/wD,MAAAsS,IAAA,YAAA5V,KAAAq4D,aACAr4D,KAAAq0D,QAAA/wD,MAAAsS,IAAA,2BAAA5V,KAAAo7D,8BAqFA,OA1TA79D,EAAAk9D,EAAA/3D,GAkPA/G,EAAA8+D,IACApiE,IAAA,oBACArE,MAAA,SAAAwD,EAAAC,GACA,IAAAwQ,OAAAzT,EAEA,GAAAwL,KAAAzJ,WAAAwC,IAIA,MAHAkP,EAAA,IAAAzU,MAAA,oFACAyU,EAAAM,KAAA,oBACAN,EAAAxU,KAAA,GACAwU,GAGAxQ,EAAAuI,KAAA06D,mBAAAnkE,UAAA4sB,MAAAnjB,KAAA06D,mBAAAnkE,aACAyJ,KAAA06D,mBAAAnkE,SAAAkB,MAYAY,IAAA,kBACArE,MAAA,SAAA2M,GACA,IAAAlI,OAAAjE,EACAmhE,GAAA,EAAAR,EAAA3B,kBAAA7yD,GAIA,4BAAAqlB,KAAA2vC,EAAAh1D,MAAA,CACA,IAAAE,KAEA80D,EAAAlC,YAAAkC,EAAAlC,WAAA5yD,SACAA,EAAA80D,EAAAlC,WAAA5yD,OAAA5J,MAAA,KACA4J,GAAA,EAAAs0D,EAAA10D,uBAAAI,GACAA,IAAAC,OAAA,SAAA69C,GACA,SAAAwW,EAAA7B,cAAA3U,KAAA,EAAAwW,EAAA5B,cAAA5U,MAIA,IAAA99C,EAAAjN,SACAiN,GAAA,4BAGApI,EAAA,IAAA+hE,EAAA,WAAAx6D,KAAAa,GAEA,IAAAb,KAAAq1D,cAAAzhE,SAMAoM,KAAAq1D,cAAA,GAAAsG,2BACAljE,EAAAkjE,2BAIA37D,KAAAq1D,cAAA,GAAAyF,gBAAA,QAIAriE,EAAAuH,KAAA06D,mBAAA3sC,gBAAAptB,GAIA,OADAX,KAAAq1D,cAAAtgE,KAAA0D,GACAA,MAIAgiE,EA3TA,CA4TCh8D,EAAA,WAAAyO,aAEDra,EAAA,WAAA4nE,EACA7nE,EAAAC,UAAA,aACCc,KAAAqM,KAAA,qBAAAtE,IAAA,qBAAAd,UAAA,qBAAA4D,oBACEm7D,wBAAA,GAAA5D,gBAAA,GAAA6F,0BAAA,GAAA1F,kBAAA,GAAA9+D,gBAAA,KAAmHykE,IAAA,SAAAnpE,EAAAE,EAAAC,GAatH,aAEAiB,OAAAC,eAAAlB,EAAA,cACAmB,OAAA,IAEA,IAAA8nE,EAAA,SAAAtkE,EAAAC,EAAA9B,GACA,IAAApC,OAAAiB,EACAsB,OAAAtB,EAEA,GAAAmB,GAIAA,EAAAE,KAAA,CAIAtC,EAAAoC,EAAAE,KAAAjC,OAEA,MAAAL,IACAuC,EAAAH,EAAAE,KAAAtC,GAGAuC,EAAAyqB,WAAA9oB,GAAA3B,EAAAU,SAAAgB,GACA7B,EAAAomE,UAAAjmE,KAKAjD,EAAA,WAAAipE,EACAlpE,EAAAC,UAAA,gBACImpE,IAAA,SAAAtpE,EAAAE,EAAAC,GAeJ,aAEAiB,OAAAC,eAAAlB,EAAA,cACAmB,OAAA,IAGA,IAAA2H,EAAA,WAAiC,SAAAC,EAAAC,EAAAC,GAA2C,QAAAvI,EAAA,EAAgBA,EAAAuI,EAAAlI,OAAkBL,IAAA,CAAO,IAAAwI,EAAAD,EAAAvI,GAA2BwI,EAAAC,WAAAD,EAAAC,aAAA,EAAwDD,EAAAE,cAAA,EAAgC,UAAAF,MAAAG,UAAA,GAAuDpI,OAAAC,eAAA8H,EAAAE,EAAA1D,IAAA0D,IAA+D,gBAAAI,EAAAC,EAAAC,GAA2L,OAAlID,GAAAR,EAAAO,EAAA9C,UAAA+C,GAAqEC,GAAAT,EAAAO,EAAAE,GAA6DF,GAAzhB,GAEA,SAAA/G,EAAAC,GAAsC,OAAAA,KAAAC,WAAAD,GAAuCE,QAAAF,GAE7E,SAAAgI,EAAAC,EAAAnB,GAAiD,KAAAmB,aAAAnB,GAA0C,UAAAhH,UAAA,qCAE3F,IAAAK,EAAA9C,EAAA,iBAEA+C,EAAAL,EAAAI,GAEAymE,EAAAvpE,EAAA,kBAEAwpE,EAAA9mE,EAAA6mE,GASAhC,EAAA,SAAAC,GACAA,EAAAj0D,GAAA,gBAAA3P,GAKA,IAAA6lE,EAAA7lE,EAAAuC,YAEAvC,EAAAuC,aACAO,KAAA+iE,EAAA1jE,OACAC,WAAAyjE,EAAAzjE,WACAC,WAAAwjE,EAAAxjE,YAGA,IAAAyjE,EAAA9lE,EAAA8C,KAEA9C,EAAA8C,KAAAgjE,EAAA3jE,OACAhD,EAAA,WAAA2F,aACA68D,OAAA,OACA3hE,UACAoC,WAAA0jE,EAAA1jE,WACAC,WAAAyjE,EAAAzjE,aACKrC,EAAA8C,SAGL8gE,EAAA7pB,eACA6pB,EAAA7pB,cAAApqC,GAAA,gBAAA8jC,GACAt0C,EAAA,WAAA2F,aACA68D,OAAA,UACA7+D,KAAA2wC,MAKAmwB,EAAAj0D,GAAA,gBAAA7M,GACA3D,EAAA,WAAA2F,aAA2C68D,OAAA,WAG3CiC,EAAAj0D,GAAA,mBAAAo2D,GACA5mE,EAAA,WAAA2F,aACA68D,OAAA,UACAoE,eAaAlC,EAAA,WACA,SAAAA,EAAAx3D,GACAtF,EAAA2C,KAAAm6D,GAEAn6D,KAAA2C,cACA3C,KAAA8gC,OA6FA,OA9EAnlC,EAAAw+D,IACA9hE,IAAA,OACArE,MAAA,WACAgM,KAAAk6D,YACAl6D,KAAAk6D,WAAA/tD,UAEAnM,KAAAk6D,WAAA,IAAAgC,EAAA,WAAAtuB,WAAA5tC,KAAA2C,SACAs3D,EAAAj6D,KAAAk6D,eAUA7hE,IAAA,OACArE,MAAA,SAAAoF,GAEA,IAAA9C,EAAA,IAAA0E,WAAA5B,SAAAV,WAAAU,EAAAT,YAEAqH,KAAAk6D,WAAAnlE,KAAAuB,MAQA+B,IAAA,QACArE,MAAA,WACAgM,KAAA8gC,UAWAzoC,IAAA,qBACArE,MAAA,SAAAoF,GACA,IAAA0xB,EAAA1xB,EAAA0xB,iBAAA,EAEA9qB,KAAAk6D,WAAA9M,uBAAA3jD,KAAAslC,MAAA,IAAAjkB,OAGAzyB,IAAA,sBACArE,MAAA,SAAAoF,GACA4G,KAAAk6D,WAAAtR,oBAAAn/C,KAAA+9B,KAAA,IAAApuC,EAAAkjE,iBAUAjkE,IAAA,QACArE,MAAA,SAAAoF,GACA4G,KAAAk6D,WAAA9lC,WAGA/7B,IAAA,gBACArE,MAAA,WACAgM,KAAAk6D,WAAArpB,mBAGAx4C,IAAA,gBACArE,MAAA,SAAAoF,GACA4G,KAAAk6D,WAAAhO,cAAA9yD,EAAAuwD,gBAAArwD,aAIA6gE,EAlGA,GAqGAoC,EAAA,SAAA3hE,GACAA,EAAAC,UAAA,SAAAC,GACA,SAAAA,EAAA1B,KAAA6+D,QAAAn9D,EAAA1B,KAAAuJ,QACA3C,KAAAq6D,gBAAA,IAAAF,EAAAr/D,EAAA1B,KAAAuJ,UAIA3C,KAAAq6D,kBACAr6D,KAAAq6D,gBAAA,IAAAF,GAGAr/D,EAAA1B,MAAA0B,EAAA1B,KAAA6+D,QAAA,SAAAn9D,EAAA1B,KAAA6+D,QACAj4D,KAAAq6D,gBAAAv/D,EAAA1B,KAAA6+D,SACAj4D,KAAAq6D,gBAAAv/D,EAAA1B,KAAA6+D,QAAAn9D,EAAA1B,SAMAvG,EAAA,oBAAA+H,GACA,WAAA2hE,EAAA3hE,IAGAhI,EAAAC,UAAA,aACGuE,gBAAA,GAAAolE,iBAAA,KAAuCC,IAAA,SAAA/pE,EAAAE,EAAAC,IAC1C,SAAA6I,GAIA,aAMA,SAAAtG,EAAAC,GAAsC,OAAAA,KAAAC,WAAAD,GAAuCE,QAAAF,GAJ7EvB,OAAAC,eAAAlB,EAAA,cACAmB,OAAA,IAKA,IAAAwB,EAAA9C,EAAA,iBAEA+C,EAAAL,EAAAI,GAEAknE,EAAAhqE,EAAA,wBAEAiqE,EAAAvnE,EAAAsnE,GAEAE,EAAAlqE,EAAA,uBAEAmqE,EAAAznE,EAAAwnE,GAEAr+D,EAAA,qBAAAC,cAAA,gCAAA9C,IAAA,gBAEA+C,EAAArJ,EAAAmJ,GAEAu+D,EAAA,EAMAC,GAOAh6D,KAAA,QAMAtE,EAAA,WAAAu+D,gBASA,IAAAC,EAAA,SAAAC,EAAA1H,GACA,IAAAtxD,EAAAzF,EAAA,WAAAu+D,aAAAE,GAEA,IAAAh5D,EAGA,UAAA1Q,MAAA,qCAFA0Q,EAAAkD,SAAyBzG,KAAA,aAAA60D,WAYzB2H,EAAA,WACA,QAAA1nE,EAAA,WAAA0O,eAAA1O,EAAA,WAAA0O,YAAA2I,iBAAArX,EAAA,WAAA0O,YAAA2I,gBAAA,6CAaA3I,EAAA,SAAAxB,GACA,IAAA+L,EAAAjQ,EAAA,WAAAiH,aAAAq3D,EAAAp6D,GAQA,GANA3C,KAAAmE,aACA84D,OACAE,8BAIA,UAAAzuD,EAAA3L,MAAA,SAAA2L,EAAA3L,MAAAo6D,IACA,WAAAN,EAAA,WACG,GAAAp+D,EAAA,WAAA2+D,QAAA,SACH,WAAAT,EAAA,WAGA,UAAAnpE,MAAA,qEAGAX,EAAAsR,cACAA,EAAA84D,OACA94D,EAAAg5D,6BAQA,IAAAE,GASAC,gBAAA,SAAA3gE,GACA,IAAA4gE,EAAA,yBACA16D,OAAArO,EAGA,OAAAmI,aAAAkgE,EAAA,YACAh6D,EAAApN,EAAA,WAAA4nE,IAAAC,gBAAA3gE,EAAA+9D,oBACA/9D,EAAA6+D,KAAA34D,EACAA,GAIAlG,aAAAggE,EAAA,YAQA95D,EAAA06D,EAAAT,EAEAA,IAGAr+D,EAAA,WAAAu+D,aAAAn6D,GAAAlG,EAEAkG,IAdAA,EAAApN,EAAA,WAAA4nE,IAAAC,gBAAA3gE,GACAA,EAAA6+D,KAAA34D,EACAA,KAgBAhQ,EAAAwqE,MACA5+D,EAAA,WAAA0F,cACA1F,EAAA,WAAA4+D,QACC1pE,KAAAqM,KAAA,qBAAAtE,IAAA,qBAAAd,UAAA,qBAAA4D,oBACEg/D,uBAAA,GAAAC,sBAAA,GAAArmE,gBAAA,KAAsEsmE,IAAA,SAAAhrE,EAAAE,EAAAC,IACzE,SAAA6I,GAIA,aAEA5H,OAAAC,eAAAlB,EAAA,cACAmB,OAAA,IAGA,IAAA2H,EAAA,WAAiC,SAAAC,EAAAC,EAAAC,GAA2C,QAAAvI,EAAA,EAAgBA,EAAAuI,EAAAlI,OAAkBL,IAAA,CAAO,IAAAwI,EAAAD,EAAAvI,GAA2BwI,EAAAC,WAAAD,EAAAC,aAAA,EAAwDD,EAAAE,cAAA,EAAgC,UAAAF,MAAAG,UAAA,GAAuDpI,OAAAC,eAAA8H,EAAAE,EAAA1D,IAAA0D,IAA+D,gBAAAI,EAAAC,EAAAC,GAA2L,OAAlID,GAAAR,EAAAO,EAAA9C,UAAA+C,GAAqEC,GAAAT,EAAAO,EAAAE,GAA6DF,GAAzhB,GAEAG,EAAA,SAAAC,EAAAC,EAAAC,GAAuC,IAAAC,GAAA,EAAmB,MAAAA,EAAA,CAA4B,IAAAC,EAAAJ,EAAAK,EAAAJ,EAAAK,EAAAJ,EAAiDC,GAAA,EAAgB,OAAAC,MAAAG,SAAAzD,WAAkD,IAAA0D,EAAAjJ,OAAAkJ,yBAAAL,EAAAC,GAA8D,QAAApI,IAAAuI,EAAA,CAAuO,aAAAA,EAA4B,OAAAA,EAAA/I,MAA4B,IAAAiJ,EAAAF,EAAAG,IAAuB,QAAA1I,IAAAyI,EAA4B,OAAoB,OAAAA,EAAAtJ,KAAAkJ,GAA5U,IAAAM,EAAArJ,OAAAsJ,eAAAT,GAA4C,UAAAQ,EAAuB,OAA2BZ,EAAAY,EAAaX,EAAAI,EAAgBH,EAAAI,EAAgBH,GAAA,EAAeK,EAAAI,OAAA3I,IAE3b,SAAAY,EAAAC,GAAsC,OAAAA,KAAAC,WAAAD,GAAuCE,QAAAF,GAE7E,SAAAgI,EAAAC,EAAAnB,GAAiD,KAAAmB,aAAAnB,GAA0C,UAAAhH,UAAA,qCAE3F,SAAAoI,EAAAC,EAAAC,GAA0C,uBAAAA,GAAA,OAAAA,EAA+D,UAAAtI,UAAA,kEAAAsI,GAAuGD,EAAAnE,UAAAvF,OAAA4J,OAAAD,KAAApE,WAAyEsE,aAAe3J,MAAAwJ,EAAAxB,YAAA,EAAAE,UAAA,EAAAD,cAAA,KAA6EwB,IAAA3J,OAAA8J,eAAA9J,OAAA8J,eAAAJ,EAAAC,GAAAD,EAAAK,UAAAJ,GAErX,IAAAc,EAAA,qBAAAC,cAAA,gCAAA9C,IAAA,gBAEA+C,EAAArJ,EAAAmJ,GAEAi4D,EAAA9jE,EAAA,qCAEA+jE,EAAArhE,EAAAohE,GAEAF,EAAA5jE,EAAA,4BAEA6jE,EAAAnhE,EAAAkhE,GAEAI,EAAAhkE,EAAA,yBAEAqM,EAAArM,EAAA,cAEAsM,EAAA5J,EAAA2J,GAEA4+D,EAAAjrE,EAAA,uBAEAkrE,EAAAxoE,EAAAuoE,GAEAxI,EAAAziE,EAAA,iBAEAmrE,EAAA,WACA,IAAArkE,OAAAhF,EAEA,IACAgF,EAAA9G,EAAA0N,QAAA,uBACG,MAAArN,IAIH,OAAAyG,GAOAskE,EAAA,SAAA55D,EAAAuI,GACA,IAAA2nD,EAAAlwD,EAAA6pB,gBAAAthB,GACAsxD,EAAAjqE,OAAA4J,OAAA,MAEAqgE,EAAArzC,UAAA,EACAqzC,EAAAC,YAAA5J,EAEA,IAAA6J,EAAA,SAAA5lE,GACA,oBAAA+7D,EAAA/7D,GACA0lE,EAAA1lE,GAAA,WACA,OAAA+7D,EAAA/7D,GAAAg6B,MAAA+hC,EAAAh+D,YAEK,qBAAA2nE,EAAA1lE,IACLvE,OAAAC,eAAAgqE,EAAA1lE,GACA6E,IAAA,WACA,OAAAk3D,EAAA/7D,IAEAqxB,IAAA,SAAArf,GACA,OAAA+pD,EAAA/7D,GAAAgS,MAMA,QAAAhS,KAAA+7D,EACA6J,EAAA5lE,GAGA,OAAA0lE,GAgBAG,EAAA,SAAAzlE,EAAAqrB,EAAAta,GACA,IAAAsa,IAAArrB,EAAA7E,OACA,SAIA,IAAAuqE,EAAA10D,KAAA+9B,KAAA,KAAA1jB,EAAA7e,cAAAuE,EAAA,IAEAjW,OAAAiB,EAEA,IAAAjB,EAAA,EAAaA,EAAAkF,EAAA7E,OAAmBL,IAChC,GAAAkF,EAAAlF,GAAAwuC,IAAAo8B,EACA,MAIA,OAAA1lE,EAAAa,MAAA/F,IAGAV,EAAAqrE,sBAeA,IAAAE,EAAA,SAAA3lE,EAAAuxD,EAAAzpD,GACA,IAAAypD,EAAAp2D,OACA,OAAA6E,EAGA,GAAA8H,EAKA,OAAAypD,EAAA1wD,QAGA,IAAA9B,EAAAwyD,EAAA,GAAAjoB,IAEAxuC,EAAA,EAEA,IAAAA,EAASA,EAAAkF,EAAA7E,OAAmBL,IAC5B,GAAAkF,EAAAlF,GAAAwuC,KAAAvqC,EACA,MAIA,OAAAiB,EAAAa,MAAA,EAAA/F,GAAA00C,OAAA+hB,IAGAn3D,EAAAurE,kBAaA,IAAAC,EAAA,SAAA5lE,EAAAjB,EAAAC,EAAA+R,GACA,IAAA6gC,EAAA5gC,KAAA+9B,KAAA,KAAAhwC,EAAAgS,IACA8gC,EAAA7gC,KAAA+9B,KAAA,KAAA/vC,EAAA+R,IACA80D,EAAA7lE,EAAAa,QAEA/F,EAAAkF,EAAA7E,OAEA,MAAAL,IACA,GAAAkF,EAAAlF,GAAAwuC,KAAAuI,EACA,MAIA,QAAA/2C,EAEA,OAAA+qE,EAGA,IAAA3kE,EAAApG,EAAA,EAEA,MAAAoG,IACA,GAAAlB,EAAAkB,GAAAooC,KAAAsI,EACA,MASA,OAJA1wC,EAAA8P,KAAAC,IAAA/P,EAAA,GAEA2kE,EAAAjkC,OAAA1gC,EAAApG,EAAAoG,EAAA,GAEA2kE,GAGAzrE,EAAAwrE,kBAeA,IAAAE,EAAA,SAAA77D,GAGA,SAAA67D,EAAAr6D,EAAArD,GACA,IAAA+B,EAAA5C,KAEA3C,EAAA2C,KAAAu+D,GAEAjiE,EAAAxI,OAAAsJ,eAAAmhE,EAAAllE,WAAA,cAAA2G,MAAArM,KAAAqM,KAAAvB,EAAA,WAAAyO,aACAlN,KAAAquB,iBAAA,EACAruB,KAAAw+D,mBACAx+D,KAAAy+D,iBAAA,EAEAz+D,KAAAioB,aAAA/jB,EACAlE,KAAA0+D,QAAA79D,EACAb,KAAA+6D,YAAA,KACA/6D,KAAAk7D,YAAA,KACAl7D,KAAA86D,gBAAA,EACA96D,KAAA66D,yBAAA,EACA76D,KAAA2+D,cACA3+D,KAAAq7D,aAAA,EACAr7D,KAAA4+D,YAAAngE,EAAA,WAAAyL,QAAAC,YAAA,GAEA,IAAAxH,GACA4pD,OAAA,EACA9B,eAAAzqD,KAAA4+D,aAGA5+D,KAAA0+D,QAAAtmE,QAAA,SAAAumD,IACA,EAAAwW,EAAA7B,cAAA3U,GACA/7C,EAAAm4D,YAAApc,GACO,EAAAwW,EAAA5B,cAAA5U,KACP/7C,EAAAs4D,YAAAvc,KAMA3+C,KAAAg4D,aAAA,EAAAh5D,EAAA,YAAA4+D,EAAA,WAAAC,KACA79D,KAAAg4D,YAAA58D,aAAkC68D,OAAA,OAAAt1D,YAElC3C,KAAAg4D,YAAAn9D,UAAA,SAAAC,GACA,eAAAA,EAAA1B,KAAA6+D,OACAr1D,EAAAi8D,MAAA/jE,GAGA,SAAAA,EAAA1B,KAAA6+D,OACAr1D,EAAAk8D,MAAAhkE,GAGA,YAAAA,EAAA1B,KAAA6+D,OACAr1D,EAAAm8D,eAAAjkE,QADA,GAOAhH,OAAAC,eAAAiM,KAAA,mBACA9C,IAAA,WACA,OAAA8C,KAAAquB,kBAEA3E,IAAA,SAAAujB,GACA,kBAAAA,MAAA,IACAjtC,KAAAquB,iBAAA4e,EACAjtC,KAAA66D,yBAAA,EAGA76D,KAAA2+D,WAAA/qE,OAAA,EACAoM,KAAAq7D,aAAA,EAIAr7D,KAAAg4D,YAAA58D,aACA68D,OAAA,qBACAntC,gBAAAmiB,QAOAn5C,OAAAC,eAAAiM,KAAA,qBACA9C,IAAA,WACA,OAAA8C,KAAAg/D,cAAAh/D,KAAAi/D,cAAAC,mBAEAx1C,IAAA,SAAAlyB,GACAwI,KAAAg/D,eACAh/D,KAAAg/D,aAAAE,kBAAA1nE,GAEAwI,KAAAi/D,eACAj/D,KAAAi/D,aAAAC,kBAAA1nE,MAMA1D,OAAAC,eAAAiM,KAAA,YACA9C,IAAA,WACA,SAAA8C,KAAAy+D,kBAAAz+D,KAAA86D,gBAAA96D,KAAAi/D,cAAAj/D,KAAAi/D,aAAAv0C,UAAA1qB,KAAAg/D,cAAAh/D,KAAAg/D,aAAAt0C,aAMA52B,OAAAC,eAAAiM,KAAA,YACA9C,IAAA,WACA,IAAA1F,EAAA,KACAC,EAAA,KACAwqB,EAAA,EACAC,KACAnoB,KAGA,IAAAiG,KAAAg/D,eAAAh/D,KAAAi/D,aACA,OAAAxgE,EAAA,WAAAkhB,kBAIA,IAAA3f,KAAAg/D,aACA,OAAAh/D,KAAAi/D,aAAA/1D,SAEA,IAAAlJ,KAAAi/D,aACA,OAAAj/D,KAAAg/D,aAAA91D,SAIA,GAAAlJ,KAAA86D,eACA,OAAA96D,KAAAg/D,aAAA91D,SAIA,OAAAlJ,KAAAg/D,aAAA91D,SAAAtV,QAAA,IAAAoM,KAAAi/D,aAAA/1D,SAAAtV,OACA,OAAA6K,EAAA,WAAAkhB,kBAKA,IAAAw/C,EAAAn/D,KAAAg/D,aAAA91D,SACAk2D,EAAAp/D,KAAAi/D,aAAA/1D,SACAsK,EAAA2rD,EAAAvrE,OAGA,MAAA4f,IACA0O,EAAAntB,MAAwB0rB,KAAA0+C,EAAA3nE,MAAAgc,GAAA7S,KAAA,UACxBuhB,EAAAntB,MAAwB0rB,KAAA0+C,EAAA1nE,IAAA+b,GAAA7S,KAAA,QAExB6S,EAAA4rD,EAAAxrE,OACA,MAAA4f,IACA0O,EAAAntB,MAAwB0rB,KAAA2+C,EAAA5nE,MAAAgc,GAAA7S,KAAA,UACxBuhB,EAAAntB,MAAwB0rB,KAAA2+C,EAAA3nE,IAAA+b,GAAA7S,KAAA,QASxB,IANAuhB,EAAAtH,KAAA,SAAAtnB,EAAA+qB,GACA,OAAA/qB,EAAAmtB,KAAApC,EAAAoC,OAKAjN,EAAA,EAAuBA,EAAA0O,EAAAtuB,OAAwB4f,IAC/C,UAAA0O,EAAA1O,GAAA7S,MACAshB,IAIA,IAAAA,IACAzqB,EAAA0qB,EAAA1O,GAAAiN,OAEW,QAAAyB,EAAA1O,GAAA7S,OACXshB,IAIA,IAAAA,IACAxqB,EAAAyqB,EAAA1O,GAAAiN,OAKA,OAAAjpB,GAAA,OAAAC,IACAsC,EAAAhF,MAAAyC,EAAAC,IACAD,EAAA,KACAC,EAAA,MAIA,OAAAgH,EAAA,WAAA+F,iBAAAzK,MA6ZA,OArlBAwD,EAAAghE,EAAA77D,GAsMA/G,EAAA4iE,IACAlmE,IAAA,QACArE,MAAA,SAAA8G,GACA,IAAAxE,EAAAwE,EAAA1B,KAAA9C,QAGAA,EAAA8C,KAAA,IAAA4B,WAAA1E,EAAA8C,KAAA0B,EAAA1B,KAAAV,WAAAoC,EAAA1B,KAAAT,YAEArC,EAAAuC,YAAA,IAAAmC,WAAA1E,EAAAuC,YAAAO,KAAA9C,EAAAuC,YAAAH,WAAApC,EAAAuC,YAAAF,aAEA,EAAA89D,EAAA,YAAAz2D,UAAAioB,aAAA3xB,GAGA0J,KAAAw+D,gBAAAzpE,KAAAuB,MAcA+B,IAAA,QACArE,MAAA,SAAA8G,GAEA,WAAAkF,KAAAioB,aAAA7d,WAOApK,KAAAq/D,0BANAr/D,KAAAw+D,gBAAA5qE,OAAA,KAmBAyE,IAAA,2BACArE,MAAA,WACA,IAAAgS,EAAAhG,KAEAijD,GAAA,iBAEAA,EAAA7qD,QAAA,SAAAuI,GAGA,GAAAqF,EAAArF,EAAA,YAKAqF,EAAArF,EAAA,YAIA,IAAAlI,EAAA,KAIA,GAAAuN,EAAAiiB,aAAAtnB,EAAA,WACAlI,EAAAuN,EAAAiiB,aAAAtnB,EAAA,WAWAlI,EAAAiyB,UAAA,MACS,CACT,IAAA40C,EAAA3+D,EAAA,SACA8L,EAAA9L,EAAA,gBAAsCqF,EAAAs5D,GAAA,IAEtC7mE,EAAAqlE,EAAA93D,EAAAiiB,aAAAyyC,mBAAAjuD,GAEAzG,EAAAiiB,aAAAtnB,EAAA,WAAAlI,EAGAuN,EAAArF,EAAA,WAAAlI,GAGA,oCAAAL,QAAA,SAAA0C,GACArC,EAAA2L,iBAAAtJ,EAAA,WAEA,aAAA6F,IAAAqF,EAAA80D,eAAA,CAIA,cAAAhgE,IACAkL,EAAArF,EAAA,WAAA+pB,UAAA,GAGA,IAAA60C,EAAAtc,EAAAuc,MAAA,SAAAxsE,GAGA,kBAAAA,IAAAgT,EAAA80D,kBAIAn6D,IAAA3N,IAAAgT,EAAAhT,EAAA,aAAAgT,EAAAhT,EAAA,WAAA03B,YAMA,OAAA60C,EACAv5D,EAAAoB,QAAAtM,QADA,aAkBAzC,IAAA,eACArE,MAAA,SAAAsC,GAIA,GAFA0J,KAAAy+D,iBAAA,EAEAz+D,KAAAi/D,cAAAj/D,KAAAi/D,aAAA/1D,SAAAtV,OAAA,CACA,IAAAwrE,EAAAp/D,KAAAi/D,aAAA/1D,SAEAlJ,KAAAg4D,YAAA58D,aACA68D,OAAA,sBACAqE,YAAA8C,EAAA3nE,IAAA2nE,EAAAxrE,OAAA,KAIAoM,KAAAg/D,cACAh/D,KAAAg4D,YAAA58D,aACA68D,OAAA,gBACAtO,gBAAAuU,EAAAl+D,KAAA2+D,WAAA3+D,KAAAioB,aAAAosC,QAAAr0D,KAAAq7D,gBAIAr7D,KAAAg4D,YAAA58D,aACA68D,OAAA,OAIA7+D,KAAA9C,EAAAmC,OAIAC,WAAApC,EAAAoC,WACAC,WAAArC,EAAAqC,aACOrC,EAAAmC,SACPuH,KAAAg4D,YAAA58D,aAAoC68D,OAAA,aAapC5/D,IAAA,iBACArE,MAAA,SAAA8G,GACAkF,KAAA2+D,WAAAP,EAAAp+D,KAAA2+D,WAAA7jE,EAAA1B,KAAAijE,QAAAr8D,KAAA4+D,gBAYAvmE,IAAA,SACArE,MAAA,SAAAwD,EAAAC,GAeA,GAdAuI,KAAAg/D,eACAh/D,KAAAg/D,aAAAt0C,UAAA,EACA1qB,KAAAg/D,aAAAz0C,OAAA/yB,EAAAC,GACAuI,KAAA2+D,WAAAN,EAAAr+D,KAAA2+D,WAAAnnE,EAAAC,EAAAuI,KAAAq7D,gBAEAr7D,KAAA86D,gBAAA96D,KAAAi/D,eACAj/D,KAAAi/D,aAAAv0C,UAAA,EACA1qB,KAAAi/D,aAAA10C,OAAA/yB,EAAAC,KAIA,EAAA8+D,EAAA,YAAA/+D,EAAAC,EAAAuI,KAAA8yD,gBAGA9yD,KAAA4yD,kBACA,QAAAj9D,KAAAqK,KAAA4yD,mBACA,EAAA2D,EAAA,YAAA/+D,EAAAC,EAAAuI,KAAA4yD,kBAAAj9D,OAaA0C,IAAA,0BACArE,MAAA,WACA,IAAAyrE,GACAr9D,OACA/L,YACAmC,MAAA,GAEA6J,OACAhM,YACAmC,MAAA,GAEAyxC,YACAE,aAKAs1B,EAAAz/D,KAAAw+D,gBAAAnrD,OAAA,SAAAqsD,EAAAppE,GACA,IAAAqK,EAAArK,EAAAqK,KACAvH,EAAA9C,EAAA8C,KACAP,EAAAvC,EAAAuC,YAqBA,OAnBA6mE,EAAA/+D,GAAAtK,SAAAtB,KAAAqE,GACAsmE,EAAA/+D,GAAAnI,OAAAY,EAAAT,WAEA+mE,EAAA/+D,GAAA9H,cAGAvC,EAAA2zC,WACAy1B,EAAAz1B,SAAAy1B,EAAAz1B,SAAAhC,OAAA3xC,EAAA2zC,WAGA3zC,EAAAs2D,OACA8S,EAAA/+D,GAAAisD,KAAAt2D,EAAAs2D,MAIAt2D,EAAA6zC,WACAu1B,EAAAv1B,SAAAu1B,EAAAv1B,SAAAlC,OAAA3xC,EAAA6zC,WAGAu1B,GACOD,GAIPz/D,KAAAg/D,cAAAh/D,KAAAi/D,eAGA,IAAAQ,EAAAr9D,MAAA5J,QACAwH,KAAAk7D,YAAA,MAEA,IAAAuE,EAAAp9D,MAAA7J,QACAwH,KAAA+6D,YAAA,MAGA/6D,KAAA27D,4BAGA8D,EAAAp9D,MAAAuqD,MACA5sD,KAAAioB,aAAA7gB,SAAmCzG,KAAA,YAAAisD,KAAA6S,EAAAp9D,MAAAuqD,OAEnC6S,EAAAr9D,MAAAwqD,MACA5sD,KAAAioB,aAAA7gB,SAAmCzG,KAAA,YAAAisD,KAAA6S,EAAAr9D,MAAAwqD,OAGnC5sD,KAAA66D,2BACA76D,KAAA86D,gBAAA96D,KAAAi/D,eACAQ,EAAAp9D,MAAAhM,SAAAg0D,QAAAoV,EAAAp9D,MAAAxJ,aACA4mE,EAAAp9D,MAAA7J,OAAAinE,EAAAp9D,MAAAxJ,YAAAF,YAEAqH,KAAA66D,yBAAA,GAGA,IAAA8E,GAAA,EAGA3/D,KAAAg/D,cAAAS,EAAAr9D,MAAA5J,OACAinE,EAAAr9D,MAAA/L,SAAAg0D,QAAAoV,EAAAr9D,MAAAvJ,aACA4mE,EAAAr9D,MAAA5J,OAAAinE,EAAAr9D,MAAAvJ,YAAAF,WACAqH,KAAA4/D,yBAAAH,EAAAr9D,MAAApC,KAAAg/D,eAEA,EAAAtI,EAAAlE,kBAAAxyD,KAAAy/D,EAAAx1B,SAAAw1B,EAAAt1B,YACOnqC,KAAAg/D,eAAAh/D,KAAA86D,gBAAA96D,KAAAi/D,eAOPU,GAAA,IAGA3/D,KAAA86D,gBAAA96D,KAAAi/D,cACAj/D,KAAA4/D,yBAAAH,EAAAp9D,MAAArC,KAAAi/D,cAGAj/D,KAAAw+D,gBAAA5qE,OAAA,EAEA+rE,GACA3/D,KAAAoH,QAAA,aAIApH,KAAAy+D,iBAAA,KAYApmE,IAAA,2BACArE,MAAA,SAAA0rE,EAAAG,GACA,IAAA1pE,EAAA,EACA2pE,OAAAtrE,EAEA,GAAAkrE,EAAAlnE,MAAA,CACAsnE,EAAA,IAAA9kE,WAAA0kE,EAAAlnE,OAGAknE,EAAArpE,SAAA+B,QAAA,SAAA9B,GACAwpE,EAAAp2C,IAAApzB,EAAAH,GACAA,GAAAG,EAAAqC,aAGA,IACAknE,EAAAn1C,UAAA,EACAm1C,EAAAjzC,aAAAkzC,GACS,MAAA73D,GACTjI,KAAAioB,aAAAosC,SACAr0D,KAAAioB,aAAAosC,QAAApsD,OACAxU,MAAA,EACAkN,KAAA,oBACA1I,QAAAgQ,EAAAhQ,QACA8nE,cAAA93D,SAcA5P,IAAA,QACArE,MAAA,WACAgM,KAAAg/D,cACAh/D,KAAAg/D,aAAA92D,SAEAlI,KAAA86D,gBAAA96D,KAAAi/D,cACAj/D,KAAAi/D,aAAA/2D,QAEAlI,KAAAg4D,aACAh4D,KAAAg4D,YAAA58D,aAAsC68D,OAAA,UAEtCj4D,KAAAw+D,gBAAA5qE,OAAA,EACAoM,KAAAy+D,iBAAA,MAIAF,EAtlBA,CAulBC9/D,EAAA,WAAAyO,aAEDra,EAAA,WAAA0rE,IACC5qE,KAAAqM,KAAA,qBAAAtE,IAAA,qBAAAd,UAAA,qBAAA4D,oBACEm7D,wBAAA,GAAA5D,gBAAA,GAAA6D,oCAAA,GAAAE,2BAAA,GAAAkG,sBAAA,GAAAjyD,WAAA,KAA4JkyD,IAAA,SAAAvtE,EAAAE,EAAAC,GAG/J,IAAAqtE,EAAA9pE,UAAA,GACA+pE,EAAA/pE,UAAA,GACAgqE,EAAAhqE,UAAA,GACAk3B,EAAAD,KAAAC,UACA+yC,GAAA,EAGAC,EAAA,SAAAC,GAEA,IAAAC,KAGA,SAAAC,EAAAC,GAGA,GAAAF,EAAAE,GACA,OAAAF,EAAAE,GAAA7tE,QAGA,IAAAD,EAAA4tE,EAAAE,IACAntE,EAAAmtE,EACAhtE,GAAA,EACAb,YAUA,OANA0tE,EAAAG,GAAA/sE,KAAAf,EAAAC,QAAAD,IAAAC,QAAA4tE,GAGA7tE,EAAAc,GAAA,EAGAd,EAAAC,QAsCA,OAjCA4tE,EAAAE,EAAAJ,EAGAE,EAAA1/D,EAAAy/D,EAGAC,EAAAhrC,EAAA,SAAA5iC,EAAA0V,EAAAtL,GACAwjE,EAAArtE,EAAAP,EAAA0V,IACAzU,OAAAC,eAAAlB,EAAA0V,GACAtM,cAAA,EACAD,YAAA,EACAkB,IAAAD,KAMAwjE,EAAAxtE,EAAA,SAAAL,GACA,IAAAqK,EAAArK,KAAA0C,WACA,WAA6B,OAAA1C,EAAA,YAC7B,WAAmC,OAAAA,GAGnC,OADA6tE,EAAAhrC,EAAAx4B,EAAA,IAAAA,GACAA,GAIAwjE,EAAArtE,EAAA,SAAAuJ,EAAAC,GAAsD,OAAA9I,OAAAuF,UAAA8kC,eAAAxqC,KAAAgJ,EAAAC,IAGtD6jE,EAAA1oD,EAAA,GAGA0oD,IAAAttE,EAAAytE,cAGA,qBAAAV,IAEAG,GAAA,EACAH,EAAAI,EACAH,EAAAM,EAAAE,GAGA,IAAAE,EAAA,SAAAC,GAKA,IAHA,IACAC,EADAC,EAAAltE,OAAAqE,KAAAioE,GAGA7sE,EAAA,EAAiBA,EAAAytE,EAAAptE,OAAsBL,IAAA,CACvC,IAAA0tE,EAAAD,EAAAztE,GACA2tE,EAAAd,EAAAa,GAAApuE,QAMA,GAAAquE,IAAAJ,GAAAI,KAAA3rE,UAAAurE,EAAA,CACAC,EAAAE,EACA,OAKA,IAAAF,EAAA,CACAA,EAAAt3D,KAAAuI,MAAAvI,KAAAyW,IAAA,MAAAzW,KAAA+hB,UAAA7zB,SAAA,IAEA,IAAAwpE,KAEA,IAAA5tE,EAAA,EAAmBA,EAAAytE,EAAAptE,OAAsBL,IAAA,CACzC0tE,EAAAD,EAAAztE,GAEA4tE,EAAAF,KAGAd,EAAAY,IACA,oCAAwCD,EAAA,YACxCK,GAIA,IAAAC,EAAA33D,KAAAuI,MAAAvI,KAAAyW,IAAA,MAAAzW,KAAA+hB,UAAA7zB,SAAA,IACA0pE,KAYA,OAVAA,EAAAN,KACAZ,EAAAiB,IACA,oDAEA9zC,EAAAyzC,GAAA,wCAGAM,GAGA,IAAAnB,EAAA,MACApsE,OAAAqE,KAAAgoE,GAAAjpE,IAAA,SAAAmB,GACA,OAAAi1B,EAAAj1B,GAAA,KACA8nE,EAAA9nE,GAAA,OACAi1B,EAAA6yC,EAAA9nE,GAAA,UACSY,KAAA,KACT,SAAeq0B,EAAA8zC,GAAA,MAGfE,EAAA,SAAAR,EAAAS,GACA,IACAC,EADAC,EAAA,kBAAAF,EAIAC,EADAC,QAMA3tE,OAAAqE,KAAAgoE,GAAA/nE,QAAA,SAAAspE,GACAvB,EAAAuB,KAGAF,EAAAE,GAAAvB,EAAAuB,GAAA/pE,cAGA,IAaAgqE,EAbAC,EAAAnB,EAAAc,GAMA,IAAAK,OAAAd,GAAAc,EAAArsE,UAAAurE,EAAA,CACA,IAAAe,EAAAL,EAAAD,GAEAC,EAAAD,GAAAM,EAAAjqE,UAAA,EAAAiqE,EAAAjuE,OAAA,GACA,KAAAktE,EAAAv4D,KAAA,SAKA,GAAAk5D,EAAA,CAEAF,EAAAj0C,EAAAi0C,GAEA,IAAAO,EAAAhuE,OAAAqE,KAAAqpE,GAAAtqE,IAAA,SAAAwqE,GACA,OAAAp0C,EAAAo0C,GAAA,IAAAF,EAAAE,KAGAC,EAAA,IAAsBG,EAAA7oE,KAAA,cAEtB0oE,EAAA,IAAAH,EAAAvoE,KAAA,SAGA,mBAAAinE,EAAAvoE,WAAA4I,QAAA,cAAAghE,GAAA,KACAI,EACA,+CAMA/uE,EAAAC,QAAA,SAAAiuE,EAAAS,GACA,IAAAn9C,EAGAA,EADAi8C,EACAiB,EAAAR,EAAAS,GAEAV,EAAAC,GAGA,IAAAiB,EAAA,IAAAC,MAAA59C,IAA8BzjB,KAAA,oBAC9B08D,EAAA7+D,OAAA6+D,KAAA7+D,OAAAyjE,WAAAzjE,OAAA0jE,QAAA1jE,OAAA2jE,MACAC,EAAA/E,EAAAC,gBAAAyE,GACAM,EAAA,IAAAC,OAAAF,GAEA,OADAC,EAAAE,UAAAH,EACAC,QAGIG,IAAA,SAAA9vE,EAAAE,EAAAC,IACJ,SAAA6I,GAOA,aAEA,IAAAC,EAAA,WAAiC,SAAAC,EAAAC,EAAAC,GAA2C,QAAAvI,EAAA,EAAgBA,EAAAuI,EAAAlI,OAAkBL,IAAA,CAAO,IAAAwI,EAAAD,EAAAvI,GAA2BwI,EAAAC,WAAAD,EAAAC,aAAA,EAAwDD,EAAAE,cAAA,EAAgC,UAAAF,MAAAG,UAAA,GAAuDpI,OAAAC,eAAA8H,EAAAE,EAAA1D,IAAA0D,IAA+D,gBAAAI,EAAAC,EAAAC,GAA2L,OAAlID,GAAAR,EAAAO,EAAA9C,UAAA+C,GAAqEC,GAAAT,EAAAO,EAAAE,GAA6DF,GAAzhB,GAEAG,EAAA,SAAA8pB,EAAAC,EAAAC,GAAwC,IAAA5pB,GAAA,EAAmB,MAAAA,EAAA,CAA4B,IAAAC,EAAAypB,EAAAxpB,EAAAypB,EAAAxpB,EAAAypB,EAAkD5pB,GAAA,EAAgB,OAAAC,MAAAG,SAAAzD,WAAkD,IAAA0D,EAAAjJ,OAAAkJ,yBAAAL,EAAAC,GAA8D,QAAApI,IAAAuI,EAAA,CAAwO,aAAAA,EAA4B,OAAAA,EAAA/I,MAA4B,IAAAiJ,EAAAF,EAAAG,IAAuB,QAAA1I,IAAAyI,EAA4B,OAAoB,OAAAA,EAAAtJ,KAAAkJ,GAA7U,IAAAM,EAAArJ,OAAAsJ,eAAAT,GAA4C,UAAAQ,EAAuB,OAA2BipB,EAAAjpB,EAAckpB,EAAAzpB,EAAgB0pB,EAAAzpB,EAAgBH,GAAA,EAAeK,EAAAI,OAAA3I,IAE9b,SAAAY,EAAAC,GAAsC,OAAAA,KAAAC,WAAAD,GAAuCE,QAAAF,GAE7E,SAAAgI,EAAAC,EAAAnB,GAAiD,KAAAmB,aAAAnB,GAA0C,UAAAhH,UAAA,qCAE3F,SAAAoI,EAAAC,EAAAC,GAA0C,uBAAAA,GAAA,OAAAA,EAA+D,UAAAtI,UAAA,kEAAAsI,GAAuGD,EAAAnE,UAAAvF,OAAA4J,OAAAD,KAAApE,WAAyEsE,aAAe3J,MAAAwJ,EAAAxB,YAAA,EAAAE,UAAA,EAAAD,cAAA,KAA6EwB,IAAA3J,OAAA8J,eAAA9J,OAAA8J,eAAAJ,EAAAC,GAAAD,EAAAK,UAAAJ,GAErX,IAAAo3D,EAAAniE,EAAA,mBAEAoiE,EAAA1/D,EAAAy/D,GAEA/2D,EAAApL,EAAA,qBAEAqL,EAAA3I,EAAA0I,GAEAqc,EAAAznB,EAAA,cAEA0nB,EAAAhlB,EAAA+kB,GAEAsoD,EAAA/vE,EAAA,SAEAgwE,EAAAttE,EAAAqtE,GAEAhoE,EAAA/H,EAAA,iBAEAgI,EAAAhI,EAAA,eAEAiwE,EAAAvtE,EAAAsF,GAEAkoE,EAAAlwE,EAAA,iCAEA6kB,EAAA7kB,EAAA,eAEA8kB,EAAApiB,EAAAmiB,GAEAhZ,EAAA,qBAAAC,cAAA,gCAAA9C,IAAA,gBAEA+C,EAAArJ,EAAAmJ,GAEAskE,EAAAnwE,EAAA,gCAEAyM,EAAAzM,EAAA,YAEA0M,EAAAhK,EAAA+J,GAEA2jE,EAAApwE,EAAA,qBAEAqwE,EAAA3tE,EAAA0tE,GAEAttE,EAAA9C,EAAA,iBAEA+C,EAAAL,EAAAI,GAEAwtE,EAAAtwE,EAAA,sBAEAuwE,EAAA7tE,EAAA4tE,GAEAE,EAAAxwE,EAAA,4BAEAywE,EAAA/tE,EAAA8tE,GAEAE,EAAA1wE,EAAA,2BAEA8M,GACAkZ,eAAA3a,EAAA,WACA6K,SAAAwR,EAAA,WACAjf,UAAAV,EAAAU,UACAw8B,YAAAl9B,EAAAk9B,YACAe,QAAAj+B,EAAAi+B,QACAx/B,MAAAypE,EAAA,WAEAU,2BAAAD,EAAAtmD,sBACAwmD,0BAAAF,EAAA9kD,uCACAtD,yBAAAooD,EAAApoD,yBACAK,0BAAA+nD,EAAA/nD,0BAEA/J,KAAA,EAAAoxD,EAAA,eAIAa,EAAA,SAGA,+KAAAnrE,QAAA,SAAAowD,GACA10D,OAAAC,eAAAyL,EAAAgpD,GACAtrD,IAAA,WAEA,OADAuB,EAAA,WAAAwD,IAAAC,KAAA,aAAAsmD,EAAA,kDACAppD,EAAA,WAAAopD,IAEA9+B,IAAA,SAAA11B,GACAyK,EAAA,WAAAwD,IAAAC,KAAA,aAAAsmD,EAAA,kDAEA,kBAAAx0D,KAAA,EACAyK,EAAA,WAAAwD,IAAAC,KAAA,gBAAAsmD,EAAA,uCAIAppD,EAAA,WAAAopD,GAAAx0D,OAYA,IAAAwvE,EAAA,SAAAC,EAAAl3D,GAIA,IAHA,IAAAyd,EAAAzd,EAAArW,QACAwtE,GAAA,EAEAnwE,EAAA,EAAiBA,EAAAkwE,EAAA7vE,OAA0BL,IAC3C,GAAAkwE,EAAAlwE,GAAA8Y,KAAA2d,EAAAhoB,IAAA,CACA0hE,EAAAnwE,EACA,MAIAkwE,EAAAE,eAAAD,EACAD,EAAAr8D,SACAs8D,gBACA/iE,KAAA,YAWAijE,EAAA,SAAAH,EAAAjgE,GACAA,EAAAiiB,kBAAArtB,QAAA,SAAA4jB,GACAynD,EAAAI,gBAAA7nD,KAEAwnD,EAAAC,EAAAjgE,EAAA2H,YAKA3L,EAAAskE,cAAA,WACA,OAAArlE,EAAA,WAAAwD,IAAAC,KAAA,4EAMA1C,EAAAukE,kBAAA,WACA,IAAA3hE,EAAA0yD,EAAA,WAAAkP,cAAA,SAGA,IAAAvlE,EAAA,WAAA2+D,QAAA,SAAA6G,cACA,SAIA,IAAAC,GAEA,gCAEA,gBAEA,kBAEA,wBAEA,yDAEA,OAAAA,EAAAriD,KAAA,SAAAsiD,GACA,wBAAAn+C,KAAA5jB,EAAAgiE,YAAAD,MAtBA,GA+BA3kE,EAAAykE,YAAA,WACA,OAAAxlE,EAAA,WAAAwD,IAAAC,KAAA,4EAGA,IAAAmiE,EAAA5lE,EAAA,WAAA6lE,aAAA,aAaAC,EAAA,SAAAC,GAGA,SAAAD,EAAAlpE,EAAA2H,EAAAL,GACA,IAAAC,EAAA5C,KAQA,GANA3C,EAAA2C,KAAAukE,GAEAjoE,EAAAxI,OAAAsJ,eAAAmnE,EAAAlrE,WAAA,cAAA2G,MAAArM,KAAAqM,KAAAgD,EAAAL,EAAAa,KAIAR,EAAAyhE,UAAAzhE,EAAAyhE,SAAAC,SAAA,CACA,IAAAC,GAAA,EAAAlmE,EAAA,YAAAuE,EAAAyhE,SAAAC,UAEAC,EAAAxmC,eAAA,QACArqC,OAAAC,eAAA4wE,EAAA,OACAznE,IAAA,WAGA,OAFAuB,EAAA,WAAAwD,IAAAC,KAAA,2DACAc,EAAAoE,SAA0BzG,KAAA,QAAA4H,KAAA,sBAC1B3F,KAcA,GARA5C,KAAAsD,MAAAN,EACAhD,KAAA4kE,QAAAvpE,EACA2E,KAAA8R,SACA9R,KAAA6kE,yBAAA,EACA7kE,KAAA8kE,cAIA9kE,KAAAykE,SAAAM,iBAAA/hE,EAAAgiE,2BAAAhiE,EAAAiiE,2BACA,UAAAzxE,MAAA,4EAKAwM,KAAAiG,GAAA6uD,EAAA,6GAAAh6D,GACA,IAAAoqE,EAAApQ,EAAA,WAAAoQ,mBAAApQ,EAAA,WAAAqQ,yBAAArQ,EAAA,WAAAsQ,sBAAAtQ,EAAA,WAAAuQ,oBAEAH,KAAAI,SAAA1iE,EAAAU,MAAAgX,OACA1X,EAAAyiB,0BAAAC,uBAIAtlB,KAAAiG,GAAAjG,KAAAsD,MAAA,qBACAtD,KAAA6kE,wBACA7kE,KAAA6kE,yBAAA,EAIA7kE,KAAA+J,eAAA/J,KAAAsD,MAAA2B,iBAEAjF,KAAAiG,GAAAjG,KAAAsD,MAAA,mBACAtD,KAAAqlB,2BACArlB,KAAAqlB,0BAAAkgD,iBAIAvlE,KAAAiG,GAAAjG,KAAAsD,MAAA,OAAAtD,KAAAwK,MA8TA,OA3XAjN,EAAAgnE,EAAAC,GAwEA7oE,EAAA4oE,IACAlsE,IAAA,cACArE,MAAA,WACA,IAAAgS,EAAAhG,KAGAA,KAAAykE,SAAA3hE,gBAAA9C,KAAAykE,SAAA3hE,kBAAA,EAEA,kBAAA9C,KAAAykE,SAAArhE,oBACApD,KAAAykE,SAAArhE,kBAAA,KAKA,kBAAApD,KAAAykE,SAAAxhE,YACAjD,KAAAykE,SAAAxhE,UAAAsgE,GAKAvjE,KAAAykE,SAAAphE,yBAAArD,KAAAykE,SAAAphE,0BAAArD,KAAAykE,SAAAxhE,YAAAsgE,GAGA,+BAAAnrE,QAAA,SAAAotE,GACA,qBAAAx/D,EAAA4+D,QAAAY,KACAx/D,EAAAy+D,SAAAe,GAAAx/D,EAAA4+D,QAAAY,MAIAxlE,KAAAiD,UAAAjD,KAAAykE,SAAAxhE,aASA5K,IAAA,MACArE,MAAA,SAAAyxE,GACA,IAAA18D,EAAA/I,KAGAylE,IAGAzlE,KAAA8kE,cAEA9kE,KAAAykE,SAAA5hE,IAAA7C,KAAA4kE,QAAAxgD,IACApkB,KAAAykE,SAAAzhE,KAAAhD,KAAAsD,MACAtD,KAAAykE,SAAAvhE,UAAA1D,EAEAQ,KAAAqlB,0BAAA,IAAAw9C,EAAApgE,yBAAAzC,KAAAykE,UACAzkE,KAAA0lE,iBAAA,IAAAzC,EAAA,WAAAxkE,EAAA,WAAAiH,aAAA1F,KAAAykE,UACAv/D,SAAA,WACA,OAAA6D,EAAA7D,eAIAlF,KAAAqlB,0BAAApf,GAAA,mBACA,IAAA6d,EAAArlB,EAAA,WAAAknE,QAAA58D,EAAAzF,MAAAmhE,SAAAC,UAEA5gD,EAAA7b,MAAAc,EAAAsc,0BAAApd,SAKAjI,KAAAqlB,0BAAA7d,eAAAxH,KAAAwH,eAAAxH,KAAAwH,eAAAlD,KAAAtE,MAAAR,EAAA6jE,2BAAA/+D,KAAAtE,MAEAA,KAAAqlB,0BAAA9d,sBAAA/H,EAAA8jE,0BAAAh/D,KAAAtE,MAGAA,KAAAmL,UAAAnL,KAAAqlB,0BAAA7f,sBACAxF,KAAAkE,YAAAlE,KAAAqlB,0BAAAnhB,YAKApQ,OAAA8H,iBAAAoE,MACAwH,gBACAtK,IAAA,WACA,OAAA8C,KAAAqlB,0BAAA7d,gBAEAkiB,IAAA,SAAAliB,GACAxH,KAAAqlB,0BAAA7d,iBAAAlD,KAAAtE,QAGA2nB,YACAzqB,IAAA,WACA,OAAA8C,KAAAqlB,0BAAAnlB,mBAAAynB,WAAA3a,MAEA0c,IAAA,SAAA/B,GACA3nB,KAAAqlB,0BAAAnlB,mBAAAynB,WAAA3a,KAAA2a,EAGA3nB,KAAAqlB,0BAAAnlB,mBAAAynB,WAAAnU,MAAA,IAGAvQ,WACA/F,IAAA,WACA,OAAA8C,KAAAqlB,0BAAAnlB,mBAAA+C,WAEAymB,IAAA,SAAAzmB,GACAjD,KAAAqlB,0BAAAnlB,mBAAA+C,YAIAjD,KAAAqlB,0BAAAnlB,mBAAAynB,YACA3a,KAAA,EACAwG,MAAA,KAaAuJ,iBACA7f,IAAA,WACA,IAAA0oE,EAAA,GAAA5lE,KAAAiD,WAAA,GACA4iE,OAAArxE,EAGAqxE,EADA7lE,KAAA2nB,WAAA,EACA,EAAA3nB,KAAA2nB,WAEA,EAGA,IAAAm+C,EAAAr8D,KAAAuI,MAAA,GAAA4zD,EAAAC,IAEA,OAAAC,GAEAp8C,IAAA,WACAjrB,EAAA,WAAAwD,IAAAgG,MAAA,mDAKAnU,OAAA8H,iBAAAoE,KAAA8R,OACA7O,WACA/F,IAAA,WACA,OAAA6L,EAAA9F,WAAA,GAEAjH,YAAA,GAEAitB,eACA/rB,IAAA,WACA,OAAA6L,EAAAsc,0BAAA0gD,kBAAA,GAEA/pE,YAAA,GAEAktB,sBACAhsB,IAAA,WACA,OAAA6L,EAAAsc,0BAAA2gD,yBAAA,GAEAhqE,YAAA,GAEAmtB,uBACAjsB,IAAA,WACA,OAAA6L,EAAAsc,0BAAA4gD,0BAAA,GAEAjqE,YAAA,GAEAotB,sBACAlsB,IAAA,WACA,OAAA6L,EAAAsc,0BAAA6gD,yBAAA,GAEAlqE,YAAA,GAEAqtB,uBACAnsB,IAAA,WACA,OAAA6L,EAAAsc,0BAAA8gD,0BAAA,GAEAnqE,YAAA,GAEAgtB,uBACA9rB,IAAA,WACA,OAAA6L,EAAAsc,0BAAA+gD,0BAAA,GAEApqE,YAAA,GAEA2N,oBACAzM,IAAA,WACA,OAAA6L,EAAAsc,0BAAAghD,uBAAA,GAEArqE,YAAA,KAIAgE,KAAAsD,MAAA0E,IAAA,UAAAhI,KAAAqlB,0BAAAle,eAAA7C,KAAAtE,KAAAqlB,4BAEArlB,KAAAqlB,0BAAApf,GAAA,mCAEA,EAAA88D,EAAA,YAAAh6D,KAKA/I,KAAAiG,GAAAjG,KAAAqlB,0BAAA,sBACArlB,KAAAsD,MAAA8D,QAAA,cAKApH,KAAAiG,GAAAjG,KAAAqlB,0BAAA,uBACArlB,KAAA6kE,yBAAA,IAGA7kE,KAAAsD,MAAA2gB,MAAA,WACA,OAAAlb,EAAAu9D,wBAKAtmE,KAAAsD,MAAAgX,MAIAta,KAAAsD,MAAA8gB,IAAA3lB,EAAA,WAAA4+D,IAAAC,gBAAAt9D,KAAAqlB,0BAAAnhB,kBAUA7L,IAAA,sBACArE,MAAA,WACA,IAAAgW,EAAAhK,KAEA8jB,EAAArlB,EAAA,WAAAknE,QAAA3lE,KAAAsD,MAAAmhE,SAAAC,UAEA5gD,KAAA2/C,gBACAzjE,KAAAumE,eAAAziD,EAAA2/C,gBAEAzjE,KAAAqlB,0BAAApf,GAAA,kCACA29D,EAAA55D,EAAAu8D,eAAAv8D,KAGAhK,KAAAmL,UAAAlF,GAAA,yBACAu9D,EAAAx5D,EAAAu8D,eAAAv8D,EAAAmB,iBASA9S,IAAA,OACArE,MAAA,WACAgM,KAAAqlB,0BAAA7a,UAOAnS,IAAA,iBACArE,MAAA,SAAAiR,GACAjF,KAAAqlB,0BAAAtb,eAAA9E,MAOA5M,IAAA,WACArE,MAAA,WACA,OAAAgM,KAAAqlB,0BAAA9uB,cAOA8B,IAAA,WACArE,MAAA,WACA,OAAAgM,KAAAqlB,0BAAAngB,cAOA7M,IAAA,UACArE,MAAA,WACAgM,KAAA0lE,kBACA1lE,KAAA0lE,iBAAAv5D,UAEAnM,KAAAqlB,2BACArlB,KAAAqlB,0BAAAlZ,UAEAnM,KAAAumE,gBACAvmE,KAAAumE,eAAAp6D,UAEA7P,EAAAxI,OAAAsJ,eAAAmnE,EAAAlrE,WAAA,UAAA2G,MAAArM,KAAAqM,UAIAukE,EA5XA,CA6XCF,GAEDmC,EAAA,SAAAA,EAAAzjE,GACA,OACA0jE,gBAAA,SAAAC,GACA,IAAA/jE,EAAAvM,UAAAxC,QAAA,QAAAY,IAAA4B,UAAA,MAA4EA,UAAA,GAE5E4tB,EAAAvlB,EAAA,WAAAiH,aAAAjH,EAAA,WAAAkE,WAIA,QAAAqhB,EAAAxgB,MAAAwgB,EAAAxgB,IAAAT,MAAAihB,EAAAxgB,IAAAT,WAGAyjE,EAAApC,YAAAsC,EAAA/lE,KAAAqjB,IAEA2iD,aAAA,SAAAtrE,EAAA2H,GACA,IAAAL,EAAAvM,UAAAxC,QAAA,QAAAY,IAAA4B,UAAA,MAA4EA,UAAA,GAE5E4tB,EAAAvlB,EAAA,WAAAiH,aAAAjH,EAAA,WAAAkE,WAAmGa,KAAOT,UAc1G,MAZA,UAAAA,GAGAC,EAAA+S,WAAA,WACA/S,EAAAoE,QAAA,cACS,GAGTpE,EAAAQ,IAAA,IAAA+gE,EAAAlpE,EAAA2H,EAAAghB,GACAhhB,EAAAQ,IAAA8N,KAAA,EAAAoxD,EAAA,cAEA1/D,EAAAQ,IAAA4gB,IAAA/oB,EAAA+oB,KACAphB,EAAAQ,KAEA4gE,YAAA,SAAAzjE,GACA,IAAAgC,EAAAvM,UAAAxC,QAAA,QAAAY,IAAA4B,UAAA,MAA4EA,UAAA,GAE5E4tB,EAAAvlB,EAAA,WAAAiH,aAAAjH,EAAA,WAAAkE,WAEA,OAAA6jE,EAAApC,YAAAzjE,EAAAqjB,GACA,QAEA,MAKAwiD,EAAApC,YAAA,SAAAzjE,EAAAgC,GAEA,GAAAlE,EAAA,WAAAyL,QAAAC,YAAA1L,EAAA,WAAAyL,QAAAC,YAAA,GACA,SAGA,IAAAy8D,EAAA,yDAGA,SAAAjkE,EAAAa,IAAAuhE,gBAAAvlE,EAAAukE,oBAGA6C,EAAA5gD,KAAArlB,IAGA,qBAAAlC,EAAA,WAAA0F,aAAA,qBAAA1F,EAAA,WAAA4+D,MACA5+D,EAAA,WAAA0F,YAAAy+D,EAAAz+D,YACA1F,EAAA,WAAA4+D,IAAAuF,EAAAvF,KAGA,IAAAwJ,EAAApoE,EAAA,WAAA2+D,QAAA,SAGAwF,EAAAz+D,YAAAg5D,8BACA1+D,EAAA,WAAA2+D,QAAA,SAAA0J,sBAAAN,EAAA,YAEA/wE,EAAA,WAAAuF,YAAA6rE,GACAA,EAAAC,sBAAAN,EAAA,UAGA/nE,EAAA,WAAA8lE,aACA9lE,EAAA,WAAA+nE,mBACA/nE,EAAA,WAAAe,MACAf,EAAA,WAAAsoE,KACAtoE,EAAA,WAAAuoE,kBAAA,MAAAxnE,GAEAf,EAAA,WAAAwoE,KAAAzvD,EAAA,WACA/Y,EAAA,WAAAkE,QAAAa,IAAA/E,EAAA,WAAAkE,QAAAa,QAEA/E,EAAA,WAAAyoE,eACAzoE,EAAA,WAAAyoE,eAAA,sBAAA/D,EAAA,YAEA1kE,EAAA,WAAA0oE,OAAA,sBAAAhE,EAAA,YAGAvwE,EAAAC,SACA2M,MACA+kE,aACAiC,sBAEC7yE,KAAAqM,KAAA,qBAAAtE,IAAA,qBAAAd,UAAA,qBAAA4D,oBACEjD,cAAA,EAAA6R,WAAA,EAAAg6D,+BAAA,EAAAC,qBAAA,EAAA7oD,aAAA,GAAAjR,oBAAA,EAAA+5D,0BAAA,GAAAC,2BAAA,GAAAC,oBAAA,GAAAC,QAAA,GAAAjsE,gBAAA,GAAA06D,kBAAA,GAAA9+D,gBAAA,GAAA6iB,cAAA,GAAAytD,gCAAA,UAA4U,IArkqBmC,CAqkqBnC,yEC3kqB/U,IAAAC,EAAA,WAA0B,IAAAC,EAAA5nE,KAAa6nE,EAAAD,EAAAE,eAA0BC,EAAAH,EAAAI,MAAAD,IAAAF,EAAwB,OAAAE,EAAA,OAAAA,EAAA,kBAAAA,EAAA,eAAwD/qC,OAAOirC,MAAA,GAAAC,OAAA,MAAsBH,EAAA,YAAiB/qC,OAAOmrC,WAAA,EAAAC,QAAAR,EAAAS,GAAA,sBAAAC,cAAA,WAAiFP,EAAA,OAAY/qC,OAAOnhC,OAAA,SAAAke,KAAA,wFAA+GguD,EAAA,gBAAqBQ,IAAA,cAAAC,YAAA,kBAAAxrC,OAAuDr6B,QAAAilE,EAAAa,cAAAC,aAAA,GAA+CziE,IAAKge,MAAA2jD,EAAAe,kBAA2B,GAAAZ,EAAA,YAAqB/qC,OAAOmrC,WAAA,EAAAC,QAAAR,EAAAS,GAAA,oCAAAC,cAAA,WAA+FP,EAAA,OAAY/qC,OAAOnhC,OAAA,SAAAke,KAAA,wFAA+GguD,EAAA,gBAAqBS,YAAA,kBAAAxrC,OAAqCr6B,QAAAilE,EAAAgB,eAAAF,aAAA,GAAgDziE,IAAKge,MAAA,SAAA4kD,GAAyBjB,EAAAkB,eAAAD,QAA6B,GAAAd,EAAA,YAAqB/qC,OAAOmrC,WAAA,EAAAC,QAAAR,EAAAS,GAAA,mBAAAC,cAAA,WAA8EP,EAAA,OAAY/qC,OAAOnhC,OAAA,SAAAke,KAAA,wFAA+GguD,EAAA,OAAYS,YAAA,WAAqBT,EAAA,gBAAqBS,YAAA,kBAAAxrC,OAAqCr6B,QAAAilE,EAAAmB,gBAA6B9iE,IAAKge,MAAA2jD,EAAAoB,mBAA4B,cAC31CC,0BC0DAzqE,OAAA0qE,QAAAC,EAAA71E,EAEAmtE,EAAA,QAEA,IAAA2I,GACAhwE,KADA,WAEA,OAEAqvE,eACA1sD,OAAA,MACAzR,UAAA,EACA++D,OAAA,EACAx5D,SAAA,KACAy5D,eAAA,YACAnJ,UACAx/D,KAAA,YAEAyjB,IAAA,uCAEAmlD,OAAA,8EAEAX,gBACA7sD,OAAA,MACAutD,eAAA,kBACAnJ,UACAx/D,KAAA,YACAyjB,IAAA,2DAEAmlD,OAAA,8EAEAR,gBAEAhtD,OAAA,MACAokD,UACAr9D,iBAAA,EACAnC,KAAA,wBACAyjB,IAAA,+FAEAolD,YACAC,aAAA,EACAC,iBAAA,GAEAC,OAAAnmE,KAAAV,iBAAA,IACA8mE,OAAApmE,KAAAV,iBAAA,IACAymE,OAAA,gFAIAM,SAEAlB,cAFA,SAEA7kD,GAEA+7B,QAAA59C,IAAA,2BAAA6hB,GACAA,EAAA7e,YAAA,IAEA6jE,eAPA,SAOAhlD,GACA,IAAAnuB,EAAA,IAAAwzE,EAAA71E,EAAAsc,YACAvD,GAAA,yBACAxH,KAAA,cACAC,MAAA,UACA+K,SAAA,OAEAiU,EAAAzT,cAAAG,SAAA7a,GAEA,IAAAm0E,EAAAhmD,EAAAzT,cAEAy5D,EAAA1lE,iBAAA,oBAEA,QAAA7Q,EAAA,EAAAA,EAAAu2E,EAAAl2E,OAAAL,IAAA,CACA,IAAAo/B,EAAAm3C,EAAAv2E,GACA,GAAAo/B,EAAApjB,QAEA,YADA45D,EAAA71E,EAAA2O,IAAA0wB,EAAA7tB,WAMAkkE,eA7BA,SA6BAllD,GACAA,EAAA9gB,MAAA0gB,0BAAA,IAAAlgB,IACAsgB,EAAAxgB,MAAAE,IAAA8N,IAAAqjB,cAAA,SAAAhyB,GACA,OAAAA,MC3I2RonE,EAAA,cCO3RC,EAAAl2E,OAAAm2E,EAAA,KAAAn2E,CACAi2E,EACApC,EACAsB,GACA,EACA,KACA,KACA,MAIAe,EAAArnE,QAAAunE,OAAA,kBACAC,EAAA,WAAAH","file":"js/chunk-584c.b67c16d9.js","sourcesContent":["/**\n * videojs-contrib-hls\n * @version 5.14.1\n * @copyright 2018 Brightcove, Inc\n * @license Apache-2.0\n */\n(function(f){if(typeof exports===\"object\"&&typeof module!==\"undefined\"){module.exports=f()}else if(typeof define===\"function\"&&define.amd){define([],f)}else{var g;if(typeof window!==\"undefined\"){g=window}else if(typeof global!==\"undefined\"){g=global}else if(typeof self!==\"undefined\"){g=self}else{g=this}g.videojsContribHls = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n/**\n * @file ad-cue-tags.js\n */\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nvar _globalWindow = require('global/window');\n\nvar _globalWindow2 = _interopRequireDefault(_globalWindow);\n\n/**\n * Searches for an ad cue that overlaps with the given mediaTime\n */\nvar findAdCue = function findAdCue(track, mediaTime) {\n  var cues = track.cues;\n\n  for (var i = 0; i < cues.length; i++) {\n    var cue = cues[i];\n\n    if (mediaTime >= cue.adStartTime && mediaTime <= cue.adEndTime) {\n      return cue;\n    }\n  }\n  return null;\n};\n\nvar updateAdCues = function updateAdCues(media, track) {\n  var offset = arguments.length <= 2 || arguments[2] === undefined ? 0 : arguments[2];\n\n  if (!media.segments) {\n    return;\n  }\n\n  var mediaTime = offset;\n  var cue = undefined;\n\n  for (var i = 0; i < media.segments.length; i++) {\n    var segment = media.segments[i];\n\n    if (!cue) {\n      // Since the cues will span for at least the segment duration, adding a fudge\n      // factor of half segment duration will prevent duplicate cues from being\n      // created when timing info is not exact (e.g. cue start time initialized\n      // at 10.006677, but next call mediaTime is 10.003332 )\n      cue = findAdCue(track, mediaTime + segment.duration / 2);\n    }\n\n    if (cue) {\n      if ('cueIn' in segment) {\n        // Found a CUE-IN so end the cue\n        cue.endTime = mediaTime;\n        cue.adEndTime = mediaTime;\n        mediaTime += segment.duration;\n        cue = null;\n        continue;\n      }\n\n      if (mediaTime < cue.endTime) {\n        // Already processed this mediaTime for this cue\n        mediaTime += segment.duration;\n        continue;\n      }\n\n      // otherwise extend cue until a CUE-IN is found\n      cue.endTime += segment.duration;\n    } else {\n      if ('cueOut' in segment) {\n        cue = new _globalWindow2['default'].VTTCue(mediaTime, mediaTime + segment.duration, segment.cueOut);\n        cue.adStartTime = mediaTime;\n        // Assumes tag format to be\n        // #EXT-X-CUE-OUT:30\n        cue.adEndTime = mediaTime + parseFloat(segment.cueOut);\n        track.addCue(cue);\n      }\n\n      if ('cueOutCont' in segment) {\n        // Entered into the middle of an ad cue\n        var adOffset = undefined;\n        var adTotal = undefined;\n\n        // Assumes tag formate to be\n        // #EXT-X-CUE-OUT-CONT:10/30\n\n        var _segment$cueOutCont$split$map = segment.cueOutCont.split('/').map(parseFloat);\n\n        var _segment$cueOutCont$split$map2 = _slicedToArray(_segment$cueOutCont$split$map, 2);\n\n        adOffset = _segment$cueOutCont$split$map2[0];\n        adTotal = _segment$cueOutCont$split$map2[1];\n\n        cue = new _globalWindow2['default'].VTTCue(mediaTime, mediaTime + segment.duration, '');\n        cue.adStartTime = mediaTime - adOffset;\n        cue.adEndTime = cue.adStartTime + adTotal;\n        track.addCue(cue);\n      }\n    }\n    mediaTime += segment.duration;\n  }\n};\n\nexports['default'] = {\n  updateAdCues: updateAdCues,\n  findAdCue: findAdCue\n};\nmodule.exports = exports['default'];\n},{\"global/window\":32}],2:[function(require,module,exports){\n/**\n * @file bin-utils.js\n */\n\n/**\n * convert a TimeRange to text\n *\n * @param {TimeRange} range the timerange to use for conversion\n * @param {Number} i the iterator on the range to convert\n */\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar textRange = function textRange(range, i) {\n  return range.start(i) + '-' + range.end(i);\n};\n\n/**\n * format a number as hex string\n *\n * @param {Number} e The number\n * @param {Number} i the iterator\n */\nvar formatHexString = function formatHexString(e, i) {\n  var value = e.toString(16);\n\n  return '00'.substring(0, 2 - value.length) + value + (i % 2 ? ' ' : '');\n};\nvar formatAsciiString = function formatAsciiString(e) {\n  if (e >= 0x20 && e < 0x7e) {\n    return String.fromCharCode(e);\n  }\n  return '.';\n};\n\n/**\n * Creates an object for sending to a web worker modifying properties that are TypedArrays\n * into a new object with seperated properties for the buffer, byteOffset, and byteLength.\n *\n * @param {Object} message\n *        Object of properties and values to send to the web worker\n * @return {Object}\n *         Modified message with TypedArray values expanded\n * @function createTransferableMessage\n */\nvar createTransferableMessage = function createTransferableMessage(message) {\n  var transferable = {};\n\n  Object.keys(message).forEach(function (key) {\n    var value = message[key];\n\n    if (ArrayBuffer.isView(value)) {\n      transferable[key] = {\n        bytes: value.buffer,\n        byteOffset: value.byteOffset,\n        byteLength: value.byteLength\n      };\n    } else {\n      transferable[key] = value;\n    }\n  });\n\n  return transferable;\n};\n\n/**\n * Returns a unique string identifier for a media initialization\n * segment.\n */\nvar initSegmentId = function initSegmentId(initSegment) {\n  var byterange = initSegment.byterange || {\n    length: Infinity,\n    offset: 0\n  };\n\n  return [byterange.length, byterange.offset, initSegment.resolvedUri].join(',');\n};\n\n/**\n * utils to help dump binary data to the console\n */\nvar utils = {\n  hexDump: function hexDump(data) {\n    var bytes = Array.prototype.slice.call(data);\n    var step = 16;\n    var result = '';\n    var hex = undefined;\n    var ascii = undefined;\n\n    for (var j = 0; j < bytes.length / step; j++) {\n      hex = bytes.slice(j * step, j * step + step).map(formatHexString).join('');\n      ascii = bytes.slice(j * step, j * step + step).map(formatAsciiString).join('');\n      result += hex + ' ' + ascii + '\\n';\n    }\n    return result;\n  },\n  tagDump: function tagDump(tag) {\n    return utils.hexDump(tag.bytes);\n  },\n  textRanges: function textRanges(ranges) {\n    var result = '';\n    var i = undefined;\n\n    for (i = 0; i < ranges.length; i++) {\n      result += textRange(ranges, i) + ' ';\n    }\n    return result;\n  },\n  createTransferableMessage: createTransferableMessage,\n  initSegmentId: initSegmentId\n};\n\nexports['default'] = utils;\nmodule.exports = exports['default'];\n},{}],3:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = {\n  GOAL_BUFFER_LENGTH: 30,\n  MAX_GOAL_BUFFER_LENGTH: 60,\n  GOAL_BUFFER_LENGTH_RATE: 1,\n  // A fudge factor to apply to advertised playlist bitrates to account for\n  // temporary flucations in client bandwidth\n  BANDWIDTH_VARIANCE: 1.2,\n  // How much of the buffer must be filled before we consider upswitching\n  BUFFER_LOW_WATER_LINE: 0,\n  MAX_BUFFER_LOW_WATER_LINE: 30,\n  BUFFER_LOW_WATER_LINE_RATE: 1\n};\nmodule.exports = exports[\"default\"];\n},{}],4:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nvar _globalWindow = require('global/window');\n\nvar _globalWindow2 = _interopRequireDefault(_globalWindow);\n\nvar _aesDecrypter = require('aes-decrypter');\n\nvar _binUtils = require('./bin-utils');\n\n/**\n * Our web worker interface so that things can talk to aes-decrypter\n * that will be running in a web worker. the scope is passed to this by\n * webworkify.\n *\n * @param {Object} self\n *        the scope for the web worker\n */\nvar DecrypterWorker = function DecrypterWorker(self) {\n  self.onmessage = function (event) {\n    var data = event.data;\n    var encrypted = new Uint8Array(data.encrypted.bytes, data.encrypted.byteOffset, data.encrypted.byteLength);\n    var key = new Uint32Array(data.key.bytes, data.key.byteOffset, data.key.byteLength / 4);\n    var iv = new Uint32Array(data.iv.bytes, data.iv.byteOffset, data.iv.byteLength / 4);\n\n    /* eslint-disable no-new, handle-callback-err */\n    new _aesDecrypter.Decrypter(encrypted, key, iv, function (err, bytes) {\n      _globalWindow2['default'].postMessage((0, _binUtils.createTransferableMessage)({\n        source: data.source,\n        decrypted: bytes\n      }), [bytes.buffer]);\n    });\n    /* eslint-enable */\n  };\n};\n\nexports['default'] = function (self) {\n  return new DecrypterWorker(self);\n};\n\nmodule.exports = exports['default'];\n},{\"./bin-utils\":2,\"aes-decrypter\":25,\"global/window\":32}],5:[function(require,module,exports){\n(function (global){\n/**\n * @file master-playlist-controller.js\n */\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\nvar _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar _playlistLoader = require('./playlist-loader');\n\nvar _playlistLoader2 = _interopRequireDefault(_playlistLoader);\n\nvar _playlistJs = require('./playlist.js');\n\nvar _segmentLoader = require('./segment-loader');\n\nvar _segmentLoader2 = _interopRequireDefault(_segmentLoader);\n\nvar _vttSegmentLoader = require('./vtt-segment-loader');\n\nvar _vttSegmentLoader2 = _interopRequireDefault(_vttSegmentLoader);\n\nvar _ranges = require('./ranges');\n\nvar _ranges2 = _interopRequireDefault(_ranges);\n\nvar _videoJs = (typeof window !== \"undefined\" ? window['videojs'] : typeof global !== \"undefined\" ? global['videojs'] : null);\n\nvar _videoJs2 = _interopRequireDefault(_videoJs);\n\nvar _adCueTags = require('./ad-cue-tags');\n\nvar _adCueTags2 = _interopRequireDefault(_adCueTags);\n\nvar _syncController = require('./sync-controller');\n\nvar _syncController2 = _interopRequireDefault(_syncController);\n\nvar _videojsContribMediaSourcesEs5CodecUtils = require('videojs-contrib-media-sources/es5/codec-utils');\n\nvar _webwackify = require('webwackify');\n\nvar _webwackify2 = _interopRequireDefault(_webwackify);\n\nvar _decrypterWorker = require('./decrypter-worker');\n\nvar _decrypterWorker2 = _interopRequireDefault(_decrypterWorker);\n\nvar _config = require('./config');\n\nvar _config2 = _interopRequireDefault(_config);\n\nvar _utilCodecsJs = require('./util/codecs.js');\n\nvar _mediaGroups = require('./media-groups');\n\nvar ABORT_EARLY_BLACKLIST_SECONDS = 60 * 2;\n\nvar Hls = undefined;\n\n// Default codec parameters if none were provided for video and/or audio\nvar defaultCodecs = {\n  videoCodec: 'avc1',\n  videoObjectTypeIndicator: '.4d400d',\n  // AAC-LC\n  audioProfile: '2'\n};\n\n// SegmentLoader stats that need to have each loader's\n// values summed to calculate the final value\nvar loaderStats = ['mediaRequests', 'mediaRequestsAborted', 'mediaRequestsTimedout', 'mediaRequestsErrored', 'mediaTransferDuration', 'mediaBytesTransferred'];\nvar sumLoaderStat = function sumLoaderStat(stat) {\n  return this.audioSegmentLoader_[stat] + this.mainSegmentLoader_[stat];\n};\n\nvar resolveDecrypterWorker = function resolveDecrypterWorker() {\n  var result = undefined;\n\n  try {\n    result = require.resolve('./decrypter-worker');\n  } catch (e) {\n    // no result\n  }\n\n  return result;\n};\n\n/**\n * Replace codecs in the codec string with the old apple-style `avc1.<dd>.<dd>` to the\n * standard `avc1.<hhhhhh>`.\n *\n * @param codecString {String} the codec string\n * @return {String} the codec string with old apple-style codecs replaced\n *\n * @private\n */\nvar mapLegacyAvcCodecs_ = function mapLegacyAvcCodecs_(codecString) {\n  return codecString.replace(/avc1\\.(\\d+)\\.(\\d+)/i, function (match) {\n    return (0, _videojsContribMediaSourcesEs5CodecUtils.translateLegacyCodecs)([match])[0];\n  });\n};\n\nexports.mapLegacyAvcCodecs_ = mapLegacyAvcCodecs_;\n/**\n * Build a media mime-type string from a set of parameters\n * @param {String} type either 'audio' or 'video'\n * @param {String} container either 'mp2t' or 'mp4'\n * @param {Array} codecs an array of codec strings to add\n * @return {String} a valid media mime-type\n */\nvar makeMimeTypeString = function makeMimeTypeString(type, container, codecs) {\n  // The codecs array is filtered so that falsey values are\n  // dropped and don't cause Array#join to create spurious\n  // commas\n  return type + '/' + container + '; codecs=\"' + codecs.filter(function (c) {\n    return !!c;\n  }).join(', ') + '\"';\n};\n\n/**\n * Returns the type container based on information in the playlist\n * @param {Playlist} media the current media playlist\n * @return {String} a valid media container type\n */\nvar getContainerType = function getContainerType(media) {\n  // An initialization segment means the media playlist is an iframe\n  // playlist or is using the mp4 container. We don't currently\n  // support iframe playlists, so assume this is signalling mp4\n  // fragments.\n  if (media.segments && media.segments.length && media.segments[0].map) {\n    return 'mp4';\n  }\n  return 'mp2t';\n};\n\n/**\n * Returns a set of codec strings parsed from the playlist or the default\n * codec strings if no codecs were specified in the playlist\n * @param {Playlist} media the current media playlist\n * @return {Object} an object with the video and audio codecs\n */\nvar getCodecs = function getCodecs(media) {\n  // if the codecs were explicitly specified, use them instead of the\n  // defaults\n  var mediaAttributes = media.attributes || {};\n\n  if (mediaAttributes.CODECS) {\n    return (0, _utilCodecsJs.parseCodecs)(mediaAttributes.CODECS);\n  }\n  return defaultCodecs;\n};\n\n/**\n * Calculates the MIME type strings for a working configuration of\n * SourceBuffers to play variant streams in a master playlist. If\n * there is no possible working configuration, an empty array will be\n * returned.\n *\n * @param master {Object} the m3u8 object for the master playlist\n * @param media {Object} the m3u8 object for the variant playlist\n * @return {Array} the MIME type strings. If the array has more than\n * one entry, the first element should be applied to the video\n * SourceBuffer and the second to the audio SourceBuffer.\n *\n * @private\n */\nvar mimeTypesForPlaylist_ = function mimeTypesForPlaylist_(master, media) {\n  var containerType = getContainerType(media);\n  var codecInfo = getCodecs(media);\n  var mediaAttributes = media.attributes || {};\n  // Default condition for a traditional HLS (no demuxed audio/video)\n  var isMuxed = true;\n  var isMaat = false;\n\n  if (!media) {\n    // Not enough information\n    return [];\n  }\n\n  if (master.mediaGroups.AUDIO && mediaAttributes.AUDIO) {\n    var audioGroup = master.mediaGroups.AUDIO[mediaAttributes.AUDIO];\n\n    // Handle the case where we are in a multiple-audio track scenario\n    if (audioGroup) {\n      isMaat = true;\n      // Start with the everything demuxed then...\n      isMuxed = false;\n      // ...check to see if any audio group tracks are muxed (ie. lacking a uri)\n      for (var groupId in audioGroup) {\n        if (!audioGroup[groupId].uri) {\n          isMuxed = true;\n          break;\n        }\n      }\n    }\n  }\n\n  // HLS with multiple-audio tracks must always get an audio codec.\n  // Put another way, there is no way to have a video-only multiple-audio HLS!\n  if (isMaat && !codecInfo.audioProfile) {\n    _videoJs2['default'].log.warn('Multiple audio tracks present but no audio codec string is specified. ' + 'Attempting to use the default audio codec (mp4a.40.2)');\n    codecInfo.audioProfile = defaultCodecs.audioProfile;\n  }\n\n  // Generate the final codec strings from the codec object generated above\n  var codecStrings = {};\n\n  if (codecInfo.videoCodec) {\n    codecStrings.video = '' + codecInfo.videoCodec + codecInfo.videoObjectTypeIndicator;\n  }\n\n  if (codecInfo.audioProfile) {\n    codecStrings.audio = 'mp4a.40.' + codecInfo.audioProfile;\n  }\n\n  // Finally, make and return an array with proper mime-types depending on\n  // the configuration\n  var justAudio = makeMimeTypeString('audio', containerType, [codecStrings.audio]);\n  var justVideo = makeMimeTypeString('video', containerType, [codecStrings.video]);\n  var bothVideoAudio = makeMimeTypeString('video', containerType, [codecStrings.video, codecStrings.audio]);\n\n  if (isMaat) {\n    if (!isMuxed && codecStrings.video) {\n      return [justVideo, justAudio];\n    }\n    // There exists the possiblity that this will return a `video/container`\n    // mime-type for the first entry in the array even when there is only audio.\n    // This doesn't appear to be a problem and simplifies the code.\n    return [bothVideoAudio, justAudio];\n  }\n\n  // If there is ano video codec at all, always just return a single\n  // audio/<container> mime-type\n  if (!codecStrings.video) {\n    return [justAudio];\n  }\n\n  // When not using separate audio media groups, audio and video is\n  // *always* muxed\n  return [bothVideoAudio];\n};\n\nexports.mimeTypesForPlaylist_ = mimeTypesForPlaylist_;\n/**\n * the master playlist controller controller all interactons\n * between playlists and segmentloaders. At this time this mainly\n * involves a master playlist and a series of audio playlists\n * if they are available\n *\n * @class MasterPlaylistController\n * @extends videojs.EventTarget\n */\n\nvar MasterPlaylistController = (function (_videojs$EventTarget) {\n  _inherits(MasterPlaylistController, _videojs$EventTarget);\n\n  function MasterPlaylistController(options) {\n    var _this = this;\n\n    _classCallCheck(this, MasterPlaylistController);\n\n    _get(Object.getPrototypeOf(MasterPlaylistController.prototype), 'constructor', this).call(this);\n\n    var url = options.url;\n    var withCredentials = options.withCredentials;\n    var mode = options.mode;\n    var tech = options.tech;\n    var bandwidth = options.bandwidth;\n    var externHls = options.externHls;\n    var useCueTags = options.useCueTags;\n    var blacklistDuration = options.blacklistDuration;\n    var enableLowInitialPlaylist = options.enableLowInitialPlaylist;\n\n    if (!url) {\n      throw new Error('A non-empty playlist URL is required');\n    }\n\n    Hls = externHls;\n\n    this.withCredentials = withCredentials;\n    this.tech_ = tech;\n    this.hls_ = tech.hls;\n    this.mode_ = mode;\n    this.useCueTags_ = useCueTags;\n    this.blacklistDuration = blacklistDuration;\n    this.enableLowInitialPlaylist = enableLowInitialPlaylist;\n    if (this.useCueTags_) {\n      this.cueTagsTrack_ = this.tech_.addTextTrack('metadata', 'ad-cues');\n      this.cueTagsTrack_.inBandMetadataTrackDispatchType = '';\n    }\n\n    this.requestOptions_ = {\n      withCredentials: this.withCredentials,\n      timeout: null\n    };\n\n    this.mediaTypes_ = (0, _mediaGroups.createMediaTypes)();\n\n    this.mediaSource = new _videoJs2['default'].MediaSource({ mode: mode });\n\n    // load the media source into the player\n    this.mediaSource.addEventListener('sourceopen', this.handleSourceOpen_.bind(this));\n\n    this.seekable_ = _videoJs2['default'].createTimeRanges();\n    this.hasPlayed_ = function () {\n      return false;\n    };\n\n    this.syncController_ = new _syncController2['default'](options);\n    this.segmentMetadataTrack_ = tech.addRemoteTextTrack({\n      kind: 'metadata',\n      label: 'segment-metadata'\n    }, false).track;\n\n    this.decrypter_ = (0, _webwackify2['default'])(_decrypterWorker2['default'], resolveDecrypterWorker());\n\n    var segmentLoaderSettings = {\n      hls: this.hls_,\n      mediaSource: this.mediaSource,\n      currentTime: this.tech_.currentTime.bind(this.tech_),\n      seekable: function seekable() {\n        return _this.seekable();\n      },\n      seeking: function seeking() {\n        return _this.tech_.seeking();\n      },\n      duration: function duration() {\n        return _this.mediaSource.duration;\n      },\n      hasPlayed: function hasPlayed() {\n        return _this.hasPlayed_();\n      },\n      goalBufferLength: function goalBufferLength() {\n        return _this.goalBufferLength();\n      },\n      bandwidth: bandwidth,\n      syncController: this.syncController_,\n      decrypter: this.decrypter_\n    };\n\n    // setup playlist loaders\n    this.masterPlaylistLoader_ = new _playlistLoader2['default'](url, this.hls_, this.withCredentials);\n    this.setupMasterPlaylistLoaderListeners_();\n\n    // setup segment loaders\n    // combined audio/video or just video when alternate audio track is selected\n    this.mainSegmentLoader_ = new _segmentLoader2['default'](_videoJs2['default'].mergeOptions(segmentLoaderSettings, {\n      segmentMetadataTrack: this.segmentMetadataTrack_,\n      loaderType: 'main'\n    }), options);\n\n    // alternate audio track\n    this.audioSegmentLoader_ = new _segmentLoader2['default'](_videoJs2['default'].mergeOptions(segmentLoaderSettings, {\n      loaderType: 'audio'\n    }), options);\n\n    this.subtitleSegmentLoader_ = new _vttSegmentLoader2['default'](_videoJs2['default'].mergeOptions(segmentLoaderSettings, {\n      loaderType: 'vtt'\n    }), options);\n\n    this.setupSegmentLoaderListeners_();\n\n    // Create SegmentLoader stat-getters\n    loaderStats.forEach(function (stat) {\n      _this[stat + '_'] = sumLoaderStat.bind(_this, stat);\n    });\n\n    this.masterPlaylistLoader_.load();\n  }\n\n  /**\n   * Register event handlers on the master playlist loader. A helper\n   * function for construction time.\n   *\n   * @private\n   */\n\n  _createClass(MasterPlaylistController, [{\n    key: 'setupMasterPlaylistLoaderListeners_',\n    value: function setupMasterPlaylistLoaderListeners_() {\n      var _this2 = this;\n\n      this.masterPlaylistLoader_.on('loadedmetadata', function () {\n        var media = _this2.masterPlaylistLoader_.media();\n        var requestTimeout = _this2.masterPlaylistLoader_.targetDuration * 1.5 * 1000;\n\n        // If we don't have any more available playlists, we don't want to\n        // timeout the request.\n        if ((0, _playlistJs.isLowestEnabledRendition)(_this2.masterPlaylistLoader_.master, _this2.masterPlaylistLoader_.media())) {\n          _this2.requestOptions_.timeout = 0;\n        } else {\n          _this2.requestOptions_.timeout = requestTimeout;\n        }\n\n        // if this isn't a live video and preload permits, start\n        // downloading segments\n        if (media.endList && _this2.tech_.preload() !== 'none') {\n          _this2.mainSegmentLoader_.playlist(media, _this2.requestOptions_);\n          _this2.mainSegmentLoader_.load();\n        }\n\n        (0, _mediaGroups.setupMediaGroups)({\n          segmentLoaders: {\n            AUDIO: _this2.audioSegmentLoader_,\n            SUBTITLES: _this2.subtitleSegmentLoader_,\n            main: _this2.mainSegmentLoader_\n          },\n          tech: _this2.tech_,\n          requestOptions: _this2.requestOptions_,\n          masterPlaylistLoader: _this2.masterPlaylistLoader_,\n          mode: _this2.mode_,\n          hls: _this2.hls_,\n          master: _this2.master(),\n          mediaTypes: _this2.mediaTypes_,\n          blacklistCurrentPlaylist: _this2.blacklistCurrentPlaylist.bind(_this2)\n        });\n\n        _this2.triggerPresenceUsage_(_this2.master(), media);\n\n        try {\n          _this2.setupSourceBuffers_();\n        } catch (e) {\n          _videoJs2['default'].log.warn('Failed to create SourceBuffers', e);\n          return _this2.mediaSource.endOfStream('decode');\n        }\n        _this2.setupFirstPlay();\n\n        _this2.trigger('selectedinitialmedia');\n      });\n\n      this.masterPlaylistLoader_.on('loadedplaylist', function () {\n        var updatedPlaylist = _this2.masterPlaylistLoader_.media();\n\n        if (!updatedPlaylist) {\n          var selectedMedia = undefined;\n\n          if (_this2.enableLowInitialPlaylist) {\n            selectedMedia = _this2.selectInitialPlaylist();\n          }\n\n          if (!selectedMedia) {\n            selectedMedia = _this2.selectPlaylist();\n          }\n\n          _this2.initialMedia_ = selectedMedia;\n          _this2.masterPlaylistLoader_.media(_this2.initialMedia_);\n          return;\n        }\n\n        if (_this2.useCueTags_) {\n          _this2.updateAdCues_(updatedPlaylist);\n        }\n\n        // TODO: Create a new event on the PlaylistLoader that signals\n        // that the segments have changed in some way and use that to\n        // update the SegmentLoader instead of doing it twice here and\n        // on `mediachange`\n        _this2.mainSegmentLoader_.playlist(updatedPlaylist, _this2.requestOptions_);\n        _this2.updateDuration();\n\n        // If the player isn't paused, ensure that the segment loader is running,\n        // as it is possible that it was temporarily stopped while waiting for\n        // a playlist (e.g., in case the playlist errored and we re-requested it).\n        if (!_this2.tech_.paused()) {\n          _this2.mainSegmentLoader_.load();\n        }\n\n        if (!updatedPlaylist.endList) {\n          (function () {\n            var addSeekableRange = function addSeekableRange() {\n              var seekable = _this2.seekable();\n\n              if (seekable.length !== 0) {\n                _this2.mediaSource.addSeekableRange_(seekable.start(0), seekable.end(0));\n              }\n            };\n\n            if (_this2.duration() !== Infinity) {\n              (function () {\n                var onDurationchange = function onDurationchange() {\n                  if (_this2.duration() === Infinity) {\n                    addSeekableRange();\n                  } else {\n                    _this2.tech_.one('durationchange', onDurationchange);\n                  }\n                };\n\n                _this2.tech_.one('durationchange', onDurationchange);\n              })();\n            } else {\n              addSeekableRange();\n            }\n          })();\n        }\n      });\n\n      this.masterPlaylistLoader_.on('error', function () {\n        _this2.blacklistCurrentPlaylist(_this2.masterPlaylistLoader_.error);\n      });\n\n      this.masterPlaylistLoader_.on('mediachanging', function () {\n        _this2.mainSegmentLoader_.abort();\n        _this2.mainSegmentLoader_.pause();\n      });\n\n      this.masterPlaylistLoader_.on('mediachange', function () {\n        var media = _this2.masterPlaylistLoader_.media();\n        var requestTimeout = _this2.masterPlaylistLoader_.targetDuration * 1.5 * 1000;\n\n        // If we don't have any more available playlists, we don't want to\n        // timeout the request.\n        if ((0, _playlistJs.isLowestEnabledRendition)(_this2.masterPlaylistLoader_.master, _this2.masterPlaylistLoader_.media())) {\n          _this2.requestOptions_.timeout = 0;\n        } else {\n          _this2.requestOptions_.timeout = requestTimeout;\n        }\n\n        // TODO: Create a new event on the PlaylistLoader that signals\n        // that the segments have changed in some way and use that to\n        // update the SegmentLoader instead of doing it twice here and\n        // on `loadedplaylist`\n        _this2.mainSegmentLoader_.playlist(media, _this2.requestOptions_);\n        _this2.mainSegmentLoader_.load();\n\n        _this2.tech_.trigger({\n          type: 'mediachange',\n          bubbles: true\n        });\n      });\n\n      this.masterPlaylistLoader_.on('playlistunchanged', function () {\n        var updatedPlaylist = _this2.masterPlaylistLoader_.media();\n        var playlistOutdated = _this2.stuckAtPlaylistEnd_(updatedPlaylist);\n\n        if (playlistOutdated) {\n          // Playlist has stopped updating and we're stuck at its end. Try to\n          // blacklist it and switch to another playlist in the hope that that\n          // one is updating (and give the player a chance to re-adjust to the\n          // safe live point).\n          _this2.blacklistCurrentPlaylist({\n            message: 'Playlist no longer updating.'\n          });\n          // useful for monitoring QoS\n          _this2.tech_.trigger('playliststuck');\n        }\n      });\n\n      this.masterPlaylistLoader_.on('renditiondisabled', function () {\n        _this2.tech_.trigger({ type: 'usage', name: 'hls-rendition-disabled' });\n      });\n      this.masterPlaylistLoader_.on('renditionenabled', function () {\n        _this2.tech_.trigger({ type: 'usage', name: 'hls-rendition-enabled' });\n      });\n    }\n\n    /**\n     * A helper function for triggerring presence usage events once per source\n     *\n     * @private\n     */\n  }, {\n    key: 'triggerPresenceUsage_',\n    value: function triggerPresenceUsage_(master, media) {\n      var mediaGroups = master.mediaGroups || {};\n      var defaultDemuxed = true;\n      var audioGroupKeys = Object.keys(mediaGroups.AUDIO);\n\n      for (var mediaGroup in mediaGroups.AUDIO) {\n        for (var label in mediaGroups.AUDIO[mediaGroup]) {\n          var properties = mediaGroups.AUDIO[mediaGroup][label];\n\n          if (!properties.uri) {\n            defaultDemuxed = false;\n          }\n        }\n      }\n\n      if (defaultDemuxed) {\n        this.tech_.trigger({ type: 'usage', name: 'hls-demuxed' });\n      }\n\n      if (Object.keys(mediaGroups.SUBTITLES).length) {\n        this.tech_.trigger({ type: 'usage', name: 'hls-webvtt' });\n      }\n\n      if (Hls.Playlist.isAes(media)) {\n        this.tech_.trigger({ type: 'usage', name: 'hls-aes' });\n      }\n\n      if (Hls.Playlist.isFmp4(media)) {\n        this.tech_.trigger({ type: 'usage', name: 'hls-fmp4' });\n      }\n\n      if (audioGroupKeys.length && Object.keys(mediaGroups.AUDIO[audioGroupKeys[0]]).length > 1) {\n        this.tech_.trigger({ type: 'usage', name: 'hls-alternate-audio' });\n      }\n\n      if (this.useCueTags_) {\n        this.tech_.trigger({ type: 'usage', name: 'hls-playlist-cue-tags' });\n      }\n    }\n\n    /**\n     * Register event handlers on the segment loaders. A helper function\n     * for construction time.\n     *\n     * @private\n     */\n  }, {\n    key: 'setupSegmentLoaderListeners_',\n    value: function setupSegmentLoaderListeners_() {\n      var _this3 = this;\n\n      this.mainSegmentLoader_.on('bandwidthupdate', function () {\n        var nextPlaylist = _this3.selectPlaylist();\n        var currentPlaylist = _this3.masterPlaylistLoader_.media();\n        var buffered = _this3.tech_.buffered();\n        var forwardBuffer = buffered.length ? buffered.end(buffered.length - 1) - _this3.tech_.currentTime() : 0;\n\n        var bufferLowWaterLine = _this3.bufferLowWaterLine();\n\n        // If the playlist is live, then we want to not take low water line into account.\n        // This is because in LIVE, the player plays 3 segments from the end of the\n        // playlist, and if `BUFFER_LOW_WATER_LINE` is greater than the duration availble\n        // in those segments, a viewer will never experience a rendition upswitch.\n        if (!currentPlaylist.endList ||\n        // For the same reason as LIVE, we ignore the low water line when the VOD\n        // duration is below the max potential low water line\n        _this3.duration() < _config2['default'].MAX_BUFFER_LOW_WATER_LINE ||\n        // we want to switch down to lower resolutions quickly to continue playback, but\n        nextPlaylist.attributes.BANDWIDTH < currentPlaylist.attributes.BANDWIDTH ||\n        // ensure we have some buffer before we switch up to prevent us running out of\n        // buffer while loading a higher rendition.\n        forwardBuffer >= bufferLowWaterLine) {\n          _this3.masterPlaylistLoader_.media(nextPlaylist);\n        }\n\n        _this3.tech_.trigger('bandwidthupdate');\n      });\n      this.mainSegmentLoader_.on('progress', function () {\n        _this3.trigger('progress');\n      });\n\n      this.mainSegmentLoader_.on('error', function () {\n        _this3.blacklistCurrentPlaylist(_this3.mainSegmentLoader_.error());\n      });\n\n      this.mainSegmentLoader_.on('syncinfoupdate', function () {\n        _this3.onSyncInfoUpdate_();\n      });\n\n      this.mainSegmentLoader_.on('timestampoffset', function () {\n        _this3.tech_.trigger({ type: 'usage', name: 'hls-timestamp-offset' });\n      });\n      this.audioSegmentLoader_.on('syncinfoupdate', function () {\n        _this3.onSyncInfoUpdate_();\n      });\n\n      this.mainSegmentLoader_.on('ended', function () {\n        _this3.onEndOfStream();\n      });\n\n      this.mainSegmentLoader_.on('earlyabort', function () {\n        _this3.blacklistCurrentPlaylist({\n          message: 'Aborted early because there isn\\'t enough bandwidth to complete the ' + 'request without rebuffering.'\n        }, ABORT_EARLY_BLACKLIST_SECONDS);\n      });\n\n      this.mainSegmentLoader_.on('reseteverything', function () {\n        // If playing an MTS stream, a videojs.MediaSource is listening for\n        // hls-reset to reset caption parsing state in the transmuxer\n        _this3.tech_.trigger('hls-reset');\n      });\n\n      this.mainSegmentLoader_.on('segmenttimemapping', function (event) {\n        // If playing an MTS stream in html, a videojs.MediaSource is listening for\n        // hls-segment-time-mapping update its internal mapping of stream to display time\n        _this3.tech_.trigger({\n          type: 'hls-segment-time-mapping',\n          mapping: event.mapping\n        });\n      });\n\n      this.audioSegmentLoader_.on('ended', function () {\n        _this3.onEndOfStream();\n      });\n    }\n  }, {\n    key: 'mediaSecondsLoaded_',\n    value: function mediaSecondsLoaded_() {\n      return Math.max(this.audioSegmentLoader_.mediaSecondsLoaded + this.mainSegmentLoader_.mediaSecondsLoaded);\n    }\n\n    /**\n     * Call load on our SegmentLoaders\n     */\n  }, {\n    key: 'load',\n    value: function load() {\n      this.mainSegmentLoader_.load();\n      if (this.mediaTypes_.AUDIO.activePlaylistLoader) {\n        this.audioSegmentLoader_.load();\n      }\n      if (this.mediaTypes_.SUBTITLES.activePlaylistLoader) {\n        this.subtitleSegmentLoader_.load();\n      }\n    }\n\n    /**\n     * Re-tune playback quality level for the current player\n     * conditions. This method may perform destructive actions, like\n     * removing already buffered content, to readjust the currently\n     * active playlist quickly.\n     *\n     * @private\n     */\n  }, {\n    key: 'fastQualityChange_',\n    value: function fastQualityChange_() {\n      var media = this.selectPlaylist();\n\n      if (media !== this.masterPlaylistLoader_.media()) {\n        this.masterPlaylistLoader_.media(media);\n\n        this.mainSegmentLoader_.resetLoader();\n        // don't need to reset audio as it is reset when media changes\n      }\n    }\n\n    /**\n     * Begin playback.\n     */\n  }, {\n    key: 'play',\n    value: function play() {\n      if (this.setupFirstPlay()) {\n        return;\n      }\n\n      if (this.tech_.ended()) {\n        this.tech_.setCurrentTime(0);\n      }\n\n      if (this.hasPlayed_()) {\n        this.load();\n      }\n\n      var seekable = this.tech_.seekable();\n\n      // if the viewer has paused and we fell out of the live window,\n      // seek forward to the live point\n      if (this.tech_.duration() === Infinity) {\n        if (this.tech_.currentTime() < seekable.start(0)) {\n          return this.tech_.setCurrentTime(seekable.end(seekable.length - 1));\n        }\n      }\n    }\n\n    /**\n     * Seek to the latest media position if this is a live video and the\n     * player and video are loaded and initialized.\n     */\n  }, {\n    key: 'setupFirstPlay',\n    value: function setupFirstPlay() {\n      var _this4 = this;\n\n      var media = this.masterPlaylistLoader_.media();\n\n      // Check that everything is ready to begin buffering for the first call to play\n      //  If 1) there is no active media\n      //     2) the player is paused\n      //     3) the first play has already been setup\n      // then exit early\n      if (!media || this.tech_.paused() || this.hasPlayed_()) {\n        return false;\n      }\n\n      // when the video is a live stream\n      if (!media.endList) {\n        var _ret3 = (function () {\n          var seekable = _this4.seekable();\n\n          if (!seekable.length) {\n            // without a seekable range, the player cannot seek to begin buffering at the live\n            // point\n            return {\n              v: false\n            };\n          }\n\n          if (_videoJs2['default'].browser.IE_VERSION && _this4.mode_ === 'html5' && _this4.tech_.readyState() === 0) {\n            // IE11 throws an InvalidStateError if you try to set currentTime while the\n            // readyState is 0, so it must be delayed until the tech fires loadedmetadata.\n            _this4.tech_.one('loadedmetadata', function () {\n              _this4.trigger('firstplay');\n              _this4.tech_.setCurrentTime(seekable.end(0));\n              _this4.hasPlayed_ = function () {\n                return true;\n              };\n            });\n\n            return {\n              v: false\n            };\n          }\n\n          // trigger firstplay to inform the source handler to ignore the next seek event\n          _this4.trigger('firstplay');\n          // seek to the live point\n          _this4.tech_.setCurrentTime(seekable.end(0));\n        })();\n\n        if (typeof _ret3 === 'object') return _ret3.v;\n      }\n\n      this.hasPlayed_ = function () {\n        return true;\n      };\n      // we can begin loading now that everything is ready\n      this.load();\n      return true;\n    }\n\n    /**\n     * handle the sourceopen event on the MediaSource\n     *\n     * @private\n     */\n  }, {\n    key: 'handleSourceOpen_',\n    value: function handleSourceOpen_() {\n      // Only attempt to create the source buffer if none already exist.\n      // handleSourceOpen is also called when we are \"re-opening\" a source buffer\n      // after `endOfStream` has been called (in response to a seek for instance)\n      try {\n        this.setupSourceBuffers_();\n      } catch (e) {\n        _videoJs2['default'].log.warn('Failed to create Source Buffers', e);\n        return this.mediaSource.endOfStream('decode');\n      }\n\n      // if autoplay is enabled, begin playback. This is duplicative of\n      // code in video.js but is required because play() must be invoked\n      // *after* the media source has opened.\n      if (this.tech_.autoplay()) {\n        var playPromise = this.tech_.play();\n\n        // Catch/silence error when a pause interrupts a play request\n        // on browsers which return a promise\n        if (typeof playPromise !== 'undefined' && typeof playPromise.then === 'function') {\n          playPromise.then(null, function (e) {});\n        }\n      }\n\n      this.trigger('sourceopen');\n    }\n\n    /**\n     * Calls endOfStream on the media source when all active stream types have called\n     * endOfStream\n     *\n     * @param {string} streamType\n     *        Stream type of the segment loader that called endOfStream\n     * @private\n     */\n  }, {\n    key: 'onEndOfStream',\n    value: function onEndOfStream() {\n      var isEndOfStream = this.mainSegmentLoader_.ended_;\n\n      if (this.mediaTypes_.AUDIO.activePlaylistLoader) {\n        // if the audio playlist loader exists, then alternate audio is active, so we need\n        // to wait for both the main and audio segment loaders to call endOfStream\n        isEndOfStream = isEndOfStream && this.audioSegmentLoader_.ended_;\n      }\n\n      if (isEndOfStream) {\n        this.mediaSource.endOfStream();\n      }\n    }\n\n    /**\n     * Check if a playlist has stopped being updated\n     * @param {Object} playlist the media playlist object\n     * @return {boolean} whether the playlist has stopped being updated or not\n     */\n  }, {\n    key: 'stuckAtPlaylistEnd_',\n    value: function stuckAtPlaylistEnd_(playlist) {\n      var seekable = this.seekable();\n\n      if (!seekable.length) {\n        // playlist doesn't have enough information to determine whether we are stuck\n        return false;\n      }\n\n      var expired = this.syncController_.getExpiredTime(playlist, this.mediaSource.duration);\n\n      if (expired === null) {\n        return false;\n      }\n\n      // does not use the safe live end to calculate playlist end, since we\n      // don't want to say we are stuck while there is still content\n      var absolutePlaylistEnd = Hls.Playlist.playlistEnd(playlist, expired);\n      var currentTime = this.tech_.currentTime();\n      var buffered = this.tech_.buffered();\n\n      if (!buffered.length) {\n        // return true if the playhead reached the absolute end of the playlist\n        return absolutePlaylistEnd - currentTime <= _ranges2['default'].SAFE_TIME_DELTA;\n      }\n      var bufferedEnd = buffered.end(buffered.length - 1);\n\n      // return true if there is too little buffer left and buffer has reached absolute\n      // end of playlist\n      return bufferedEnd - currentTime <= _ranges2['default'].SAFE_TIME_DELTA && absolutePlaylistEnd - bufferedEnd <= _ranges2['default'].SAFE_TIME_DELTA;\n    }\n\n    /**\n     * Blacklists a playlist when an error occurs for a set amount of time\n     * making it unavailable for selection by the rendition selection algorithm\n     * and then forces a new playlist (rendition) selection.\n     *\n     * @param {Object=} error an optional error that may include the playlist\n     * to blacklist\n     * @param {Number=} blacklistDuration an optional number of seconds to blacklist the\n     * playlist\n     */\n  }, {\n    key: 'blacklistCurrentPlaylist',\n    value: function blacklistCurrentPlaylist(error, blacklistDuration) {\n      if (error === undefined) error = {};\n\n      var currentPlaylist = undefined;\n      var nextPlaylist = undefined;\n\n      // If the `error` was generated by the playlist loader, it will contain\n      // the playlist we were trying to load (but failed) and that should be\n      // blacklisted instead of the currently selected playlist which is likely\n      // out-of-date in this scenario\n      currentPlaylist = error.playlist || this.masterPlaylistLoader_.media();\n\n      blacklistDuration = blacklistDuration || error.blacklistDuration || this.blacklistDuration;\n\n      // If there is no current playlist, then an error occurred while we were\n      // trying to load the master OR while we were disposing of the tech\n      if (!currentPlaylist) {\n        this.error = error;\n\n        try {\n          return this.mediaSource.endOfStream('network');\n        } catch (e) {\n          return this.trigger('error');\n        }\n      }\n\n      var isFinalRendition = this.masterPlaylistLoader_.master.playlists.filter(_playlistJs.isEnabled).length === 1;\n\n      if (isFinalRendition) {\n        // Never blacklisting this playlist because it's final rendition\n        _videoJs2['default'].log.warn('Problem encountered with the current ' + 'HLS playlist. Trying again since it is the final playlist.');\n\n        this.tech_.trigger('retryplaylist');\n        return this.masterPlaylistLoader_.load(isFinalRendition);\n      }\n      // Blacklist this playlist\n      currentPlaylist.excludeUntil = Date.now() + blacklistDuration * 1000;\n      this.tech_.trigger('blacklistplaylist');\n      this.tech_.trigger({ type: 'usage', name: 'hls-rendition-blacklisted' });\n\n      // Select a new playlist\n      nextPlaylist = this.selectPlaylist();\n      _videoJs2['default'].log.warn('Problem encountered with the current HLS playlist.' + (error.message ? ' ' + error.message : '') + ' Switching to another playlist.');\n\n      return this.masterPlaylistLoader_.media(nextPlaylist);\n    }\n\n    /**\n     * Pause all segment loaders\n     */\n  }, {\n    key: 'pauseLoading',\n    value: function pauseLoading() {\n      this.mainSegmentLoader_.pause();\n      if (this.mediaTypes_.AUDIO.activePlaylistLoader) {\n        this.audioSegmentLoader_.pause();\n      }\n      if (this.mediaTypes_.SUBTITLES.activePlaylistLoader) {\n        this.subtitleSegmentLoader_.pause();\n      }\n    }\n\n    /**\n     * set the current time on all segment loaders\n     *\n     * @param {TimeRange} currentTime the current time to set\n     * @return {TimeRange} the current time\n     */\n  }, {\n    key: 'setCurrentTime',\n    value: function setCurrentTime(currentTime) {\n      var buffered = _ranges2['default'].findRange(this.tech_.buffered(), currentTime);\n\n      if (!(this.masterPlaylistLoader_ && this.masterPlaylistLoader_.media())) {\n        // return immediately if the metadata is not ready yet\n        return 0;\n      }\n\n      // it's clearly an edge-case but don't thrown an error if asked to\n      // seek within an empty playlist\n      if (!this.masterPlaylistLoader_.media().segments) {\n        return 0;\n      }\n\n      // In flash playback, the segment loaders should be reset on every seek, even\n      // in buffer seeks. If the seek location is already buffered, continue buffering as\n      // usual\n      if (buffered && buffered.length && this.mode_ !== 'flash') {\n        return currentTime;\n      }\n\n      // cancel outstanding requests so we begin buffering at the new\n      // location\n      this.mainSegmentLoader_.resetEverything();\n      this.mainSegmentLoader_.abort();\n      if (this.mediaTypes_.AUDIO.activePlaylistLoader) {\n        this.audioSegmentLoader_.resetEverything();\n        this.audioSegmentLoader_.abort();\n      }\n      if (this.mediaTypes_.SUBTITLES.activePlaylistLoader) {\n        this.subtitleSegmentLoader_.resetEverything();\n        this.subtitleSegmentLoader_.abort();\n      }\n\n      // start segment loader loading in case they are paused\n      this.load();\n    }\n\n    /**\n     * get the current duration\n     *\n     * @return {TimeRange} the duration\n     */\n  }, {\n    key: 'duration',\n    value: function duration() {\n      if (!this.masterPlaylistLoader_) {\n        return 0;\n      }\n\n      if (this.mediaSource) {\n        return this.mediaSource.duration;\n      }\n\n      return Hls.Playlist.duration(this.masterPlaylistLoader_.media());\n    }\n\n    /**\n     * check the seekable range\n     *\n     * @return {TimeRange} the seekable range\n     */\n  }, {\n    key: 'seekable',\n    value: function seekable() {\n      return this.seekable_;\n    }\n  }, {\n    key: 'onSyncInfoUpdate_',\n    value: function onSyncInfoUpdate_() {\n      var mainSeekable = undefined;\n      var audioSeekable = undefined;\n\n      if (!this.masterPlaylistLoader_) {\n        return;\n      }\n\n      var media = this.masterPlaylistLoader_.media();\n\n      if (!media) {\n        return;\n      }\n\n      var expired = this.syncController_.getExpiredTime(media, this.mediaSource.duration);\n\n      if (expired === null) {\n        // not enough information to update seekable\n        return;\n      }\n\n      mainSeekable = Hls.Playlist.seekable(media, expired);\n\n      if (mainSeekable.length === 0) {\n        return;\n      }\n\n      if (this.mediaTypes_.AUDIO.activePlaylistLoader) {\n        media = this.mediaTypes_.AUDIO.activePlaylistLoader.media();\n        expired = this.syncController_.getExpiredTime(media, this.mediaSource.duration);\n\n        if (expired === null) {\n          return;\n        }\n\n        audioSeekable = Hls.Playlist.seekable(media, expired);\n\n        if (audioSeekable.length === 0) {\n          return;\n        }\n      }\n\n      if (!audioSeekable) {\n        // seekable has been calculated based on buffering video data so it\n        // can be returned directly\n        this.seekable_ = mainSeekable;\n      } else if (audioSeekable.start(0) > mainSeekable.end(0) || mainSeekable.start(0) > audioSeekable.end(0)) {\n        // seekables are pretty far off, rely on main\n        this.seekable_ = mainSeekable;\n      } else {\n        this.seekable_ = _videoJs2['default'].createTimeRanges([[audioSeekable.start(0) > mainSeekable.start(0) ? audioSeekable.start(0) : mainSeekable.start(0), audioSeekable.end(0) < mainSeekable.end(0) ? audioSeekable.end(0) : mainSeekable.end(0)]]);\n      }\n\n      this.tech_.trigger('seekablechanged');\n    }\n\n    /**\n     * Update the player duration\n     */\n  }, {\n    key: 'updateDuration',\n    value: function updateDuration() {\n      var _this5 = this;\n\n      var oldDuration = this.mediaSource.duration;\n      var newDuration = Hls.Playlist.duration(this.masterPlaylistLoader_.media());\n      var buffered = this.tech_.buffered();\n      var setDuration = function setDuration() {\n        _this5.mediaSource.duration = newDuration;\n        _this5.tech_.trigger('durationchange');\n\n        _this5.mediaSource.removeEventListener('sourceopen', setDuration);\n      };\n\n      if (buffered.length > 0) {\n        newDuration = Math.max(newDuration, buffered.end(buffered.length - 1));\n      }\n\n      // if the duration has changed, invalidate the cached value\n      if (oldDuration !== newDuration) {\n        // update the duration\n        if (this.mediaSource.readyState !== 'open') {\n          this.mediaSource.addEventListener('sourceopen', setDuration);\n        } else {\n          setDuration();\n        }\n      }\n    }\n\n    /**\n     * dispose of the MasterPlaylistController and everything\n     * that it controls\n     */\n  }, {\n    key: 'dispose',\n    value: function dispose() {\n      var _this6 = this;\n\n      this.decrypter_.terminate();\n      this.masterPlaylistLoader_.dispose();\n      this.mainSegmentLoader_.dispose();\n\n      ['AUDIO', 'SUBTITLES'].forEach(function (type) {\n        var groups = _this6.mediaTypes_[type].groups;\n\n        for (var id in groups) {\n          groups[id].forEach(function (group) {\n            if (group.playlistLoader) {\n              group.playlistLoader.dispose();\n            }\n          });\n        }\n      });\n\n      this.audioSegmentLoader_.dispose();\n      this.subtitleSegmentLoader_.dispose();\n    }\n\n    /**\n     * return the master playlist object if we have one\n     *\n     * @return {Object} the master playlist object that we parsed\n     */\n  }, {\n    key: 'master',\n    value: function master() {\n      return this.masterPlaylistLoader_.master;\n    }\n\n    /**\n     * return the currently selected playlist\n     *\n     * @return {Object} the currently selected playlist object that we parsed\n     */\n  }, {\n    key: 'media',\n    value: function media() {\n      // playlist loader will not return media if it has not been fully loaded\n      return this.masterPlaylistLoader_.media() || this.initialMedia_;\n    }\n\n    /**\n     * setup our internal source buffers on our segment Loaders\n     *\n     * @private\n     */\n  }, {\n    key: 'setupSourceBuffers_',\n    value: function setupSourceBuffers_() {\n      var media = this.masterPlaylistLoader_.media();\n      var mimeTypes = undefined;\n\n      // wait until a media playlist is available and the Media Source is\n      // attached\n      if (!media || this.mediaSource.readyState !== 'open') {\n        return;\n      }\n\n      mimeTypes = mimeTypesForPlaylist_(this.masterPlaylistLoader_.master, media);\n      if (mimeTypes.length < 1) {\n        this.error = 'No compatible SourceBuffer configuration for the variant stream:' + media.resolvedUri;\n        return this.mediaSource.endOfStream('decode');\n      }\n      this.mainSegmentLoader_.mimeType(mimeTypes[0]);\n      if (mimeTypes[1]) {\n        this.audioSegmentLoader_.mimeType(mimeTypes[1]);\n      }\n\n      // exclude any incompatible variant streams from future playlist\n      // selection\n      this.excludeIncompatibleVariants_(media);\n    }\n\n    /**\n     * Blacklist playlists that are known to be codec or\n     * stream-incompatible with the SourceBuffer configuration. For\n     * instance, Media Source Extensions would cause the video element to\n     * stall waiting for video data if you switched from a variant with\n     * video and audio to an audio-only one.\n     *\n     * @param {Object} media a media playlist compatible with the current\n     * set of SourceBuffers. Variants in the current master playlist that\n     * do not appear to have compatible codec or stream configurations\n     * will be excluded from the default playlist selection algorithm\n     * indefinitely.\n     * @private\n     */\n  }, {\n    key: 'excludeIncompatibleVariants_',\n    value: function excludeIncompatibleVariants_(media) {\n      var master = this.masterPlaylistLoader_.master;\n      var codecCount = 2;\n      var videoCodec = null;\n      var codecs = undefined;\n\n      if (media.attributes.CODECS) {\n        codecs = (0, _utilCodecsJs.parseCodecs)(media.attributes.CODECS);\n        videoCodec = codecs.videoCodec;\n        codecCount = codecs.codecCount;\n      }\n      master.playlists.forEach(function (variant) {\n        var variantCodecs = {\n          codecCount: 2,\n          videoCodec: null\n        };\n\n        if (variant.attributes.CODECS) {\n          var codecString = variant.attributes.CODECS;\n\n          variantCodecs = (0, _utilCodecsJs.parseCodecs)(codecString);\n\n          if (window.MediaSource && window.MediaSource.isTypeSupported && !window.MediaSource.isTypeSupported('video/mp4; codecs=\"' + mapLegacyAvcCodecs_(codecString) + '\"')) {\n            variant.excludeUntil = Infinity;\n          }\n        }\n\n        // if the streams differ in the presence or absence of audio or\n        // video, they are incompatible\n        if (variantCodecs.codecCount !== codecCount) {\n          variant.excludeUntil = Infinity;\n        }\n\n        // if h.264 is specified on the current playlist, some flavor of\n        // it must be specified on all compatible variants\n        if (variantCodecs.videoCodec !== videoCodec) {\n          variant.excludeUntil = Infinity;\n        }\n      });\n    }\n  }, {\n    key: 'updateAdCues_',\n    value: function updateAdCues_(media) {\n      var offset = 0;\n      var seekable = this.seekable();\n\n      if (seekable.length) {\n        offset = seekable.start(0);\n      }\n\n      _adCueTags2['default'].updateAdCues(media, this.cueTagsTrack_, offset);\n    }\n\n    /**\n     * Calculates the desired forward buffer length based on current time\n     *\n     * @return {Number} Desired forward buffer length in seconds\n     */\n  }, {\n    key: 'goalBufferLength',\n    value: function goalBufferLength() {\n      var currentTime = this.tech_.currentTime();\n      var initial = _config2['default'].GOAL_BUFFER_LENGTH;\n      var rate = _config2['default'].GOAL_BUFFER_LENGTH_RATE;\n      var max = Math.max(initial, _config2['default'].MAX_GOAL_BUFFER_LENGTH);\n\n      return Math.min(initial + currentTime * rate, max);\n    }\n\n    /**\n     * Calculates the desired buffer low water line based on current time\n     *\n     * @return {Number} Desired buffer low water line in seconds\n     */\n  }, {\n    key: 'bufferLowWaterLine',\n    value: function bufferLowWaterLine() {\n      var currentTime = this.tech_.currentTime();\n      var initial = _config2['default'].BUFFER_LOW_WATER_LINE;\n      var rate = _config2['default'].BUFFER_LOW_WATER_LINE_RATE;\n      var max = Math.max(initial, _config2['default'].MAX_BUFFER_LOW_WATER_LINE);\n\n      return Math.min(initial + currentTime * rate, max);\n    }\n  }]);\n\n  return MasterPlaylistController;\n})(_videoJs2['default'].EventTarget);\n\nexports.MasterPlaylistController = MasterPlaylistController;\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{\"./ad-cue-tags\":1,\"./config\":3,\"./decrypter-worker\":4,\"./media-groups\":6,\"./playlist-loader\":9,\"./playlist.js\":11,\"./ranges\":12,\"./segment-loader\":16,\"./sync-controller\":18,\"./util/codecs.js\":19,\"./vtt-segment-loader\":20,\"videojs-contrib-media-sources/es5/codec-utils\":65,\"webwackify\":76}],6:[function(require,module,exports){\n(function (global){\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nvar _videoJs = (typeof window !== \"undefined\" ? window['videojs'] : typeof global !== \"undefined\" ? global['videojs'] : null);\n\nvar _videoJs2 = _interopRequireDefault(_videoJs);\n\nvar _playlistLoader = require('./playlist-loader');\n\nvar _playlistLoader2 = _interopRequireDefault(_playlistLoader);\n\nvar noop = function noop() {};\n\n/**\n * Convert the properties of an HLS track into an audioTrackKind.\n *\n * @private\n */\nvar audioTrackKind_ = function audioTrackKind_(properties) {\n  var kind = properties['default'] ? 'main' : 'alternative';\n\n  if (properties.characteristics && properties.characteristics.indexOf('public.accessibility.describes-video') >= 0) {\n    kind = 'main-desc';\n  }\n\n  return kind;\n};\n\n/**\n * Pause provided segment loader and playlist loader if active\n *\n * @param {SegmentLoader} segmentLoader\n *        SegmentLoader to pause\n * @param {Object} mediaType\n *        Active media type\n * @function stopLoaders\n */\nvar stopLoaders = function stopLoaders(segmentLoader, mediaType) {\n  segmentLoader.abort();\n  segmentLoader.pause();\n\n  if (mediaType && mediaType.activePlaylistLoader) {\n    mediaType.activePlaylistLoader.pause();\n    mediaType.activePlaylistLoader = null;\n  }\n};\n\nexports.stopLoaders = stopLoaders;\n/**\n * Start loading provided segment loader and playlist loader\n *\n * @param {PlaylistLoader} playlistLoader\n *        PlaylistLoader to start loading\n * @param {Object} mediaType\n *        Active media type\n * @function startLoaders\n */\nvar startLoaders = function startLoaders(playlistLoader, mediaType) {\n  // Segment loader will be started after `loadedmetadata` or `loadedplaylist` from the\n  // playlist loader\n  mediaType.activePlaylistLoader = playlistLoader;\n  playlistLoader.load();\n};\n\nexports.startLoaders = startLoaders;\n/**\n * Returns a function to be called when the media group changes. It performs a\n * non-destructive (preserve the buffer) resync of the SegmentLoader. This is because a\n * change of group is merely a rendition switch of the same content at another encoding,\n * rather than a change of content, such as switching audio from English to Spanish.\n *\n * @param {String} type\n *        MediaGroup type\n * @param {Object} settings\n *        Object containing required information for media groups\n * @return {Function}\n *         Handler for a non-destructive resync of SegmentLoader when the active media\n *         group changes.\n * @function onGroupChanged\n */\nvar onGroupChanged = function onGroupChanged(type, settings) {\n  return function () {\n    var _settings$segmentLoaders = settings.segmentLoaders;\n    var segmentLoader = _settings$segmentLoaders[type];\n    var mainSegmentLoader = _settings$segmentLoaders.main;\n    var mediaType = settings.mediaTypes[type];\n\n    var activeTrack = mediaType.activeTrack();\n    var activeGroup = mediaType.activeGroup(activeTrack);\n    var previousActiveLoader = mediaType.activePlaylistLoader;\n\n    stopLoaders(segmentLoader, mediaType);\n\n    if (!activeGroup) {\n      // there is no group active\n      return;\n    }\n\n    if (!activeGroup.playlistLoader) {\n      if (previousActiveLoader) {\n        // The previous group had a playlist loader but the new active group does not\n        // this means we are switching from demuxed to muxed audio. In this case we want to\n        // do a destructive reset of the main segment loader and not restart the audio\n        // loaders.\n        mainSegmentLoader.resetEverything();\n      }\n      return;\n    }\n\n    // Non-destructive resync\n    segmentLoader.resyncLoader();\n\n    startLoaders(activeGroup.playlistLoader, mediaType);\n  };\n};\n\nexports.onGroupChanged = onGroupChanged;\n/**\n * Returns a function to be called when the media track changes. It performs a\n * destructive reset of the SegmentLoader to ensure we start loading as close to\n * currentTime as possible.\n *\n * @param {String} type\n *        MediaGroup type\n * @param {Object} settings\n *        Object containing required information for media groups\n * @return {Function}\n *         Handler for a destructive reset of SegmentLoader when the active media\n *         track changes.\n * @function onTrackChanged\n */\nvar onTrackChanged = function onTrackChanged(type, settings) {\n  return function () {\n    var _settings$segmentLoaders2 = settings.segmentLoaders;\n    var segmentLoader = _settings$segmentLoaders2[type];\n    var mainSegmentLoader = _settings$segmentLoaders2.main;\n    var mediaType = settings.mediaTypes[type];\n\n    var activeTrack = mediaType.activeTrack();\n    var activeGroup = mediaType.activeGroup(activeTrack);\n    var previousActiveLoader = mediaType.activePlaylistLoader;\n\n    stopLoaders(segmentLoader, mediaType);\n\n    if (!activeGroup) {\n      // there is no group active so we do not want to restart loaders\n      return;\n    }\n\n    if (!activeGroup.playlistLoader) {\n      // when switching from demuxed audio/video to muxed audio/video (noted by no playlist\n      // loader for the audio group), we want to do a destructive reset of the main segment\n      // loader and not restart the audio loaders\n      mainSegmentLoader.resetEverything();\n      return;\n    }\n\n    if (previousActiveLoader === activeGroup.playlistLoader) {\n      // Nothing has actually changed. This can happen because track change events can fire\n      // multiple times for a \"single\" change. One for enabling the new active track, and\n      // one for disabling the track that was active\n      startLoaders(activeGroup.playlistLoader, mediaType);\n      return;\n    }\n\n    if (segmentLoader.track) {\n      // For WebVTT, set the new text track in the segmentloader\n      segmentLoader.track(activeTrack);\n    }\n\n    // destructive reset\n    segmentLoader.resetEverything();\n\n    startLoaders(activeGroup.playlistLoader, mediaType);\n  };\n};\n\nexports.onTrackChanged = onTrackChanged;\nvar onError = {\n  /**\n   * Returns a function to be called when a SegmentLoader or PlaylistLoader encounters\n   * an error.\n   *\n   * @param {String} type\n   *        MediaGroup type\n   * @param {Object} settings\n   *        Object containing required information for media groups\n   * @return {Function}\n   *         Error handler. Logs warning (or error if the playlist is blacklisted) to\n   *         console and switches back to default audio track.\n   * @function onError.AUDIO\n   */\n  AUDIO: function AUDIO(type, settings) {\n    return function () {\n      var segmentLoader = settings.segmentLoaders[type];\n      var mediaType = settings.mediaTypes[type];\n      var blacklistCurrentPlaylist = settings.blacklistCurrentPlaylist;\n\n      stopLoaders(segmentLoader, mediaType);\n\n      // switch back to default audio track\n      var activeTrack = mediaType.activeTrack();\n      var activeGroup = mediaType.activeGroup();\n      var id = (activeGroup.filter(function (group) {\n        return group['default'];\n      })[0] || activeGroup[0]).id;\n      var defaultTrack = mediaType.tracks[id];\n\n      if (activeTrack === defaultTrack) {\n        // Default track encountered an error. All we can do now is blacklist the current\n        // rendition and hope another will switch audio groups\n        blacklistCurrentPlaylist({\n          message: 'Problem encountered loading the default audio track.'\n        });\n        return;\n      }\n\n      _videoJs2['default'].log.warn('Problem encountered loading the alternate audio track.' + 'Switching back to default.');\n\n      for (var trackId in mediaType.tracks) {\n        mediaType.tracks[trackId].enabled = mediaType.tracks[trackId] === defaultTrack;\n      }\n\n      mediaType.onTrackChanged();\n    };\n  },\n  /**\n   * Returns a function to be called when a SegmentLoader or PlaylistLoader encounters\n   * an error.\n   *\n   * @param {String} type\n   *        MediaGroup type\n   * @param {Object} settings\n   *        Object containing required information for media groups\n   * @return {Function}\n   *         Error handler. Logs warning to console and disables the active subtitle track\n   * @function onError.SUBTITLES\n   */\n  SUBTITLES: function SUBTITLES(type, settings) {\n    return function () {\n      var segmentLoader = settings.segmentLoaders[type];\n      var mediaType = settings.mediaTypes[type];\n\n      _videoJs2['default'].log.warn('Problem encountered loading the subtitle track.' + 'Disabling subtitle track.');\n\n      stopLoaders(segmentLoader, mediaType);\n\n      var track = mediaType.activeTrack();\n\n      if (track) {\n        track.mode = 'disabled';\n      }\n\n      mediaType.onTrackChanged();\n    };\n  }\n};\n\nexports.onError = onError;\nvar setupListeners = {\n  /**\n   * Setup event listeners for audio playlist loader\n   *\n   * @param {String} type\n   *        MediaGroup type\n   * @param {PlaylistLoader|null} playlistLoader\n   *        PlaylistLoader to register listeners on\n   * @param {Object} settings\n   *        Object containing required information for media groups\n   * @function setupListeners.AUDIO\n   */\n  AUDIO: function AUDIO(type, playlistLoader, settings) {\n    if (!playlistLoader) {\n      // no playlist loader means audio will be muxed with the video\n      return;\n    }\n\n    var tech = settings.tech;\n    var requestOptions = settings.requestOptions;\n    var segmentLoader = settings.segmentLoaders[type];\n\n    playlistLoader.on('loadedmetadata', function () {\n      var media = playlistLoader.media();\n\n      segmentLoader.playlist(media, requestOptions);\n\n      // if the video is already playing, or if this isn't a live video and preload\n      // permits, start downloading segments\n      if (!tech.paused() || media.endList && tech.preload() !== 'none') {\n        segmentLoader.load();\n      }\n    });\n\n    playlistLoader.on('loadedplaylist', function () {\n      segmentLoader.playlist(playlistLoader.media(), requestOptions);\n\n      // If the player isn't paused, ensure that the segment loader is running\n      if (!tech.paused()) {\n        segmentLoader.load();\n      }\n    });\n\n    playlistLoader.on('error', onError[type](type, settings));\n  },\n  /**\n   * Setup event listeners for subtitle playlist loader\n   *\n   * @param {String} type\n   *        MediaGroup type\n   * @param {PlaylistLoader|null} playlistLoader\n   *        PlaylistLoader to register listeners on\n   * @param {Object} settings\n   *        Object containing required information for media groups\n   * @function setupListeners.SUBTITLES\n   */\n  SUBTITLES: function SUBTITLES(type, playlistLoader, settings) {\n    var tech = settings.tech;\n    var requestOptions = settings.requestOptions;\n    var segmentLoader = settings.segmentLoaders[type];\n    var mediaType = settings.mediaTypes[type];\n\n    playlistLoader.on('loadedmetadata', function () {\n      var media = playlistLoader.media();\n\n      segmentLoader.playlist(media, requestOptions);\n      segmentLoader.track(mediaType.activeTrack());\n\n      // if the video is already playing, or if this isn't a live video and preload\n      // permits, start downloading segments\n      if (!tech.paused() || media.endList && tech.preload() !== 'none') {\n        segmentLoader.load();\n      }\n    });\n\n    playlistLoader.on('loadedplaylist', function () {\n      segmentLoader.playlist(playlistLoader.media(), requestOptions);\n\n      // If the player isn't paused, ensure that the segment loader is running\n      if (!tech.paused()) {\n        segmentLoader.load();\n      }\n    });\n\n    playlistLoader.on('error', onError[type](type, settings));\n  }\n};\n\nexports.setupListeners = setupListeners;\nvar initialize = {\n  /**\n   * Setup PlaylistLoaders and AudioTracks for the audio groups\n   *\n   * @param {String} type\n   *        MediaGroup type\n   * @param {Object} settings\n   *        Object containing required information for media groups\n   * @function initialize.AUDIO\n   */\n  'AUDIO': function AUDIO(type, settings) {\n    var mode = settings.mode;\n    var hls = settings.hls;\n    var segmentLoader = settings.segmentLoaders[type];\n    var withCredentials = settings.requestOptions.withCredentials;\n    var mediaGroups = settings.master.mediaGroups;\n    var _settings$mediaTypes$type = settings.mediaTypes[type];\n    var groups = _settings$mediaTypes$type.groups;\n    var tracks = _settings$mediaTypes$type.tracks;\n\n    // force a default if we have none or we are not\n    // in html5 mode (the only mode to support more than one\n    // audio track)\n    if (!mediaGroups[type] || Object.keys(mediaGroups[type]).length === 0 || mode !== 'html5') {\n      mediaGroups[type] = { main: { 'default': { 'default': true } } };\n    }\n\n    for (var groupId in mediaGroups[type]) {\n      if (!groups[groupId]) {\n        groups[groupId] = [];\n      }\n\n      for (var variantLabel in mediaGroups[type][groupId]) {\n        var properties = mediaGroups[type][groupId][variantLabel];\n        var playlistLoader = undefined;\n\n        if (properties.resolvedUri) {\n          playlistLoader = new _playlistLoader2['default'](properties.resolvedUri, hls, withCredentials);\n        } else {\n          // no resolvedUri means the audio is muxed with the video when using this\n          // audio track\n          playlistLoader = null;\n        }\n\n        properties = _videoJs2['default'].mergeOptions({ id: variantLabel, playlistLoader: playlistLoader }, properties);\n\n        setupListeners[type](type, properties.playlistLoader, settings);\n\n        groups[groupId].push(properties);\n\n        if (typeof tracks[variantLabel] === 'undefined') {\n          var track = new _videoJs2['default'].AudioTrack({\n            id: variantLabel,\n            kind: audioTrackKind_(properties),\n            enabled: false,\n            language: properties.language,\n            'default': properties['default'],\n            label: variantLabel\n          });\n\n          tracks[variantLabel] = track;\n        }\n      }\n    }\n\n    // setup single error event handler for the segment loader\n    segmentLoader.on('error', onError[type](type, settings));\n  },\n  /**\n   * Setup PlaylistLoaders and TextTracks for the subtitle groups\n   *\n   * @param {String} type\n   *        MediaGroup type\n   * @param {Object} settings\n   *        Object containing required information for media groups\n   * @function initialize.SUBTITLES\n   */\n  'SUBTITLES': function SUBTITLES(type, settings) {\n    var tech = settings.tech;\n    var hls = settings.hls;\n    var segmentLoader = settings.segmentLoaders[type];\n    var withCredentials = settings.requestOptions.withCredentials;\n    var mediaGroups = settings.master.mediaGroups;\n    var _settings$mediaTypes$type2 = settings.mediaTypes[type];\n    var groups = _settings$mediaTypes$type2.groups;\n    var tracks = _settings$mediaTypes$type2.tracks;\n\n    for (var groupId in mediaGroups[type]) {\n      if (!groups[groupId]) {\n        groups[groupId] = [];\n      }\n\n      for (var variantLabel in mediaGroups[type][groupId]) {\n        if (mediaGroups[type][groupId][variantLabel].forced) {\n          // Subtitle playlists with the forced attribute are not selectable in Safari.\n          // According to Apple's HLS Authoring Specification:\n          //   If content has forced subtitles and regular subtitles in a given language,\n          //   the regular subtitles track in that language MUST contain both the forced\n          //   subtitles and the regular subtitles for that language.\n          // Because of this requirement and that Safari does not add forced subtitles,\n          // forced subtitles are skipped here to maintain consistent experience across\n          // all platforms\n          continue;\n        }\n\n        var properties = mediaGroups[type][groupId][variantLabel];\n\n        properties = _videoJs2['default'].mergeOptions({\n          id: variantLabel,\n          playlistLoader: new _playlistLoader2['default'](properties.resolvedUri, hls, withCredentials)\n        }, properties);\n\n        setupListeners[type](type, properties.playlistLoader, settings);\n\n        groups[groupId].push(properties);\n\n        if (typeof tracks[variantLabel] === 'undefined') {\n          var track = tech.addRemoteTextTrack({\n            id: variantLabel,\n            kind: 'subtitles',\n            enabled: false,\n            language: properties.language,\n            label: variantLabel\n          }, false).track;\n\n          tracks[variantLabel] = track;\n        }\n      }\n    }\n\n    // setup single error event handler for the segment loader\n    segmentLoader.on('error', onError[type](type, settings));\n  },\n  /**\n   * Setup TextTracks for the closed-caption groups\n   *\n   * @param {String} type\n   *        MediaGroup type\n   * @param {Object} settings\n   *        Object containing required information for media groups\n   * @function initialize['CLOSED-CAPTIONS']\n   */\n  'CLOSED-CAPTIONS': function CLOSEDCAPTIONS(type, settings) {\n    var tech = settings.tech;\n    var mediaGroups = settings.master.mediaGroups;\n    var _settings$mediaTypes$type3 = settings.mediaTypes[type];\n    var groups = _settings$mediaTypes$type3.groups;\n    var tracks = _settings$mediaTypes$type3.tracks;\n\n    for (var groupId in mediaGroups[type]) {\n      if (!groups[groupId]) {\n        groups[groupId] = [];\n      }\n\n      for (var variantLabel in mediaGroups[type][groupId]) {\n        var properties = mediaGroups[type][groupId][variantLabel];\n\n        // We only support CEA608 captions for now, so ignore anything that\n        // doesn't use a CCx INSTREAM-ID\n        if (!properties.instreamId.match(/CC\\d/)) {\n          continue;\n        }\n\n        // No PlaylistLoader is required for Closed-Captions because the captions are\n        // embedded within the video stream\n        groups[groupId].push(_videoJs2['default'].mergeOptions({ id: variantLabel }, properties));\n\n        if (typeof tracks[variantLabel] === 'undefined') {\n          var track = tech.addRemoteTextTrack({\n            id: properties.instreamId,\n            kind: 'captions',\n            enabled: false,\n            language: properties.language,\n            label: variantLabel\n          }, false).track;\n\n          tracks[variantLabel] = track;\n        }\n      }\n    }\n  }\n};\n\nexports.initialize = initialize;\n/**\n * Returns a function used to get the active group of the provided type\n *\n * @param {String} type\n *        MediaGroup type\n * @param {Object} settings\n *        Object containing required information for media groups\n * @return {Function}\n *         Function that returns the active media group for the provided type. Takes an\n *         optional parameter {TextTrack} track. If no track is provided, a list of all\n *         variants in the group, otherwise the variant corresponding to the provided\n *         track is returned.\n * @function activeGroup\n */\nvar activeGroup = function activeGroup(type, settings) {\n  return function (track) {\n    var masterPlaylistLoader = settings.masterPlaylistLoader;\n    var groups = settings.mediaTypes[type].groups;\n\n    var media = masterPlaylistLoader.media();\n\n    if (!media) {\n      return null;\n    }\n\n    var variants = null;\n\n    if (media.attributes[type]) {\n      variants = groups[media.attributes[type]];\n    }\n\n    variants = variants || groups.main;\n\n    if (typeof track === 'undefined') {\n      return variants;\n    }\n\n    if (track === null) {\n      // An active track was specified so a corresponding group is expected. track === null\n      // means no track is currently active so there is no corresponding group\n      return null;\n    }\n\n    return variants.filter(function (props) {\n      return props.id === track.id;\n    })[0] || null;\n  };\n};\n\nexports.activeGroup = activeGroup;\nvar activeTrack = {\n  /**\n   * Returns a function used to get the active track of type provided\n   *\n   * @param {String} type\n   *        MediaGroup type\n   * @param {Object} settings\n   *        Object containing required information for media groups\n   * @return {Function}\n   *         Function that returns the active media track for the provided type. Returns\n   *         null if no track is active\n   * @function activeTrack.AUDIO\n   */\n  AUDIO: function AUDIO(type, settings) {\n    return function () {\n      var tracks = settings.mediaTypes[type].tracks;\n\n      for (var id in tracks) {\n        if (tracks[id].enabled) {\n          return tracks[id];\n        }\n      }\n\n      return null;\n    };\n  },\n  /**\n   * Returns a function used to get the active track of type provided\n   *\n   * @param {String} type\n   *        MediaGroup type\n   * @param {Object} settings\n   *        Object containing required information for media groups\n   * @return {Function}\n   *         Function that returns the active media track for the provided type. Returns\n   *         null if no track is active\n   * @function activeTrack.SUBTITLES\n   */\n  SUBTITLES: function SUBTITLES(type, settings) {\n    return function () {\n      var tracks = settings.mediaTypes[type].tracks;\n\n      for (var id in tracks) {\n        if (tracks[id].mode === 'showing') {\n          return tracks[id];\n        }\n      }\n\n      return null;\n    };\n  }\n};\n\nexports.activeTrack = activeTrack;\n/**\n * Setup PlaylistLoaders and Tracks for media groups (Audio, Subtitles,\n * Closed-Captions) specified in the master manifest.\n *\n * @param {Object} settings\n *        Object containing required information for setting up the media groups\n * @param {SegmentLoader} settings.segmentLoaders.AUDIO\n *        Audio segment loader\n * @param {SegmentLoader} settings.segmentLoaders.SUBTITLES\n *        Subtitle segment loader\n * @param {SegmentLoader} settings.segmentLoaders.main\n *        Main segment loader\n * @param {Tech} settings.tech\n *        The tech of the player\n * @param {Object} settings.requestOptions\n *        XHR request options used by the segment loaders\n * @param {PlaylistLoader} settings.masterPlaylistLoader\n *        PlaylistLoader for the master source\n * @param {String} mode\n *        Mode of the hls source handler. Can be 'auto', 'html5', or 'flash'\n * @param {HlsHandler} settings.hls\n *        HLS SourceHandler\n * @param {Object} settings.master\n *        The parsed master manifest\n * @param {Object} settings.mediaTypes\n *        Object to store the loaders, tracks, and utility methods for each media type\n * @param {Function} settings.blacklistCurrentPlaylist\n *        Blacklists the current rendition and forces a rendition switch.\n * @function setupMediaGroups\n */\nvar setupMediaGroups = function setupMediaGroups(settings) {\n  ['AUDIO', 'SUBTITLES', 'CLOSED-CAPTIONS'].forEach(function (type) {\n    initialize[type](type, settings);\n  });\n\n  var mediaTypes = settings.mediaTypes;\n  var masterPlaylistLoader = settings.masterPlaylistLoader;\n  var tech = settings.tech;\n  var hls = settings.hls;\n\n  // setup active group and track getters and change event handlers\n  ['AUDIO', 'SUBTITLES'].forEach(function (type) {\n    mediaTypes[type].activeGroup = activeGroup(type, settings);\n    mediaTypes[type].activeTrack = activeTrack[type](type, settings);\n    mediaTypes[type].onGroupChanged = onGroupChanged(type, settings);\n    mediaTypes[type].onTrackChanged = onTrackChanged(type, settings);\n  });\n\n  // DO NOT enable the default subtitle or caption track.\n  // DO enable the default audio track\n  var audioGroup = mediaTypes.AUDIO.activeGroup();\n  var groupId = (audioGroup.filter(function (group) {\n    return group['default'];\n  })[0] || audioGroup[0]).id;\n\n  mediaTypes.AUDIO.tracks[groupId].enabled = true;\n  mediaTypes.AUDIO.onTrackChanged();\n\n  masterPlaylistLoader.on('mediachange', function () {\n    ['AUDIO', 'SUBTITLES'].forEach(function (type) {\n      return mediaTypes[type].onGroupChanged();\n    });\n  });\n\n  // custom audio track change event handler for usage event\n  var onAudioTrackChanged = function onAudioTrackChanged() {\n    mediaTypes.AUDIO.onTrackChanged();\n    tech.trigger({ type: 'usage', name: 'hls-audio-change' });\n  };\n\n  tech.audioTracks().addEventListener('change', onAudioTrackChanged);\n  tech.remoteTextTracks().addEventListener('change', mediaTypes.SUBTITLES.onTrackChanged);\n\n  hls.on('dispose', function () {\n    tech.audioTracks().removeEventListener('change', onAudioTrackChanged);\n    tech.remoteTextTracks().removeEventListener('change', mediaTypes.SUBTITLES.onTrackChanged);\n  });\n\n  // clear existing audio tracks and add the ones we just created\n  tech.clearTracks('audio');\n\n  for (var id in mediaTypes.AUDIO.tracks) {\n    tech.audioTracks().addTrack(mediaTypes.AUDIO.tracks[id]);\n  }\n};\n\nexports.setupMediaGroups = setupMediaGroups;\n/**\n * Creates skeleton object used to store the loaders, tracks, and utility methods for each\n * media type\n *\n * @return {Object}\n *         Object to store the loaders, tracks, and utility methods for each media type\n * @function createMediaTypes\n */\nvar createMediaTypes = function createMediaTypes() {\n  var mediaTypes = {};\n\n  ['AUDIO', 'SUBTITLES', 'CLOSED-CAPTIONS'].forEach(function (type) {\n    mediaTypes[type] = {\n      groups: {},\n      tracks: {},\n      activePlaylistLoader: null,\n      activeGroup: noop,\n      activeTrack: noop,\n      onGroupChanged: noop,\n      onTrackChanged: noop\n    };\n  });\n\n  return mediaTypes;\n};\nexports.createMediaTypes = createMediaTypes;\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{\"./playlist-loader\":9}],7:[function(require,module,exports){\n(function (global){\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nvar _videoJs = (typeof window !== \"undefined\" ? window['videojs'] : typeof global !== \"undefined\" ? global['videojs'] : null);\n\nvar _videoJs2 = _interopRequireDefault(_videoJs);\n\nvar _binUtils = require('./bin-utils');\n\nvar REQUEST_ERRORS = {\n  FAILURE: 2,\n  TIMEOUT: -101,\n  ABORTED: -102\n};\n\nexports.REQUEST_ERRORS = REQUEST_ERRORS;\n/**\n * Turns segment byterange into a string suitable for use in\n * HTTP Range requests\n *\n * @param {Object} byterange - an object with two values defining the start and end\n *                             of a byte-range\n */\nvar byterangeStr = function byterangeStr(byterange) {\n  var byterangeStart = undefined;\n  var byterangeEnd = undefined;\n\n  // `byterangeEnd` is one less than `offset + length` because the HTTP range\n  // header uses inclusive ranges\n  byterangeEnd = byterange.offset + byterange.length - 1;\n  byterangeStart = byterange.offset;\n  return 'bytes=' + byterangeStart + '-' + byterangeEnd;\n};\n\n/**\n * Defines headers for use in the xhr request for a particular segment.\n *\n * @param {Object} segment - a simplified copy of the segmentInfo object\n *                           from SegmentLoader\n */\nvar segmentXhrHeaders = function segmentXhrHeaders(segment) {\n  var headers = {};\n\n  if (segment.byterange) {\n    headers.Range = byterangeStr(segment.byterange);\n  }\n  return headers;\n};\n\n/**\n * Abort all requests\n *\n * @param {Object} activeXhrs - an object that tracks all XHR requests\n */\nvar abortAll = function abortAll(activeXhrs) {\n  activeXhrs.forEach(function (xhr) {\n    xhr.abort();\n  });\n};\n\n/**\n * Gather important bandwidth stats once a request has completed\n *\n * @param {Object} request - the XHR request from which to gather stats\n */\nvar getRequestStats = function getRequestStats(request) {\n  return {\n    bandwidth: request.bandwidth,\n    bytesReceived: request.bytesReceived || 0,\n    roundTripTime: request.roundTripTime || 0\n  };\n};\n\n/**\n * If possible gather bandwidth stats as a request is in\n * progress\n *\n * @param {Event} progressEvent - an event object from an XHR's progress event\n */\nvar getProgressStats = function getProgressStats(progressEvent) {\n  var request = progressEvent.target;\n  var roundTripTime = Date.now() - request.requestTime;\n  var stats = {\n    bandwidth: Infinity,\n    bytesReceived: 0,\n    roundTripTime: roundTripTime || 0\n  };\n\n  stats.bytesReceived = progressEvent.loaded;\n  // This can result in Infinity if stats.roundTripTime is 0 but that is ok\n  // because we should only use bandwidth stats on progress to determine when\n  // abort a request early due to insufficient bandwidth\n  stats.bandwidth = Math.floor(stats.bytesReceived / stats.roundTripTime * 8 * 1000);\n\n  return stats;\n};\n\n/**\n * Handle all error conditions in one place and return an object\n * with all the information\n *\n * @param {Error|null} error - if non-null signals an error occured with the XHR\n * @param {Object} request -  the XHR request that possibly generated the error\n */\nvar handleErrors = function handleErrors(error, request) {\n  if (request.timedout) {\n    return {\n      status: request.status,\n      message: 'HLS request timed-out at URL: ' + request.uri,\n      code: REQUEST_ERRORS.TIMEOUT,\n      xhr: request\n    };\n  }\n\n  if (request.aborted) {\n    return {\n      status: request.status,\n      message: 'HLS request aborted at URL: ' + request.uri,\n      code: REQUEST_ERRORS.ABORTED,\n      xhr: request\n    };\n  }\n\n  if (error) {\n    return {\n      status: request.status,\n      message: 'HLS request errored at URL: ' + request.uri,\n      code: REQUEST_ERRORS.FAILURE,\n      xhr: request\n    };\n  }\n\n  return null;\n};\n\n/**\n * Handle responses for key data and convert the key data to the correct format\n * for the decryption step later\n *\n * @param {Object} segment - a simplified copy of the segmentInfo object\n *                           from SegmentLoader\n * @param {Function} finishProcessingFn - a callback to execute to continue processing\n *                                        this request\n */\nvar handleKeyResponse = function handleKeyResponse(segment, finishProcessingFn) {\n  return function (error, request) {\n    var response = request.response;\n    var errorObj = handleErrors(error, request);\n\n    if (errorObj) {\n      return finishProcessingFn(errorObj, segment);\n    }\n\n    if (response.byteLength !== 16) {\n      return finishProcessingFn({\n        status: request.status,\n        message: 'Invalid HLS key at URL: ' + request.uri,\n        code: REQUEST_ERRORS.FAILURE,\n        xhr: request\n      }, segment);\n    }\n\n    var view = new DataView(response);\n\n    segment.key.bytes = new Uint32Array([view.getUint32(0), view.getUint32(4), view.getUint32(8), view.getUint32(12)]);\n    return finishProcessingFn(null, segment);\n  };\n};\n\n/**\n * Handle init-segment responses\n *\n * @param {Object} segment - a simplified copy of the segmentInfo object\n *                           from SegmentLoader\n * @param {Function} finishProcessingFn - a callback to execute to continue processing\n *                                        this request\n */\nvar handleInitSegmentResponse = function handleInitSegmentResponse(segment, finishProcessingFn) {\n  return function (error, request) {\n    var response = request.response;\n    var errorObj = handleErrors(error, request);\n\n    if (errorObj) {\n      return finishProcessingFn(errorObj, segment);\n    }\n\n    // stop processing if received empty content\n    if (response.byteLength === 0) {\n      return finishProcessingFn({\n        status: request.status,\n        message: 'Empty HLS segment content at URL: ' + request.uri,\n        code: REQUEST_ERRORS.FAILURE,\n        xhr: request\n      }, segment);\n    }\n\n    segment.map.bytes = new Uint8Array(request.response);\n    return finishProcessingFn(null, segment);\n  };\n};\n\n/**\n * Response handler for segment-requests being sure to set the correct\n * property depending on whether the segment is encryped or not\n * Also records and keeps track of stats that are used for ABR purposes\n *\n * @param {Object} segment - a simplified copy of the segmentInfo object\n *                           from SegmentLoader\n * @param {Function} finishProcessingFn - a callback to execute to continue processing\n *                                        this request\n */\nvar handleSegmentResponse = function handleSegmentResponse(segment, finishProcessingFn) {\n  return function (error, request) {\n    var response = request.response;\n    var errorObj = handleErrors(error, request);\n\n    if (errorObj) {\n      return finishProcessingFn(errorObj, segment);\n    }\n\n    // stop processing if received empty content\n    if (response.byteLength === 0) {\n      return finishProcessingFn({\n        status: request.status,\n        message: 'Empty HLS segment content at URL: ' + request.uri,\n        code: REQUEST_ERRORS.FAILURE,\n        xhr: request\n      }, segment);\n    }\n\n    segment.stats = getRequestStats(request);\n\n    if (segment.key) {\n      segment.encryptedBytes = new Uint8Array(request.response);\n    } else {\n      segment.bytes = new Uint8Array(request.response);\n    }\n\n    return finishProcessingFn(null, segment);\n  };\n};\n\n/**\n * Decrypt the segment via the decryption web worker\n *\n * @param {WebWorker} decrypter - a WebWorker interface to AES-128 decryption routines\n * @param {Object} segment - a simplified copy of the segmentInfo object\n *                           from SegmentLoader\n * @param {Function} doneFn - a callback that is executed after decryption has completed\n */\nvar decryptSegment = function decryptSegment(decrypter, segment, doneFn) {\n  var decryptionHandler = function decryptionHandler(event) {\n    if (event.data.source === segment.requestId) {\n      decrypter.removeEventListener('message', decryptionHandler);\n      var decrypted = event.data.decrypted;\n\n      segment.bytes = new Uint8Array(decrypted.bytes, decrypted.byteOffset, decrypted.byteLength);\n      return doneFn(null, segment);\n    }\n  };\n\n  decrypter.addEventListener('message', decryptionHandler);\n\n  // this is an encrypted segment\n  // incrementally decrypt the segment\n  decrypter.postMessage((0, _binUtils.createTransferableMessage)({\n    source: segment.requestId,\n    encrypted: segment.encryptedBytes,\n    key: segment.key.bytes,\n    iv: segment.key.iv\n  }), [segment.encryptedBytes.buffer, segment.key.bytes.buffer]);\n};\n\n/**\n * The purpose of this function is to get the most pertinent error from the\n * array of errors.\n * For instance if a timeout and two aborts occur, then the aborts were\n * likely triggered by the timeout so return that error object.\n */\nvar getMostImportantError = function getMostImportantError(errors) {\n  return errors.reduce(function (prev, err) {\n    return err.code > prev.code ? err : prev;\n  });\n};\n\n/**\n * This function waits for all XHRs to finish (with either success or failure)\n * before continueing processing via it's callback. The function gathers errors\n * from each request into a single errors array so that the error status for\n * each request can be examined later.\n *\n * @param {Object} activeXhrs - an object that tracks all XHR requests\n * @param {WebWorker} decrypter - a WebWorker interface to AES-128 decryption routines\n * @param {Function} doneFn - a callback that is executed after all resources have been\n *                            downloaded and any decryption completed\n */\nvar waitForCompletion = function waitForCompletion(activeXhrs, decrypter, doneFn) {\n  var errors = [];\n  var count = 0;\n\n  return function (error, segment) {\n    if (error) {\n      // If there are errors, we have to abort any outstanding requests\n      abortAll(activeXhrs);\n      errors.push(error);\n    }\n    count += 1;\n\n    if (count === activeXhrs.length) {\n      // Keep track of when *all* of the requests have completed\n      segment.endOfAllRequests = Date.now();\n\n      if (errors.length > 0) {\n        var worstError = getMostImportantError(errors);\n\n        return doneFn(worstError, segment);\n      }\n      if (segment.encryptedBytes) {\n        return decryptSegment(decrypter, segment, doneFn);\n      }\n      // Otherwise, everything is ready just continue\n      return doneFn(null, segment);\n    }\n  };\n};\n\n/**\n * Simple progress event callback handler that gathers some stats before\n * executing a provided callback with the `segment` object\n *\n * @param {Object} segment - a simplified copy of the segmentInfo object\n *                           from SegmentLoader\n * @param {Function} progressFn - a callback that is executed each time a progress event\n *                                is received\n * @param {Event} event - the progress event object from XMLHttpRequest\n */\nvar handleProgress = function handleProgress(segment, progressFn) {\n  return function (event) {\n    segment.stats = _videoJs2['default'].mergeOptions(segment.stats, getProgressStats(event));\n\n    // record the time that we receive the first byte of data\n    if (!segment.stats.firstBytesReceivedAt && segment.stats.bytesReceived) {\n      segment.stats.firstBytesReceivedAt = Date.now();\n    }\n\n    return progressFn(event, segment);\n  };\n};\n\n/**\n * Load all resources and does any processing necessary for a media-segment\n *\n * Features:\n *   decrypts the media-segment if it has a key uri and an iv\n *   aborts *all* requests if *any* one request fails\n *\n * The segment object, at minimum, has the following format:\n * {\n *   resolvedUri: String,\n *   [byterange]: {\n *     offset: Number,\n *     length: Number\n *   },\n *   [key]: {\n *     resolvedUri: String\n *     [byterange]: {\n *       offset: Number,\n *       length: Number\n *     },\n *     iv: {\n *       bytes: Uint32Array\n *     }\n *   },\n *   [map]: {\n *     resolvedUri: String,\n *     [byterange]: {\n *       offset: Number,\n *       length: Number\n *     },\n *     [bytes]: Uint8Array\n *   }\n * }\n * ...where [name] denotes optional properties\n *\n * @param {Function} xhr - an instance of the xhr wrapper in xhr.js\n * @param {Object} xhrOptions - the base options to provide to all xhr requests\n * @param {WebWorker} decryptionWorker - a WebWorker interface to AES-128\n *                                       decryption routines\n * @param {Object} segment - a simplified copy of the segmentInfo object\n *                           from SegmentLoader\n * @param {Function} progressFn - a callback that receives progress events from the main\n *                                segment's xhr request\n * @param {Function} doneFn - a callback that is executed only once all requests have\n *                            succeeded or failed\n * @returns {Function} a function that, when invoked, immediately aborts all\n *                     outstanding requests\n */\nvar mediaSegmentRequest = function mediaSegmentRequest(xhr, xhrOptions, decryptionWorker, segment, progressFn, doneFn) {\n  var activeXhrs = [];\n  var finishProcessingFn = waitForCompletion(activeXhrs, decryptionWorker, doneFn);\n\n  // optionally, request the decryption key\n  if (segment.key) {\n    var keyRequestOptions = _videoJs2['default'].mergeOptions(xhrOptions, {\n      uri: segment.key.resolvedUri,\n      responseType: 'arraybuffer'\n    });\n    var keyRequestCallback = handleKeyResponse(segment, finishProcessingFn);\n    var keyXhr = xhr(keyRequestOptions, keyRequestCallback);\n\n    activeXhrs.push(keyXhr);\n  }\n\n  // optionally, request the associated media init segment\n  if (segment.map && !segment.map.bytes) {\n    var initSegmentOptions = _videoJs2['default'].mergeOptions(xhrOptions, {\n      uri: segment.map.resolvedUri,\n      responseType: 'arraybuffer',\n      headers: segmentXhrHeaders(segment.map)\n    });\n    var initSegmentRequestCallback = handleInitSegmentResponse(segment, finishProcessingFn);\n    var initSegmentXhr = xhr(initSegmentOptions, initSegmentRequestCallback);\n\n    activeXhrs.push(initSegmentXhr);\n  }\n\n  var segmentRequestOptions = _videoJs2['default'].mergeOptions(xhrOptions, {\n    uri: segment.resolvedUri,\n    responseType: 'arraybuffer',\n    headers: segmentXhrHeaders(segment)\n  });\n  var segmentRequestCallback = handleSegmentResponse(segment, finishProcessingFn);\n  var segmentXhr = xhr(segmentRequestOptions, segmentRequestCallback);\n\n  segmentXhr.addEventListener('progress', handleProgress(segment, progressFn));\n  activeXhrs.push(segmentXhr);\n\n  return function () {\n    return abortAll(activeXhrs);\n  };\n};\nexports.mediaSegmentRequest = mediaSegmentRequest;\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{\"./bin-utils\":2}],8:[function(require,module,exports){\n(function (global){\n/**\n * @file playback-watcher.js\n *\n * Playback starts, and now my watch begins. It shall not end until my death. I shall\n * take no wait, hold no uncleared timeouts, father no bad seeks. I shall wear no crowns\n * and win no glory. I shall live and die at my post. I am the corrector of the underflow.\n * I am the watcher of gaps. I am the shield that guards the realms of seekable. I pledge\n * my life and honor to the Playback Watch, for this Player and all the Players to come.\n */\n\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\nvar _globalWindow = require('global/window');\n\nvar _globalWindow2 = _interopRequireDefault(_globalWindow);\n\nvar _ranges = require('./ranges');\n\nvar _ranges2 = _interopRequireDefault(_ranges);\n\nvar _videoJs = (typeof window !== \"undefined\" ? window['videojs'] : typeof global !== \"undefined\" ? global['videojs'] : null);\n\nvar _videoJs2 = _interopRequireDefault(_videoJs);\n\n// Set of events that reset the playback-watcher time check logic and clear the timeout\nvar timerCancelEvents = ['seeking', 'seeked', 'pause', 'playing', 'error'];\n\n/**\n * @class PlaybackWatcher\n */\n\nvar PlaybackWatcher = (function () {\n  /**\n   * Represents an PlaybackWatcher object.\n   * @constructor\n   * @param {object} options an object that includes the tech and settings\n   */\n\n  function PlaybackWatcher(options) {\n    var _this = this;\n\n    _classCallCheck(this, PlaybackWatcher);\n\n    this.tech_ = options.tech;\n    this.seekable = options.seekable;\n\n    this.consecutiveUpdates = 0;\n    this.lastRecordedTime = null;\n    this.timer_ = null;\n    this.checkCurrentTimeTimeout_ = null;\n\n    if (options.debug) {\n      this.logger_ = _videoJs2['default'].log.bind(_videoJs2['default'], 'playback-watcher ->');\n    }\n    this.logger_('initialize');\n\n    var canPlayHandler = function canPlayHandler() {\n      return _this.monitorCurrentTime_();\n    };\n    var waitingHandler = function waitingHandler() {\n      return _this.techWaiting_();\n    };\n    var cancelTimerHandler = function cancelTimerHandler() {\n      return _this.cancelTimer_();\n    };\n    var fixesBadSeeksHandler = function fixesBadSeeksHandler() {\n      return _this.fixesBadSeeks_();\n    };\n\n    this.tech_.on('seekablechanged', fixesBadSeeksHandler);\n    this.tech_.on('waiting', waitingHandler);\n    this.tech_.on(timerCancelEvents, cancelTimerHandler);\n    this.tech_.on('canplay', canPlayHandler);\n\n    // Define the dispose function to clean up our events\n    this.dispose = function () {\n      _this.logger_('dispose');\n      _this.tech_.off('seekablechanged', fixesBadSeeksHandler);\n      _this.tech_.off('waiting', waitingHandler);\n      _this.tech_.off(timerCancelEvents, cancelTimerHandler);\n      _this.tech_.off('canplay', canPlayHandler);\n      if (_this.checkCurrentTimeTimeout_) {\n        _globalWindow2['default'].clearTimeout(_this.checkCurrentTimeTimeout_);\n      }\n      _this.cancelTimer_();\n    };\n  }\n\n  /**\n   * Periodically check current time to see if playback stopped\n   *\n   * @private\n   */\n\n  _createClass(PlaybackWatcher, [{\n    key: 'monitorCurrentTime_',\n    value: function monitorCurrentTime_() {\n      this.checkCurrentTime_();\n\n      if (this.checkCurrentTimeTimeout_) {\n        _globalWindow2['default'].clearTimeout(this.checkCurrentTimeTimeout_);\n      }\n\n      // 42 = 24 fps // 250 is what Webkit uses // FF uses 15\n      this.checkCurrentTimeTimeout_ = _globalWindow2['default'].setTimeout(this.monitorCurrentTime_.bind(this), 250);\n    }\n\n    /**\n     * The purpose of this function is to emulate the \"waiting\" event on\n     * browsers that do not emit it when they are waiting for more\n     * data to continue playback\n     *\n     * @private\n     */\n  }, {\n    key: 'checkCurrentTime_',\n    value: function checkCurrentTime_() {\n      if (this.tech_.seeking() && this.fixesBadSeeks_()) {\n        this.consecutiveUpdates = 0;\n        this.lastRecordedTime = this.tech_.currentTime();\n        return;\n      }\n\n      if (this.tech_.paused() || this.tech_.seeking()) {\n        return;\n      }\n\n      var currentTime = this.tech_.currentTime();\n      var buffered = this.tech_.buffered();\n\n      if (this.lastRecordedTime === currentTime && (!buffered.length || currentTime + _ranges2['default'].SAFE_TIME_DELTA >= buffered.end(buffered.length - 1))) {\n        // If current time is at the end of the final buffered region, then any playback\n        // stall is most likely caused by buffering in a low bandwidth environment. The tech\n        // should fire a `waiting` event in this scenario, but due to browser and tech\n        // inconsistencies (e.g. The Flash tech does not fire a `waiting` event when the end\n        // of the buffer is reached and has fallen off the live window). Calling\n        // `techWaiting_` here allows us to simulate responding to a native `waiting` event\n        // when the tech fails to emit one.\n        return this.techWaiting_();\n      }\n\n      if (this.consecutiveUpdates >= 5 && currentTime === this.lastRecordedTime) {\n        this.consecutiveUpdates++;\n        this.waiting_();\n      } else if (currentTime === this.lastRecordedTime) {\n        this.consecutiveUpdates++;\n      } else {\n        this.consecutiveUpdates = 0;\n        this.lastRecordedTime = currentTime;\n      }\n    }\n\n    /**\n     * Cancels any pending timers and resets the 'timeupdate' mechanism\n     * designed to detect that we are stalled\n     *\n     * @private\n     */\n  }, {\n    key: 'cancelTimer_',\n    value: function cancelTimer_() {\n      this.consecutiveUpdates = 0;\n\n      if (this.timer_) {\n        this.logger_('cancelTimer_');\n        clearTimeout(this.timer_);\n      }\n\n      this.timer_ = null;\n    }\n\n    /**\n     * Fixes situations where there's a bad seek\n     *\n     * @return {Boolean} whether an action was taken to fix the seek\n     * @private\n     */\n  }, {\n    key: 'fixesBadSeeks_',\n    value: function fixesBadSeeks_() {\n      var seeking = this.tech_.seeking();\n      var seekable = this.seekable();\n      var currentTime = this.tech_.currentTime();\n      var seekTo = undefined;\n\n      if (seeking && this.afterSeekableWindow_(seekable, currentTime)) {\n        var seekableEnd = seekable.end(seekable.length - 1);\n\n        // sync to live point (if VOD, our seekable was updated and we're simply adjusting)\n        seekTo = seekableEnd;\n      }\n\n      if (seeking && this.beforeSeekableWindow_(seekable, currentTime)) {\n        var seekableStart = seekable.start(0);\n\n        // sync to the beginning of the live window\n        // provide a buffer of .1 seconds to handle rounding/imprecise numbers\n        seekTo = seekableStart + _ranges2['default'].SAFE_TIME_DELTA;\n      }\n\n      if (typeof seekTo !== 'undefined') {\n        this.logger_('Trying to seek outside of seekable at time ' + currentTime + ' with ' + ('seekable range ' + _ranges2['default'].printableRange(seekable) + '. Seeking to ') + (seekTo + '.'));\n\n        this.tech_.setCurrentTime(seekTo);\n        return true;\n      }\n\n      return false;\n    }\n\n    /**\n     * Handler for situations when we determine the player is waiting.\n     *\n     * @private\n     */\n  }, {\n    key: 'waiting_',\n    value: function waiting_() {\n      if (this.techWaiting_()) {\n        return;\n      }\n\n      // All tech waiting checks failed. Use last resort correction\n      var currentTime = this.tech_.currentTime();\n      var buffered = this.tech_.buffered();\n      var currentRange = _ranges2['default'].findRange(buffered, currentTime);\n\n      // Sometimes the player can stall for unknown reasons within a contiguous buffered\n      // region with no indication that anything is amiss (seen in Firefox). Seeking to\n      // currentTime is usually enough to kickstart the player. This checks that the player\n      // is currently within a buffered region before attempting a corrective seek.\n      // Chrome does not appear to continue `timeupdate` events after a `waiting` event\n      // until there is ~ 3 seconds of forward buffer available. PlaybackWatcher should also\n      // make sure there is ~3 seconds of forward buffer before taking any corrective action\n      // to avoid triggering an `unknownwaiting` event when the network is slow.\n      if (currentRange.length && currentTime + 3 <= currentRange.end(0)) {\n        this.cancelTimer_();\n        this.tech_.setCurrentTime(currentTime);\n\n        this.logger_('Stopped at ' + currentTime + ' while inside a buffered region ' + ('[' + currentRange.start(0) + ' -> ' + currentRange.end(0) + ']. Attempting to resume ') + 'playback by seeking to the current time.');\n\n        // unknown waiting corrections may be useful for monitoring QoS\n        this.tech_.trigger({ type: 'usage', name: 'hls-unknown-waiting' });\n        return;\n      }\n    }\n\n    /**\n     * Handler for situations when the tech fires a `waiting` event\n     *\n     * @return {Boolean}\n     *         True if an action (or none) was needed to correct the waiting. False if no\n     *         checks passed\n     * @private\n     */\n  }, {\n    key: 'techWaiting_',\n    value: function techWaiting_() {\n      var seekable = this.seekable();\n      var currentTime = this.tech_.currentTime();\n\n      if (this.tech_.seeking() && this.fixesBadSeeks_()) {\n        // Tech is seeking or bad seek fixed, no action needed\n        return true;\n      }\n\n      if (this.tech_.seeking() || this.timer_ !== null) {\n        // Tech is seeking or already waiting on another action, no action needed\n        return true;\n      }\n\n      if (this.beforeSeekableWindow_(seekable, currentTime)) {\n        var livePoint = seekable.end(seekable.length - 1);\n\n        this.logger_('Fell out of live window at time ' + currentTime + '. Seeking to ' + ('live point (seekable end) ' + livePoint));\n        this.cancelTimer_();\n        this.tech_.setCurrentTime(livePoint);\n\n        // live window resyncs may be useful for monitoring QoS\n        this.tech_.trigger({ type: 'usage', name: 'hls-live-resync' });\n        return true;\n      }\n\n      var buffered = this.tech_.buffered();\n      var nextRange = _ranges2['default'].findNextRange(buffered, currentTime);\n\n      if (this.videoUnderflow_(nextRange, buffered, currentTime)) {\n        // Even though the video underflowed and was stuck in a gap, the audio overplayed\n        // the gap, leading currentTime into a buffered range. Seeking to currentTime\n        // allows the video to catch up to the audio position without losing any audio\n        // (only suffering ~3 seconds of frozen video and a pause in audio playback).\n        this.cancelTimer_();\n        this.tech_.setCurrentTime(currentTime);\n\n        // video underflow may be useful for monitoring QoS\n        this.tech_.trigger({ type: 'usage', name: 'hls-video-underflow' });\n        return true;\n      }\n\n      // check for gap\n      if (nextRange.length > 0) {\n        var difference = nextRange.start(0) - currentTime;\n\n        this.logger_('Stopped at ' + currentTime + ', setting timer for ' + difference + ', seeking ' + ('to ' + nextRange.start(0)));\n\n        this.timer_ = setTimeout(this.skipTheGap_.bind(this), difference * 1000, currentTime);\n        return true;\n      }\n\n      // All checks failed. Returning false to indicate failure to correct waiting\n      return false;\n    }\n  }, {\n    key: 'afterSeekableWindow_',\n    value: function afterSeekableWindow_(seekable, currentTime) {\n      if (!seekable.length) {\n        // we can't make a solid case if there's no seekable, default to false\n        return false;\n      }\n\n      if (currentTime > seekable.end(seekable.length - 1) + _ranges2['default'].SAFE_TIME_DELTA) {\n        return true;\n      }\n\n      return false;\n    }\n  }, {\n    key: 'beforeSeekableWindow_',\n    value: function beforeSeekableWindow_(seekable, currentTime) {\n      if (seekable.length &&\n      // can't fall before 0 and 0 seekable start identifies VOD stream\n      seekable.start(0) > 0 && currentTime < seekable.start(0) - _ranges2['default'].SAFE_TIME_DELTA) {\n        return true;\n      }\n\n      return false;\n    }\n  }, {\n    key: 'videoUnderflow_',\n    value: function videoUnderflow_(nextRange, buffered, currentTime) {\n      if (nextRange.length === 0) {\n        // Even if there is no available next range, there is still a possibility we are\n        // stuck in a gap due to video underflow.\n        var gap = this.gapFromVideoUnderflow_(buffered, currentTime);\n\n        if (gap) {\n          this.logger_('Encountered a gap in video from ' + gap.start + ' to ' + gap.end + '. ' + ('Seeking to current time ' + currentTime));\n\n          return true;\n        }\n      }\n\n      return false;\n    }\n\n    /**\n     * Timer callback. If playback still has not proceeded, then we seek\n     * to the start of the next buffered region.\n     *\n     * @private\n     */\n  }, {\n    key: 'skipTheGap_',\n    value: function skipTheGap_(scheduledCurrentTime) {\n      var buffered = this.tech_.buffered();\n      var currentTime = this.tech_.currentTime();\n      var nextRange = _ranges2['default'].findNextRange(buffered, currentTime);\n\n      this.cancelTimer_();\n\n      if (nextRange.length === 0 || currentTime !== scheduledCurrentTime) {\n        return;\n      }\n\n      this.logger_('skipTheGap_:', 'currentTime:', currentTime, 'scheduled currentTime:', scheduledCurrentTime, 'nextRange start:', nextRange.start(0));\n\n      // only seek if we still have not played\n      this.tech_.setCurrentTime(nextRange.start(0) + _ranges2['default'].TIME_FUDGE_FACTOR);\n\n      this.tech_.trigger({ type: 'usage', name: 'hls-gap-skip' });\n    }\n  }, {\n    key: 'gapFromVideoUnderflow_',\n    value: function gapFromVideoUnderflow_(buffered, currentTime) {\n      // At least in Chrome, if there is a gap in the video buffer, the audio will continue\n      // playing for ~3 seconds after the video gap starts. This is done to account for\n      // video buffer underflow/underrun (note that this is not done when there is audio\n      // buffer underflow/underrun -- in that case the video will stop as soon as it\n      // encounters the gap, as audio stalls are more noticeable/jarring to a user than\n      // video stalls). The player's time will reflect the playthrough of audio, so the\n      // time will appear as if we are in a buffered region, even if we are stuck in a\n      // \"gap.\"\n      //\n      // Example:\n      // video buffer:   0 => 10.1, 10.2 => 20\n      // audio buffer:   0 => 20\n      // overall buffer: 0 => 10.1, 10.2 => 20\n      // current time: 13\n      //\n      // Chrome's video froze at 10 seconds, where the video buffer encountered the gap,\n      // however, the audio continued playing until it reached ~3 seconds past the gap\n      // (13 seconds), at which point it stops as well. Since current time is past the\n      // gap, findNextRange will return no ranges.\n      //\n      // To check for this issue, we see if there is a gap that starts somewhere within\n      // a 3 second range (3 seconds +/- 1 second) back from our current time.\n      var gaps = _ranges2['default'].findGaps(buffered);\n\n      for (var i = 0; i < gaps.length; i++) {\n        var start = gaps.start(i);\n        var end = gaps.end(i);\n\n        // gap is starts no more than 4 seconds back\n        if (currentTime - start < 4 && currentTime - start > 2) {\n          return {\n            start: start,\n            end: end\n          };\n        }\n      }\n\n      return null;\n    }\n\n    /**\n     * A debugging logger noop that is set to console.log only if debugging\n     * is enabled globally\n     *\n     * @private\n     */\n  }, {\n    key: 'logger_',\n    value: function logger_() {}\n  }]);\n\n  return PlaybackWatcher;\n})();\n\nexports['default'] = PlaybackWatcher;\nmodule.exports = exports['default'];\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{\"./ranges\":12,\"global/window\":32}],9:[function(require,module,exports){\n(function (global){\n/**\n * @file playlist-loader.js\n *\n * A state machine that manages the loading, caching, and updating of\n * M3U8 playlists.\n *\n */\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\nvar _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar _resolveUrl = require('./resolve-url');\n\nvar _resolveUrl2 = _interopRequireDefault(_resolveUrl);\n\nvar _videoJs = (typeof window !== \"undefined\" ? window['videojs'] : typeof global !== \"undefined\" ? global['videojs'] : null);\n\nvar _m3u8Parser = require('m3u8-parser');\n\nvar _m3u8Parser2 = _interopRequireDefault(_m3u8Parser);\n\nvar _globalWindow = require('global/window');\n\nvar _globalWindow2 = _interopRequireDefault(_globalWindow);\n\n/**\n  * Returns a new array of segments that is the result of merging\n  * properties from an older list of segments onto an updated\n  * list. No properties on the updated playlist will be overridden.\n  *\n  * @param {Array} original the outdated list of segments\n  * @param {Array} update the updated list of segments\n  * @param {Number=} offset the index of the first update\n  * segment in the original segment list. For non-live playlists,\n  * this should always be zero and does not need to be\n  * specified. For live playlists, it should be the difference\n  * between the media sequence numbers in the original and updated\n  * playlists.\n  * @return a list of merged segment objects\n  */\nvar updateSegments = function updateSegments(original, update, offset) {\n  var result = update.slice();\n\n  offset = offset || 0;\n  var length = Math.min(original.length, update.length + offset);\n\n  for (var i = offset; i < length; i++) {\n    result[i - offset] = (0, _videoJs.mergeOptions)(original[i], result[i - offset]);\n  }\n  return result;\n};\n\nexports.updateSegments = updateSegments;\nvar resolveSegmentUris = function resolveSegmentUris(segment, baseUri) {\n  if (!segment.resolvedUri) {\n    segment.resolvedUri = (0, _resolveUrl2['default'])(baseUri, segment.uri);\n  }\n  if (segment.key && !segment.key.resolvedUri) {\n    segment.key.resolvedUri = (0, _resolveUrl2['default'])(baseUri, segment.key.uri);\n  }\n  if (segment.map && !segment.map.resolvedUri) {\n    segment.map.resolvedUri = (0, _resolveUrl2['default'])(baseUri, segment.map.uri);\n  }\n};\n\nexports.resolveSegmentUris = resolveSegmentUris;\n/**\n  * Returns a new master playlist that is the result of merging an\n  * updated media playlist into the original version. If the\n  * updated media playlist does not match any of the playlist\n  * entries in the original master playlist, null is returned.\n  *\n  * @param {Object} master a parsed master M3U8 object\n  * @param {Object} media a parsed media M3U8 object\n  * @return {Object} a new object that represents the original\n  * master playlist with the updated media playlist merged in, or\n  * null if the merge produced no change.\n  */\nvar updateMaster = function updateMaster(master, media) {\n  var result = (0, _videoJs.mergeOptions)(master, {});\n  var playlist = result.playlists.filter(function (p) {\n    return p.uri === media.uri;\n  })[0];\n\n  if (!playlist) {\n    return null;\n  }\n\n  // consider the playlist unchanged if the number of segments is equal and the media\n  // sequence number is unchanged\n  if (playlist.segments && media.segments && playlist.segments.length === media.segments.length && playlist.mediaSequence === media.mediaSequence) {\n    return null;\n  }\n\n  var mergedPlaylist = (0, _videoJs.mergeOptions)(playlist, media);\n\n  // if the update could overlap existing segment information, merge the two segment lists\n  if (playlist.segments) {\n    mergedPlaylist.segments = updateSegments(playlist.segments, media.segments, media.mediaSequence - playlist.mediaSequence);\n  }\n\n  // resolve any segment URIs to prevent us from having to do it later\n  mergedPlaylist.segments.forEach(function (segment) {\n    resolveSegmentUris(segment, mergedPlaylist.resolvedUri);\n  });\n\n  // TODO Right now in the playlists array there are two references to each playlist, one\n  // that is referenced by index, and one by URI. The index reference may no longer be\n  // necessary.\n  for (var i = 0; i < result.playlists.length; i++) {\n    if (result.playlists[i].uri === media.uri) {\n      result.playlists[i] = mergedPlaylist;\n    }\n  }\n  result.playlists[media.uri] = mergedPlaylist;\n\n  return result;\n};\n\nexports.updateMaster = updateMaster;\nvar setupMediaPlaylists = function setupMediaPlaylists(master) {\n  // setup by-URI lookups and resolve media playlist URIs\n  var i = master.playlists.length;\n\n  while (i--) {\n    var playlist = master.playlists[i];\n\n    master.playlists[playlist.uri] = playlist;\n    playlist.resolvedUri = (0, _resolveUrl2['default'])(master.uri, playlist.uri);\n\n    if (!playlist.attributes) {\n      // Although the spec states an #EXT-X-STREAM-INF tag MUST have a\n      // BANDWIDTH attribute, we can play the stream without it. This means a poorly\n      // formatted master playlist may not have an attribute list. An attributes\n      // property is added here to prevent undefined references when we encounter\n      // this scenario.\n      playlist.attributes = {};\n\n      _videoJs.log.warn('Invalid playlist STREAM-INF detected. Missing BANDWIDTH attribute.');\n    }\n  }\n};\n\nexports.setupMediaPlaylists = setupMediaPlaylists;\nvar resolveMediaGroupUris = function resolveMediaGroupUris(master) {\n  ['AUDIO', 'SUBTITLES'].forEach(function (mediaType) {\n    for (var groupKey in master.mediaGroups[mediaType]) {\n      for (var labelKey in master.mediaGroups[mediaType][groupKey]) {\n        var mediaProperties = master.mediaGroups[mediaType][groupKey][labelKey];\n\n        if (mediaProperties.uri) {\n          mediaProperties.resolvedUri = (0, _resolveUrl2['default'])(master.uri, mediaProperties.uri);\n        }\n      }\n    }\n  });\n};\n\nexports.resolveMediaGroupUris = resolveMediaGroupUris;\n/**\n * Calculates the time to wait before refreshing a live playlist\n *\n * @param {Object} media\n *        The current media\n * @param {Boolean} update\n *        True if there were any updates from the last refresh, false otherwise\n * @return {Number}\n *         The time in ms to wait before refreshing the live playlist\n */\nvar refreshDelay = function refreshDelay(media, update) {\n  var lastSegment = media.segments[media.segments.length - 1];\n  var delay = undefined;\n\n  if (update && lastSegment && lastSegment.duration) {\n    delay = lastSegment.duration * 1000;\n  } else {\n    // if the playlist is unchanged since the last reload or last segment duration\n    // cannot be determined, try again after half the target duration\n    delay = (media.targetDuration || 10) * 500;\n  }\n  return delay;\n};\n\nexports.refreshDelay = refreshDelay;\n/**\n * Load a playlist from a remote location\n *\n * @class PlaylistLoader\n * @extends Stream\n * @param {String} srcUrl the url to start with\n * @param {Boolean} withCredentials the withCredentials xhr option\n * @constructor\n */\n\nvar PlaylistLoader = (function (_EventTarget) {\n  _inherits(PlaylistLoader, _EventTarget);\n\n  function PlaylistLoader(srcUrl, hls, withCredentials) {\n    var _this = this;\n\n    _classCallCheck(this, PlaylistLoader);\n\n    _get(Object.getPrototypeOf(PlaylistLoader.prototype), 'constructor', this).call(this);\n\n    this.srcUrl = srcUrl;\n    this.hls_ = hls;\n    this.withCredentials = withCredentials;\n\n    if (!this.srcUrl) {\n      throw new Error('A non-empty playlist URL is required');\n    }\n\n    // initialize the loader state\n    this.state = 'HAVE_NOTHING';\n\n    // live playlist staleness timeout\n    this.on('mediaupdatetimeout', function () {\n      if (_this.state !== 'HAVE_METADATA') {\n        // only refresh the media playlist if no other activity is going on\n        return;\n      }\n\n      _this.state = 'HAVE_CURRENT_METADATA';\n\n      _this.request = _this.hls_.xhr({\n        uri: (0, _resolveUrl2['default'])(_this.master.uri, _this.media().uri),\n        withCredentials: _this.withCredentials\n      }, function (error, req) {\n        // disposed\n        if (!_this.request) {\n          return;\n        }\n\n        if (error) {\n          return _this.playlistRequestError(_this.request, _this.media().uri, 'HAVE_METADATA');\n        }\n\n        _this.haveMetadata(_this.request, _this.media().uri);\n      });\n    });\n  }\n\n  _createClass(PlaylistLoader, [{\n    key: 'playlistRequestError',\n    value: function playlistRequestError(xhr, url, startingState) {\n      // any in-flight request is now finished\n      this.request = null;\n\n      if (startingState) {\n        this.state = startingState;\n      }\n\n      this.error = {\n        playlist: this.master.playlists[url],\n        status: xhr.status,\n        message: 'HLS playlist request error at URL: ' + url,\n        responseText: xhr.responseText,\n        code: xhr.status >= 500 ? 4 : 2\n      };\n\n      this.trigger('error');\n    }\n\n    // update the playlist loader's state in response to a new or\n    // updated playlist.\n  }, {\n    key: 'haveMetadata',\n    value: function haveMetadata(xhr, url) {\n      var _this2 = this;\n\n      // any in-flight request is now finished\n      this.request = null;\n      this.state = 'HAVE_METADATA';\n\n      var parser = new _m3u8Parser2['default'].Parser();\n\n      parser.push(xhr.responseText);\n      parser.end();\n      parser.manifest.uri = url;\n      // m3u8-parser does not attach an attributes property to media playlists so make\n      // sure that the property is attached to avoid undefined reference errors\n      parser.manifest.attributes = parser.manifest.attributes || {};\n\n      // merge this playlist into the master\n      var update = updateMaster(this.master, parser.manifest);\n\n      this.targetDuration = parser.manifest.targetDuration;\n\n      if (update) {\n        this.master = update;\n        this.media_ = this.master.playlists[parser.manifest.uri];\n      } else {\n        this.trigger('playlistunchanged');\n      }\n\n      // refresh live playlists after a target duration passes\n      if (!this.media().endList) {\n        _globalWindow2['default'].clearTimeout(this.mediaUpdateTimeout);\n        this.mediaUpdateTimeout = _globalWindow2['default'].setTimeout(function () {\n          _this2.trigger('mediaupdatetimeout');\n        }, refreshDelay(this.media(), !!update));\n      }\n\n      this.trigger('loadedplaylist');\n    }\n\n    /**\n     * Abort any outstanding work and clean up.\n     */\n  }, {\n    key: 'dispose',\n    value: function dispose() {\n      this.stopRequest();\n      _globalWindow2['default'].clearTimeout(this.mediaUpdateTimeout);\n    }\n  }, {\n    key: 'stopRequest',\n    value: function stopRequest() {\n      if (this.request) {\n        var oldRequest = this.request;\n\n        this.request = null;\n        oldRequest.onreadystatechange = null;\n        oldRequest.abort();\n      }\n    }\n\n    /**\n     * When called without any arguments, returns the currently\n     * active media playlist. When called with a single argument,\n     * triggers the playlist loader to asynchronously switch to the\n     * specified media playlist. Calling this method while the\n     * loader is in the HAVE_NOTHING causes an error to be emitted\n     * but otherwise has no effect.\n     *\n     * @param {Object=} playlist the parsed media playlist\n     * object to switch to\n     * @return {Playlist} the current loaded media\n     */\n  }, {\n    key: 'media',\n    value: function media(playlist) {\n      var _this3 = this;\n\n      // getter\n      if (!playlist) {\n        return this.media_;\n      }\n\n      // setter\n      if (this.state === 'HAVE_NOTHING') {\n        throw new Error('Cannot switch media playlist from ' + this.state);\n      }\n\n      var startingState = this.state;\n\n      // find the playlist object if the target playlist has been\n      // specified by URI\n      if (typeof playlist === 'string') {\n        if (!this.master.playlists[playlist]) {\n          throw new Error('Unknown playlist URI: ' + playlist);\n        }\n        playlist = this.master.playlists[playlist];\n      }\n\n      var mediaChange = !this.media_ || playlist.uri !== this.media_.uri;\n\n      // switch to fully loaded playlists immediately\n      if (this.master.playlists[playlist.uri].endList) {\n        // abort outstanding playlist requests\n        if (this.request) {\n          this.request.onreadystatechange = null;\n          this.request.abort();\n          this.request = null;\n        }\n        this.state = 'HAVE_METADATA';\n        this.media_ = playlist;\n\n        // trigger media change if the active media has been updated\n        if (mediaChange) {\n          this.trigger('mediachanging');\n          this.trigger('mediachange');\n        }\n        return;\n      }\n\n      // switching to the active playlist is a no-op\n      if (!mediaChange) {\n        return;\n      }\n\n      this.state = 'SWITCHING_MEDIA';\n\n      // there is already an outstanding playlist request\n      if (this.request) {\n        if ((0, _resolveUrl2['default'])(this.master.uri, playlist.uri) === this.request.url) {\n          // requesting to switch to the same playlist multiple times\n          // has no effect after the first\n          return;\n        }\n        this.request.onreadystatechange = null;\n        this.request.abort();\n        this.request = null;\n      }\n\n      // request the new playlist\n      if (this.media_) {\n        this.trigger('mediachanging');\n      }\n\n      this.request = this.hls_.xhr({\n        uri: (0, _resolveUrl2['default'])(this.master.uri, playlist.uri),\n        withCredentials: this.withCredentials\n      }, function (error, req) {\n        // disposed\n        if (!_this3.request) {\n          return;\n        }\n\n        if (error) {\n          return _this3.playlistRequestError(_this3.request, playlist.uri, startingState);\n        }\n\n        _this3.haveMetadata(req, playlist.uri);\n\n        // fire loadedmetadata the first time a media playlist is loaded\n        if (startingState === 'HAVE_MASTER') {\n          _this3.trigger('loadedmetadata');\n        } else {\n          _this3.trigger('mediachange');\n        }\n      });\n    }\n\n    /**\n     * pause loading of the playlist\n     */\n  }, {\n    key: 'pause',\n    value: function pause() {\n      this.stopRequest();\n      _globalWindow2['default'].clearTimeout(this.mediaUpdateTimeout);\n      if (this.state === 'HAVE_NOTHING') {\n        // If we pause the loader before any data has been retrieved, its as if we never\n        // started, so reset to an unstarted state.\n        this.started = false;\n      }\n      // Need to restore state now that no activity is happening\n      if (this.state === 'SWITCHING_MEDIA') {\n        // if the loader was in the process of switching media, it should either return to\n        // HAVE_MASTER or HAVE_METADATA depending on if the loader has loaded a media\n        // playlist yet. This is determined by the existence of loader.media_\n        if (this.media_) {\n          this.state = 'HAVE_METADATA';\n        } else {\n          this.state = 'HAVE_MASTER';\n        }\n      } else if (this.state === 'HAVE_CURRENT_METADATA') {\n        this.state = 'HAVE_METADATA';\n      }\n    }\n\n    /**\n     * start loading of the playlist\n     */\n  }, {\n    key: 'load',\n    value: function load(isFinalRendition) {\n      var _this4 = this;\n\n      _globalWindow2['default'].clearTimeout(this.mediaUpdateTimeout);\n\n      var media = this.media();\n\n      if (isFinalRendition) {\n        var delay = media ? media.targetDuration / 2 * 1000 : 5 * 1000;\n\n        this.mediaUpdateTimeout = _globalWindow2['default'].setTimeout(function () {\n          return _this4.load();\n        }, delay);\n        return;\n      }\n\n      if (!this.started) {\n        this.start();\n        return;\n      }\n\n      if (media && !media.endList) {\n        this.trigger('mediaupdatetimeout');\n      } else {\n        this.trigger('loadedplaylist');\n      }\n    }\n\n    /**\n     * start loading of the playlist\n     */\n  }, {\n    key: 'start',\n    value: function start() {\n      var _this5 = this;\n\n      this.started = true;\n\n      // request the specified URL\n      this.request = this.hls_.xhr({\n        uri: this.srcUrl,\n        withCredentials: this.withCredentials\n      }, function (error, req) {\n        // disposed\n        if (!_this5.request) {\n          return;\n        }\n\n        // clear the loader's request reference\n        _this5.request = null;\n\n        if (error) {\n          _this5.error = {\n            status: req.status,\n            message: 'HLS playlist request error at URL: ' + _this5.srcUrl,\n            responseText: req.responseText,\n            // MEDIA_ERR_NETWORK\n            code: 2\n          };\n          if (_this5.state === 'HAVE_NOTHING') {\n            _this5.started = false;\n          }\n          return _this5.trigger('error');\n        }\n\n        var parser = new _m3u8Parser2['default'].Parser();\n\n        parser.push(req.responseText);\n        parser.end();\n\n        _this5.state = 'HAVE_MASTER';\n\n        parser.manifest.uri = _this5.srcUrl;\n\n        // loaded a master playlist\n        if (parser.manifest.playlists) {\n          _this5.master = parser.manifest;\n\n          setupMediaPlaylists(_this5.master);\n          resolveMediaGroupUris(_this5.master);\n\n          _this5.trigger('loadedplaylist');\n          if (!_this5.request) {\n            // no media playlist was specifically selected so start\n            // from the first listed one\n            _this5.media(parser.manifest.playlists[0]);\n          }\n          return;\n        }\n\n        // loaded a media playlist\n        // infer a master playlist if none was previously requested\n        _this5.master = {\n          mediaGroups: {\n            'AUDIO': {},\n            'VIDEO': {},\n            'CLOSED-CAPTIONS': {},\n            'SUBTITLES': {}\n          },\n          uri: _globalWindow2['default'].location.href,\n          playlists: [{\n            uri: _this5.srcUrl\n          }]\n        };\n        _this5.master.playlists[_this5.srcUrl] = _this5.master.playlists[0];\n        _this5.master.playlists[0].resolvedUri = _this5.srcUrl;\n        // m3u8-parser does not attach an attributes property to media playlists so make\n        // sure that the property is attached to avoid undefined reference errors\n        _this5.master.playlists[0].attributes = _this5.master.playlists[0].attributes || {};\n        _this5.haveMetadata(req, _this5.srcUrl);\n        return _this5.trigger('loadedmetadata');\n      });\n    }\n  }]);\n\n  return PlaylistLoader;\n})(_videoJs.EventTarget);\n\nexports['default'] = PlaylistLoader;\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{\"./resolve-url\":15,\"global/window\":32,\"m3u8-parser\":33}],10:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nvar _config = require('./config');\n\nvar _config2 = _interopRequireDefault(_config);\n\nvar _playlist = require('./playlist');\n\nvar _playlist2 = _interopRequireDefault(_playlist);\n\nvar _utilCodecsJs = require('./util/codecs.js');\n\n// Utilities\n\n/**\n * Returns the CSS value for the specified property on an element\n * using `getComputedStyle`. Firefox has a long-standing issue where\n * getComputedStyle() may return null when running in an iframe with\n * `display: none`.\n *\n * @see https://bugzilla.mozilla.org/show_bug.cgi?id=548397\n * @param {HTMLElement} el the htmlelement to work on\n * @param {string} the proprety to get the style for\n */\nvar safeGetComputedStyle = function safeGetComputedStyle(el, property) {\n  var result = undefined;\n\n  if (!el) {\n    return '';\n  }\n\n  result = window.getComputedStyle(el);\n  if (!result) {\n    return '';\n  }\n\n  return result[property];\n};\n\n/**\n * Resuable stable sort function\n *\n * @param {Playlists} array\n * @param {Function} sortFn Different comparators\n * @function stableSort\n */\nvar stableSort = function stableSort(array, sortFn) {\n  var newArray = array.slice();\n\n  array.sort(function (left, right) {\n    var cmp = sortFn(left, right);\n\n    if (cmp === 0) {\n      return newArray.indexOf(left) - newArray.indexOf(right);\n    }\n    return cmp;\n  });\n};\n\n/**\n * A comparator function to sort two playlist object by bandwidth.\n *\n * @param {Object} left a media playlist object\n * @param {Object} right a media playlist object\n * @return {Number} Greater than zero if the bandwidth attribute of\n * left is greater than the corresponding attribute of right. Less\n * than zero if the bandwidth of right is greater than left and\n * exactly zero if the two are equal.\n */\nvar comparePlaylistBandwidth = function comparePlaylistBandwidth(left, right) {\n  var leftBandwidth = undefined;\n  var rightBandwidth = undefined;\n\n  if (left.attributes.BANDWIDTH) {\n    leftBandwidth = left.attributes.BANDWIDTH;\n  }\n  leftBandwidth = leftBandwidth || window.Number.MAX_VALUE;\n  if (right.attributes.BANDWIDTH) {\n    rightBandwidth = right.attributes.BANDWIDTH;\n  }\n  rightBandwidth = rightBandwidth || window.Number.MAX_VALUE;\n\n  return leftBandwidth - rightBandwidth;\n};\n\nexports.comparePlaylistBandwidth = comparePlaylistBandwidth;\n/**\n * A comparator function to sort two playlist object by resolution (width).\n * @param {Object} left a media playlist object\n * @param {Object} right a media playlist object\n * @return {Number} Greater than zero if the resolution.width attribute of\n * left is greater than the corresponding attribute of right. Less\n * than zero if the resolution.width of right is greater than left and\n * exactly zero if the two are equal.\n */\nvar comparePlaylistResolution = function comparePlaylistResolution(left, right) {\n  var leftWidth = undefined;\n  var rightWidth = undefined;\n\n  if (left.attributes.RESOLUTION && left.attributes.RESOLUTION.width) {\n    leftWidth = left.attributes.RESOLUTION.width;\n  }\n\n  leftWidth = leftWidth || window.Number.MAX_VALUE;\n\n  if (right.attributes.RESOLUTION && right.attributes.RESOLUTION.width) {\n    rightWidth = right.attributes.RESOLUTION.width;\n  }\n\n  rightWidth = rightWidth || window.Number.MAX_VALUE;\n\n  // NOTE - Fallback to bandwidth sort as appropriate in cases where multiple renditions\n  // have the same media dimensions/ resolution\n  if (leftWidth === rightWidth && left.attributes.BANDWIDTH && right.attributes.BANDWIDTH) {\n    return left.attributes.BANDWIDTH - right.attributes.BANDWIDTH;\n  }\n  return leftWidth - rightWidth;\n};\n\nexports.comparePlaylistResolution = comparePlaylistResolution;\n/**\n * Chooses the appropriate media playlist based on bandwidth and player size\n *\n * @param {Object} master\n *        Object representation of the master manifest\n * @param {Number} playerBandwidth\n *        Current calculated bandwidth of the player\n * @param {Number} playerWidth\n *        Current width of the player element\n * @param {Number} playerHeight\n *        Current height of the player element\n * @return {Playlist} the highest bitrate playlist less than the\n * currently detected bandwidth, accounting for some amount of\n * bandwidth variance\n */\nvar simpleSelector = function simpleSelector(master, playerBandwidth, playerWidth, playerHeight) {\n  // convert the playlists to an intermediary representation to make comparisons easier\n  var sortedPlaylistReps = master.playlists.map(function (playlist) {\n    var width = undefined;\n    var height = undefined;\n    var bandwidth = undefined;\n\n    width = playlist.attributes.RESOLUTION && playlist.attributes.RESOLUTION.width;\n    height = playlist.attributes.RESOLUTION && playlist.attributes.RESOLUTION.height;\n    bandwidth = playlist.attributes.BANDWIDTH;\n\n    bandwidth = bandwidth || window.Number.MAX_VALUE;\n\n    return {\n      bandwidth: bandwidth,\n      width: width,\n      height: height,\n      playlist: playlist\n    };\n  });\n\n  stableSort(sortedPlaylistReps, function (left, right) {\n    return left.bandwidth - right.bandwidth;\n  });\n\n  // filter out any playlists that have been excluded due to\n  // incompatible configurations\n  sortedPlaylistReps = sortedPlaylistReps.filter(function (rep) {\n    return !_playlist2['default'].isIncompatible(rep.playlist);\n  });\n\n  // filter out any playlists that have been disabled manually through the representations\n  // api or blacklisted temporarily due to playback errors.\n  var enabledPlaylistReps = sortedPlaylistReps.filter(function (rep) {\n    return _playlist2['default'].isEnabled(rep.playlist);\n  });\n\n  if (!enabledPlaylistReps.length) {\n    // if there are no enabled playlists, then they have all been blacklisted or disabled\n    // by the user through the representations api. In this case, ignore blacklisting and\n    // fallback to what the user wants by using playlists the user has not disabled.\n    enabledPlaylistReps = sortedPlaylistReps.filter(function (rep) {\n      return !_playlist2['default'].isDisabled(rep.playlist);\n    });\n  }\n\n  // filter out any variant that has greater effective bitrate\n  // than the current estimated bandwidth\n  var bandwidthPlaylistReps = enabledPlaylistReps.filter(function (rep) {\n    return rep.bandwidth * _config2['default'].BANDWIDTH_VARIANCE < playerBandwidth;\n  });\n\n  var highestRemainingBandwidthRep = bandwidthPlaylistReps[bandwidthPlaylistReps.length - 1];\n\n  // get all of the renditions with the same (highest) bandwidth\n  // and then taking the very first element\n  var bandwidthBestRep = bandwidthPlaylistReps.filter(function (rep) {\n    return rep.bandwidth === highestRemainingBandwidthRep.bandwidth;\n  })[0];\n\n  // filter out playlists without resolution information\n  var haveResolution = bandwidthPlaylistReps.filter(function (rep) {\n    return rep.width && rep.height;\n  });\n\n  // sort variants by resolution\n  stableSort(haveResolution, function (left, right) {\n    return left.width - right.width;\n  });\n\n  // if we have the exact resolution as the player use it\n  var resolutionBestRepList = haveResolution.filter(function (rep) {\n    return rep.width === playerWidth && rep.height === playerHeight;\n  });\n\n  highestRemainingBandwidthRep = resolutionBestRepList[resolutionBestRepList.length - 1];\n  // ensure that we pick the highest bandwidth variant that have exact resolution\n  var resolutionBestRep = resolutionBestRepList.filter(function (rep) {\n    return rep.bandwidth === highestRemainingBandwidthRep.bandwidth;\n  })[0];\n\n  var resolutionPlusOneList = undefined;\n  var resolutionPlusOneSmallest = undefined;\n  var resolutionPlusOneRep = undefined;\n\n  // find the smallest variant that is larger than the player\n  // if there is no match of exact resolution\n  if (!resolutionBestRep) {\n    resolutionPlusOneList = haveResolution.filter(function (rep) {\n      return rep.width > playerWidth || rep.height > playerHeight;\n    });\n\n    // find all the variants have the same smallest resolution\n    resolutionPlusOneSmallest = resolutionPlusOneList.filter(function (rep) {\n      return rep.width === resolutionPlusOneList[0].width && rep.height === resolutionPlusOneList[0].height;\n    });\n\n    // ensure that we also pick the highest bandwidth variant that\n    // is just-larger-than the video player\n    highestRemainingBandwidthRep = resolutionPlusOneSmallest[resolutionPlusOneSmallest.length - 1];\n    resolutionPlusOneRep = resolutionPlusOneSmallest.filter(function (rep) {\n      return rep.bandwidth === highestRemainingBandwidthRep.bandwidth;\n    })[0];\n  }\n\n  // fallback chain of variants\n  var chosenRep = resolutionPlusOneRep || resolutionBestRep || bandwidthBestRep || enabledPlaylistReps[0] || sortedPlaylistReps[0];\n\n  return chosenRep ? chosenRep.playlist : null;\n};\n\nexports.simpleSelector = simpleSelector;\n// Playlist Selectors\n\n/**\n * Chooses the appropriate media playlist based on the most recent\n * bandwidth estimate and the player size.\n *\n * Expects to be called within the context of an instance of HlsHandler\n *\n * @return {Playlist} the highest bitrate playlist less than the\n * currently detected bandwidth, accounting for some amount of\n * bandwidth variance\n */\nvar lastBandwidthSelector = function lastBandwidthSelector() {\n  return simpleSelector(this.playlists.master, this.systemBandwidth, parseInt(safeGetComputedStyle(this.tech_.el(), 'width'), 10), parseInt(safeGetComputedStyle(this.tech_.el(), 'height'), 10));\n};\n\nexports.lastBandwidthSelector = lastBandwidthSelector;\n/**\n * Chooses the appropriate media playlist based on an\n * exponential-weighted moving average of the bandwidth after\n * filtering for player size.\n *\n * Expects to be called within the context of an instance of HlsHandler\n *\n * @param {Number} decay - a number between 0 and 1. Higher values of\n * this parameter will cause previous bandwidth estimates to lose\n * significance more quickly.\n * @return {Function} a function which can be invoked to create a new\n * playlist selector function.\n * @see https://en.wikipedia.org/wiki/Moving_average#Exponential_moving_average\n */\nvar movingAverageBandwidthSelector = function movingAverageBandwidthSelector(decay) {\n  var average = -1;\n\n  if (decay < 0 || decay > 1) {\n    throw new Error('Moving average bandwidth decay must be between 0 and 1.');\n  }\n\n  return function () {\n    if (average < 0) {\n      average = this.systemBandwidth;\n    }\n\n    average = decay * this.systemBandwidth + (1 - decay) * average;\n    return simpleSelector(this.playlists.master, average, parseInt(safeGetComputedStyle(this.tech_.el(), 'width'), 10), parseInt(safeGetComputedStyle(this.tech_.el(), 'height'), 10));\n  };\n};\n\nexports.movingAverageBandwidthSelector = movingAverageBandwidthSelector;\n/**\n * Chooses the appropriate media playlist based on the potential to rebuffer\n *\n * @param {Object} settings\n *        Object of information required to use this selector\n * @param {Object} settings.master\n *        Object representation of the master manifest\n * @param {Number} settings.currentTime\n *        The current time of the player\n * @param {Number} settings.bandwidth\n *        Current measured bandwidth\n * @param {Number} settings.duration\n *        Duration of the media\n * @param {Number} settings.segmentDuration\n *        Segment duration to be used in round trip time calculations\n * @param {Number} settings.timeUntilRebuffer\n *        Time left in seconds until the player has to rebuffer\n * @param {Number} settings.currentTimeline\n *        The current timeline segments are being loaded from\n * @param {SyncController} settings.syncController\n *        SyncController for determining if we have a sync point for a given playlist\n * @return {Object|null}\n *         {Object} return.playlist\n *         The highest bandwidth playlist with the least amount of rebuffering\n *         {Number} return.rebufferingImpact\n *         The amount of time in seconds switching to this playlist will rebuffer. A\n *         negative value means that switching will cause zero rebuffering.\n */\nvar minRebufferMaxBandwidthSelector = function minRebufferMaxBandwidthSelector(settings) {\n  var master = settings.master;\n  var currentTime = settings.currentTime;\n  var bandwidth = settings.bandwidth;\n  var duration = settings.duration;\n  var segmentDuration = settings.segmentDuration;\n  var timeUntilRebuffer = settings.timeUntilRebuffer;\n  var currentTimeline = settings.currentTimeline;\n  var syncController = settings.syncController;\n\n  // filter out any playlists that have been excluded due to\n  // incompatible configurations\n  var compatiblePlaylists = master.playlists.filter(function (playlist) {\n    return !_playlist2['default'].isIncompatible(playlist);\n  });\n\n  // filter out any playlists that have been disabled manually through the representations\n  // api or blacklisted temporarily due to playback errors.\n  var enabledPlaylists = compatiblePlaylists.filter(_playlist2['default'].isEnabled);\n\n  if (!enabledPlaylists.length) {\n    // if there are no enabled playlists, then they have all been blacklisted or disabled\n    // by the user through the representations api. In this case, ignore blacklisting and\n    // fallback to what the user wants by using playlists the user has not disabled.\n    enabledPlaylists = compatiblePlaylists.filter(function (playlist) {\n      return !_playlist2['default'].isDisabled(playlist);\n    });\n  }\n\n  var bandwidthPlaylists = enabledPlaylists.filter(_playlist2['default'].hasAttribute.bind(null, 'BANDWIDTH'));\n\n  var rebufferingEstimates = bandwidthPlaylists.map(function (playlist) {\n    var syncPoint = syncController.getSyncPoint(playlist, duration, currentTimeline, currentTime);\n    // If there is no sync point for this playlist, switching to it will require a\n    // sync request first. This will double the request time\n    var numRequests = syncPoint ? 1 : 2;\n    var requestTimeEstimate = _playlist2['default'].estimateSegmentRequestTime(segmentDuration, bandwidth, playlist);\n    var rebufferingImpact = requestTimeEstimate * numRequests - timeUntilRebuffer;\n\n    return {\n      playlist: playlist,\n      rebufferingImpact: rebufferingImpact\n    };\n  });\n\n  var noRebufferingPlaylists = rebufferingEstimates.filter(function (estimate) {\n    return estimate.rebufferingImpact <= 0;\n  });\n\n  // Sort by bandwidth DESC\n  stableSort(noRebufferingPlaylists, function (a, b) {\n    return comparePlaylistBandwidth(b.playlist, a.playlist);\n  });\n\n  if (noRebufferingPlaylists.length) {\n    return noRebufferingPlaylists[0];\n  }\n\n  stableSort(rebufferingEstimates, function (a, b) {\n    return a.rebufferingImpact - b.rebufferingImpact;\n  });\n\n  return rebufferingEstimates[0] || null;\n};\n\nexports.minRebufferMaxBandwidthSelector = minRebufferMaxBandwidthSelector;\n/**\n * Chooses the appropriate media playlist, which in this case is the lowest bitrate\n * one with video.  If no renditions with video exist, return the lowest audio rendition.\n *\n * Expects to be called within the context of an instance of HlsHandler\n *\n * @return {Object|null}\n *         {Object} return.playlist\n *         The lowest bitrate playlist that contains a video codec.  If no such rendition\n *         exists pick the lowest audio rendition.\n */\nvar lowestBitrateCompatibleVariantSelector = function lowestBitrateCompatibleVariantSelector() {\n  // filter out any playlists that have been excluded due to\n  // incompatible configurations or playback errors\n  var playlists = this.playlists.master.playlists.filter(_playlist2['default'].isEnabled);\n\n  // Sort ascending by bitrate\n  stableSort(playlists, function (a, b) {\n    return comparePlaylistBandwidth(a, b);\n  });\n\n  // Parse and assume that playlists with no video codec have no video\n  // (this is not necessarily true, although it is generally true).\n  //\n  // If an entire manifest has no valid videos everything will get filtered\n  // out.\n  var playlistsWithVideo = playlists.filter(function (playlist) {\n    return (0, _utilCodecsJs.parseCodecs)(playlist.attributes.CODECS).videoCodec;\n  });\n\n  return playlistsWithVideo[0] || null;\n};\nexports.lowestBitrateCompatibleVariantSelector = lowestBitrateCompatibleVariantSelector;\n},{\"./config\":3,\"./playlist\":11,\"./util/codecs.js\":19}],11:[function(require,module,exports){\n(function (global){\n/**\n * @file playlist.js\n *\n * Playlist related utilities.\n */\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nvar _videoJs = (typeof window !== \"undefined\" ? window['videojs'] : typeof global !== \"undefined\" ? global['videojs'] : null);\n\nvar _globalWindow = require('global/window');\n\nvar _globalWindow2 = _interopRequireDefault(_globalWindow);\n\n/**\n * walk backward until we find a duration we can use\n * or return a failure\n *\n * @param {Playlist} playlist the playlist to walk through\n * @param {Number} endSequence the mediaSequence to stop walking on\n */\n\nvar backwardDuration = function backwardDuration(playlist, endSequence) {\n  var result = 0;\n  var i = endSequence - playlist.mediaSequence;\n  // if a start time is available for segment immediately following\n  // the interval, use it\n  var segment = playlist.segments[i];\n\n  // Walk backward until we find the latest segment with timeline\n  // information that is earlier than endSequence\n  if (segment) {\n    if (typeof segment.start !== 'undefined') {\n      return { result: segment.start, precise: true };\n    }\n    if (typeof segment.end !== 'undefined') {\n      return {\n        result: segment.end - segment.duration,\n        precise: true\n      };\n    }\n  }\n  while (i--) {\n    segment = playlist.segments[i];\n    if (typeof segment.end !== 'undefined') {\n      return { result: result + segment.end, precise: true };\n    }\n\n    result += segment.duration;\n\n    if (typeof segment.start !== 'undefined') {\n      return { result: result + segment.start, precise: true };\n    }\n  }\n  return { result: result, precise: false };\n};\n\n/**\n * walk forward until we find a duration we can use\n * or return a failure\n *\n * @param {Playlist} playlist the playlist to walk through\n * @param {Number} endSequence the mediaSequence to stop walking on\n */\nvar forwardDuration = function forwardDuration(playlist, endSequence) {\n  var result = 0;\n  var segment = undefined;\n  var i = endSequence - playlist.mediaSequence;\n  // Walk forward until we find the earliest segment with timeline\n  // information\n\n  for (; i < playlist.segments.length; i++) {\n    segment = playlist.segments[i];\n    if (typeof segment.start !== 'undefined') {\n      return {\n        result: segment.start - result,\n        precise: true\n      };\n    }\n\n    result += segment.duration;\n\n    if (typeof segment.end !== 'undefined') {\n      return {\n        result: segment.end - result,\n        precise: true\n      };\n    }\n  }\n  // indicate we didn't find a useful duration estimate\n  return { result: -1, precise: false };\n};\n\n/**\n  * Calculate the media duration from the segments associated with a\n  * playlist. The duration of a subinterval of the available segments\n  * may be calculated by specifying an end index.\n  *\n  * @param {Object} playlist a media playlist object\n  * @param {Number=} endSequence an exclusive upper boundary\n  * for the playlist.  Defaults to playlist length.\n  * @param {Number} expired the amount of time that has dropped\n  * off the front of the playlist in a live scenario\n  * @return {Number} the duration between the first available segment\n  * and end index.\n  */\nvar intervalDuration = function intervalDuration(playlist, endSequence, expired) {\n  var backward = undefined;\n  var forward = undefined;\n\n  if (typeof endSequence === 'undefined') {\n    endSequence = playlist.mediaSequence + playlist.segments.length;\n  }\n\n  if (endSequence < playlist.mediaSequence) {\n    return 0;\n  }\n\n  // do a backward walk to estimate the duration\n  backward = backwardDuration(playlist, endSequence);\n  if (backward.precise) {\n    // if we were able to base our duration estimate on timing\n    // information provided directly from the Media Source, return\n    // it\n    return backward.result;\n  }\n\n  // walk forward to see if a precise duration estimate can be made\n  // that way\n  forward = forwardDuration(playlist, endSequence);\n  if (forward.precise) {\n    // we found a segment that has been buffered and so it's\n    // position is known precisely\n    return forward.result;\n  }\n\n  // return the less-precise, playlist-based duration estimate\n  return backward.result + expired;\n};\n\n/**\n  * Calculates the duration of a playlist. If a start and end index\n  * are specified, the duration will be for the subset of the media\n  * timeline between those two indices. The total duration for live\n  * playlists is always Infinity.\n  *\n  * @param {Object} playlist a media playlist object\n  * @param {Number=} endSequence an exclusive upper\n  * boundary for the playlist. Defaults to the playlist media\n  * sequence number plus its length.\n  * @param {Number=} expired the amount of time that has\n  * dropped off the front of the playlist in a live scenario\n  * @return {Number} the duration between the start index and end\n  * index.\n  */\nvar duration = function duration(playlist, endSequence, expired) {\n  if (!playlist) {\n    return 0;\n  }\n\n  if (typeof expired !== 'number') {\n    expired = 0;\n  }\n\n  // if a slice of the total duration is not requested, use\n  // playlist-level duration indicators when they're present\n  if (typeof endSequence === 'undefined') {\n    // if present, use the duration specified in the playlist\n    if (playlist.totalDuration) {\n      return playlist.totalDuration;\n    }\n\n    // duration should be Infinity for live playlists\n    if (!playlist.endList) {\n      return _globalWindow2['default'].Infinity;\n    }\n  }\n\n  // calculate the total duration based on the segment durations\n  return intervalDuration(playlist, endSequence, expired);\n};\n\nexports.duration = duration;\n/**\n  * Calculate the time between two indexes in the current playlist\n  * neight the start- nor the end-index need to be within the current\n  * playlist in which case, the targetDuration of the playlist is used\n  * to approximate the durations of the segments\n  *\n  * @param {Object} playlist a media playlist object\n  * @param {Number} startIndex\n  * @param {Number} endIndex\n  * @return {Number} the number of seconds between startIndex and endIndex\n  */\nvar sumDurations = function sumDurations(playlist, startIndex, endIndex) {\n  var durations = 0;\n\n  if (startIndex > endIndex) {\n    var _ref = [endIndex, startIndex];\n    startIndex = _ref[0];\n    endIndex = _ref[1];\n  }\n\n  if (startIndex < 0) {\n    for (var i = startIndex; i < Math.min(0, endIndex); i++) {\n      durations += playlist.targetDuration;\n    }\n    startIndex = 0;\n  }\n\n  for (var i = startIndex; i < endIndex; i++) {\n    durations += playlist.segments[i].duration;\n  }\n\n  return durations;\n};\n\nexports.sumDurations = sumDurations;\n/**\n * Determines the media index of the segment corresponding to the safe edge of the live\n * window which is the duration of the last segment plus 2 target durations from the end\n * of the playlist.\n *\n * @param {Object} playlist\n *        a media playlist object\n * @return {Number}\n *         The media index of the segment at the safe live point. 0 if there is no \"safe\"\n *         point.\n * @function safeLiveIndex\n */\nvar safeLiveIndex = function safeLiveIndex(playlist) {\n  if (!playlist.segments.length) {\n    return 0;\n  }\n\n  var i = playlist.segments.length - 1;\n  var distanceFromEnd = playlist.segments[i].duration || playlist.targetDuration;\n  var safeDistance = distanceFromEnd + playlist.targetDuration * 2;\n\n  while (i--) {\n    distanceFromEnd += playlist.segments[i].duration;\n\n    if (distanceFromEnd >= safeDistance) {\n      break;\n    }\n  }\n\n  return Math.max(0, i);\n};\n\nexports.safeLiveIndex = safeLiveIndex;\n/**\n * Calculates the playlist end time\n *\n * @param {Object} playlist a media playlist object\n * @param {Number=} expired the amount of time that has\n *                  dropped off the front of the playlist in a live scenario\n * @param {Boolean|false} useSafeLiveEnd a boolean value indicating whether or not the\n *                        playlist end calculation should consider the safe live end\n *                        (truncate the playlist end by three segments). This is normally\n *                        used for calculating the end of the playlist's seekable range.\n * @returns {Number} the end time of playlist\n * @function playlistEnd\n */\nvar playlistEnd = function playlistEnd(playlist, expired, useSafeLiveEnd) {\n  if (!playlist || !playlist.segments) {\n    return null;\n  }\n  if (playlist.endList) {\n    return duration(playlist);\n  }\n\n  if (expired === null) {\n    return null;\n  }\n\n  expired = expired || 0;\n\n  var endSequence = useSafeLiveEnd ? safeLiveIndex(playlist) : playlist.segments.length;\n\n  return intervalDuration(playlist, playlist.mediaSequence + endSequence, expired);\n};\n\nexports.playlistEnd = playlistEnd;\n/**\n  * Calculates the interval of time that is currently seekable in a\n  * playlist. The returned time ranges are relative to the earliest\n  * moment in the specified playlist that is still available. A full\n  * seekable implementation for live streams would need to offset\n  * these values by the duration of content that has expired from the\n  * stream.\n  *\n  * @param {Object} playlist a media playlist object\n  * dropped off the front of the playlist in a live scenario\n  * @param {Number=} expired the amount of time that has\n  * dropped off the front of the playlist in a live scenario\n  * @return {TimeRanges} the periods of time that are valid targets\n  * for seeking\n  */\nvar seekable = function seekable(playlist, expired) {\n  var useSafeLiveEnd = true;\n  var seekableStart = expired || 0;\n  var seekableEnd = playlistEnd(playlist, expired, useSafeLiveEnd);\n\n  if (seekableEnd === null) {\n    return (0, _videoJs.createTimeRange)();\n  }\n  return (0, _videoJs.createTimeRange)(seekableStart, seekableEnd);\n};\n\nexports.seekable = seekable;\nvar isWholeNumber = function isWholeNumber(num) {\n  return num - Math.floor(num) === 0;\n};\n\nvar roundSignificantDigit = function roundSignificantDigit(increment, num) {\n  // If we have a whole number, just add 1 to it\n  if (isWholeNumber(num)) {\n    return num + increment * 0.1;\n  }\n\n  var numDecimalDigits = num.toString().split('.')[1].length;\n\n  for (var i = 1; i <= numDecimalDigits; i++) {\n    var scale = Math.pow(10, i);\n    var temp = num * scale;\n\n    if (isWholeNumber(temp) || i === numDecimalDigits) {\n      return (temp + increment) / scale;\n    }\n  }\n};\n\nvar ceilLeastSignificantDigit = roundSignificantDigit.bind(null, 1);\nvar floorLeastSignificantDigit = roundSignificantDigit.bind(null, -1);\n\n/**\n * Determine the index and estimated starting time of the segment that\n * contains a specified playback position in a media playlist.\n *\n * @param {Object} playlist the media playlist to query\n * @param {Number} currentTime The number of seconds since the earliest\n * possible position to determine the containing segment for\n * @param {Number} startIndex\n * @param {Number} startTime\n * @return {Object}\n */\nvar getMediaInfoForTime = function getMediaInfoForTime(playlist, currentTime, startIndex, startTime) {\n  var i = undefined;\n  var segment = undefined;\n  var numSegments = playlist.segments.length;\n\n  var time = currentTime - startTime;\n\n  if (time < 0) {\n    // Walk backward from startIndex in the playlist, adding durations\n    // until we find a segment that contains `time` and return it\n    if (startIndex > 0) {\n      for (i = startIndex - 1; i >= 0; i--) {\n        segment = playlist.segments[i];\n        time += floorLeastSignificantDigit(segment.duration);\n        if (time > 0) {\n          return {\n            mediaIndex: i,\n            startTime: startTime - sumDurations(playlist, startIndex, i)\n          };\n        }\n      }\n    }\n    // We were unable to find a good segment within the playlist\n    // so select the first segment\n    return {\n      mediaIndex: 0,\n      startTime: currentTime\n    };\n  }\n\n  // When startIndex is negative, we first walk forward to first segment\n  // adding target durations. If we \"run out of time\" before getting to\n  // the first segment, return the first segment\n  if (startIndex < 0) {\n    for (i = startIndex; i < 0; i++) {\n      time -= playlist.targetDuration;\n      if (time < 0) {\n        return {\n          mediaIndex: 0,\n          startTime: currentTime\n        };\n      }\n    }\n    startIndex = 0;\n  }\n\n  // Walk forward from startIndex in the playlist, subtracting durations\n  // until we find a segment that contains `time` and return it\n  for (i = startIndex; i < numSegments; i++) {\n    segment = playlist.segments[i];\n    time -= ceilLeastSignificantDigit(segment.duration);\n    if (time < 0) {\n      return {\n        mediaIndex: i,\n        startTime: startTime + sumDurations(playlist, startIndex, i)\n      };\n    }\n  }\n\n  // We are out of possible candidates so load the last one...\n  return {\n    mediaIndex: numSegments - 1,\n    startTime: currentTime\n  };\n};\n\nexports.getMediaInfoForTime = getMediaInfoForTime;\n/**\n * Check whether the playlist is blacklisted or not.\n *\n * @param {Object} playlist the media playlist object\n * @return {boolean} whether the playlist is blacklisted or not\n * @function isBlacklisted\n */\nvar isBlacklisted = function isBlacklisted(playlist) {\n  return playlist.excludeUntil && playlist.excludeUntil > Date.now();\n};\n\nexports.isBlacklisted = isBlacklisted;\n/**\n * Check whether the playlist is compatible with current playback configuration or has\n * been blacklisted permanently for being incompatible.\n *\n * @param {Object} playlist the media playlist object\n * @return {boolean} whether the playlist is incompatible or not\n * @function isIncompatible\n */\nvar isIncompatible = function isIncompatible(playlist) {\n  return playlist.excludeUntil && playlist.excludeUntil === Infinity;\n};\n\nexports.isIncompatible = isIncompatible;\n/**\n * Check whether the playlist is enabled or not.\n *\n * @param {Object} playlist the media playlist object\n * @return {boolean} whether the playlist is enabled or not\n * @function isEnabled\n */\nvar isEnabled = function isEnabled(playlist) {\n  var blacklisted = isBlacklisted(playlist);\n\n  return !playlist.disabled && !blacklisted;\n};\n\nexports.isEnabled = isEnabled;\n/**\n * Check whether the playlist has been manually disabled through the representations api.\n *\n * @param {Object} playlist the media playlist object\n * @return {boolean} whether the playlist is disabled manually or not\n * @function isDisabled\n */\nvar isDisabled = function isDisabled(playlist) {\n  return playlist.disabled;\n};\n\nexports.isDisabled = isDisabled;\n/**\n * Returns whether the current playlist is an AES encrypted HLS stream\n *\n * @return {Boolean} true if it's an AES encrypted HLS stream\n */\nvar isAes = function isAes(media) {\n  for (var i = 0; i < media.segments.length; i++) {\n    if (media.segments[i].key) {\n      return true;\n    }\n  }\n  return false;\n};\n\nexports.isAes = isAes;\n/**\n * Returns whether the current playlist contains fMP4\n *\n * @return {Boolean} true if the playlist contains fMP4\n */\nvar isFmp4 = function isFmp4(media) {\n  for (var i = 0; i < media.segments.length; i++) {\n    if (media.segments[i].map) {\n      return true;\n    }\n  }\n  return false;\n};\n\nexports.isFmp4 = isFmp4;\n/**\n * Checks if the playlist has a value for the specified attribute\n *\n * @param {String} attr\n *        Attribute to check for\n * @param {Object} playlist\n *        The media playlist object\n * @return {Boolean}\n *         Whether the playlist contains a value for the attribute or not\n * @function hasAttribute\n */\nvar hasAttribute = function hasAttribute(attr, playlist) {\n  return playlist.attributes && playlist.attributes[attr];\n};\n\nexports.hasAttribute = hasAttribute;\n/**\n * Estimates the time required to complete a segment download from the specified playlist\n *\n * @param {Number} segmentDuration\n *        Duration of requested segment\n * @param {Number} bandwidth\n *        Current measured bandwidth of the player\n * @param {Object} playlist\n *        The media playlist object\n * @param {Number=} bytesReceived\n *        Number of bytes already received for the request. Defaults to 0\n * @return {Number|NaN}\n *         The estimated time to request the segment. NaN if bandwidth information for\n *         the given playlist is unavailable\n * @function estimateSegmentRequestTime\n */\nvar estimateSegmentRequestTime = function estimateSegmentRequestTime(segmentDuration, bandwidth, playlist) {\n  var bytesReceived = arguments.length <= 3 || arguments[3] === undefined ? 0 : arguments[3];\n\n  if (!hasAttribute('BANDWIDTH', playlist)) {\n    return NaN;\n  }\n\n  var size = segmentDuration * playlist.attributes.BANDWIDTH;\n\n  return (size - bytesReceived * 8) / bandwidth;\n};\n\nexports.estimateSegmentRequestTime = estimateSegmentRequestTime;\n/*\n * Returns whether the current playlist is the lowest rendition\n *\n * @return {Boolean} true if on lowest rendition\n */\nvar isLowestEnabledRendition = function isLowestEnabledRendition(master, media) {\n  if (master.playlists.length === 1) {\n    return true;\n  }\n\n  var currentBandwidth = media.attributes.BANDWIDTH || Number.MAX_VALUE;\n\n  return master.playlists.filter(function (playlist) {\n    if (!isEnabled(playlist)) {\n      return false;\n    }\n\n    return (playlist.attributes.BANDWIDTH || 0) < currentBandwidth;\n  }).length === 0;\n};\n\nexports.isLowestEnabledRendition = isLowestEnabledRendition;\n// exports\nexports['default'] = {\n  duration: duration,\n  seekable: seekable,\n  safeLiveIndex: safeLiveIndex,\n  getMediaInfoForTime: getMediaInfoForTime,\n  isEnabled: isEnabled,\n  isDisabled: isDisabled,\n  isBlacklisted: isBlacklisted,\n  isIncompatible: isIncompatible,\n  playlistEnd: playlistEnd,\n  isAes: isAes,\n  isFmp4: isFmp4,\n  hasAttribute: hasAttribute,\n  estimateSegmentRequestTime: estimateSegmentRequestTime,\n  isLowestEnabledRendition: isLowestEnabledRendition\n};\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{\"global/window\":32}],12:[function(require,module,exports){\n(function (global){\n/**\n * ranges\n *\n * Utilities for working with TimeRanges.\n *\n */\n\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nvar _videoJs = (typeof window !== \"undefined\" ? window['videojs'] : typeof global !== \"undefined\" ? global['videojs'] : null);\n\nvar _videoJs2 = _interopRequireDefault(_videoJs);\n\n// Fudge factor to account for TimeRanges rounding\nvar TIME_FUDGE_FACTOR = 1 / 30;\n// Comparisons between time values such as current time and the end of the buffered range\n// can be misleading because of precision differences or when the current media has poorly\n// aligned audio and video, which can cause values to be slightly off from what you would\n// expect. This value is what we consider to be safe to use in such comparisons to account\n// for these scenarios.\nvar SAFE_TIME_DELTA = TIME_FUDGE_FACTOR * 3;\n\n/**\n * Clamps a value to within a range\n * @param {Number} num - the value to clamp\n * @param {Number} start - the start of the range to clamp within, inclusive\n * @param {Number} end - the end of the range to clamp within, inclusive\n * @return {Number}\n */\nvar clamp = function clamp(num, _ref) {\n  var _ref2 = _slicedToArray(_ref, 2);\n\n  var start = _ref2[0];\n  var end = _ref2[1];\n\n  return Math.min(Math.max(start, num), end);\n};\nvar filterRanges = function filterRanges(timeRanges, predicate) {\n  var results = [];\n  var i = undefined;\n\n  if (timeRanges && timeRanges.length) {\n    // Search for ranges that match the predicate\n    for (i = 0; i < timeRanges.length; i++) {\n      if (predicate(timeRanges.start(i), timeRanges.end(i))) {\n        results.push([timeRanges.start(i), timeRanges.end(i)]);\n      }\n    }\n  }\n\n  return _videoJs2['default'].createTimeRanges(results);\n};\n\n/**\n * Attempts to find the buffered TimeRange that contains the specified\n * time.\n * @param {TimeRanges} buffered - the TimeRanges object to query\n * @param {number} time  - the time to filter on.\n * @returns {TimeRanges} a new TimeRanges object\n */\nvar findRange = function findRange(buffered, time) {\n  return filterRanges(buffered, function (start, end) {\n    return start - TIME_FUDGE_FACTOR <= time && end + TIME_FUDGE_FACTOR >= time;\n  });\n};\n\n/**\n * Returns the TimeRanges that begin later than the specified time.\n * @param {TimeRanges} timeRanges - the TimeRanges object to query\n * @param {number} time - the time to filter on.\n * @returns {TimeRanges} a new TimeRanges object.\n */\nvar findNextRange = function findNextRange(timeRanges, time) {\n  return filterRanges(timeRanges, function (start) {\n    return start - TIME_FUDGE_FACTOR >= time;\n  });\n};\n\n/**\n * Returns gaps within a list of TimeRanges\n * @param {TimeRanges} buffered - the TimeRanges object\n * @return {TimeRanges} a TimeRanges object of gaps\n */\nvar findGaps = function findGaps(buffered) {\n  if (buffered.length < 2) {\n    return _videoJs2['default'].createTimeRanges();\n  }\n\n  var ranges = [];\n\n  for (var i = 1; i < buffered.length; i++) {\n    var start = buffered.end(i - 1);\n    var end = buffered.start(i);\n\n    ranges.push([start, end]);\n  }\n\n  return _videoJs2['default'].createTimeRanges(ranges);\n};\n\n/**\n * Search for a likely end time for the segment that was just appened\n * based on the state of the `buffered` property before and after the\n * append. If we fin only one such uncommon end-point return it.\n * @param {TimeRanges} original - the buffered time ranges before the update\n * @param {TimeRanges} update - the buffered time ranges after the update\n * @returns {Number|null} the end time added between `original` and `update`,\n * or null if one cannot be unambiguously determined.\n */\nvar findSoleUncommonTimeRangesEnd = function findSoleUncommonTimeRangesEnd(original, update) {\n  var i = undefined;\n  var start = undefined;\n  var end = undefined;\n  var result = [];\n  var edges = [];\n\n  // In order to qualify as a possible candidate, the end point must:\n  //  1) Not have already existed in the `original` ranges\n  //  2) Not result from the shrinking of a range that already existed\n  //     in the `original` ranges\n  //  3) Not be contained inside of a range that existed in `original`\n  var overlapsCurrentEnd = function overlapsCurrentEnd(span) {\n    return span[0] <= end && span[1] >= end;\n  };\n\n  if (original) {\n    // Save all the edges in the `original` TimeRanges object\n    for (i = 0; i < original.length; i++) {\n      start = original.start(i);\n      end = original.end(i);\n\n      edges.push([start, end]);\n    }\n  }\n\n  if (update) {\n    // Save any end-points in `update` that are not in the `original`\n    // TimeRanges object\n    for (i = 0; i < update.length; i++) {\n      start = update.start(i);\n      end = update.end(i);\n\n      if (edges.some(overlapsCurrentEnd)) {\n        continue;\n      }\n\n      // at this point it must be a unique non-shrinking end edge\n      result.push(end);\n    }\n  }\n\n  // we err on the side of caution and return null if didn't find\n  // exactly *one* differing end edge in the search above\n  if (result.length !== 1) {\n    return null;\n  }\n\n  return result[0];\n};\n\n/**\n * Calculate the intersection of two TimeRanges\n * @param {TimeRanges} bufferA\n * @param {TimeRanges} bufferB\n * @returns {TimeRanges} The interesection of `bufferA` with `bufferB`\n */\nvar bufferIntersection = function bufferIntersection(bufferA, bufferB) {\n  var start = null;\n  var end = null;\n  var arity = 0;\n  var extents = [];\n  var ranges = [];\n\n  if (!bufferA || !bufferA.length || !bufferB || !bufferB.length) {\n    return _videoJs2['default'].createTimeRange();\n  }\n\n  // Handle the case where we have both buffers and create an\n  // intersection of the two\n  var count = bufferA.length;\n\n  // A) Gather up all start and end times\n  while (count--) {\n    extents.push({ time: bufferA.start(count), type: 'start' });\n    extents.push({ time: bufferA.end(count), type: 'end' });\n  }\n  count = bufferB.length;\n  while (count--) {\n    extents.push({ time: bufferB.start(count), type: 'start' });\n    extents.push({ time: bufferB.end(count), type: 'end' });\n  }\n  // B) Sort them by time\n  extents.sort(function (a, b) {\n    return a.time - b.time;\n  });\n\n  // C) Go along one by one incrementing arity for start and decrementing\n  //    arity for ends\n  for (count = 0; count < extents.length; count++) {\n    if (extents[count].type === 'start') {\n      arity++;\n\n      // D) If arity is ever incremented to 2 we are entering an\n      //    overlapping range\n      if (arity === 2) {\n        start = extents[count].time;\n      }\n    } else if (extents[count].type === 'end') {\n      arity--;\n\n      // E) If arity is ever decremented to 1 we leaving an\n      //    overlapping range\n      if (arity === 1) {\n        end = extents[count].time;\n      }\n    }\n\n    // F) Record overlapping ranges\n    if (start !== null && end !== null) {\n      ranges.push([start, end]);\n      start = null;\n      end = null;\n    }\n  }\n\n  return _videoJs2['default'].createTimeRanges(ranges);\n};\n\n/**\n * Calculates the percentage of `segmentRange` that overlaps the\n * `buffered` time ranges.\n * @param {TimeRanges} segmentRange - the time range that the segment\n * covers adjusted according to currentTime\n * @param {TimeRanges} referenceRange - the original time range that the\n * segment covers\n * @param {Number} currentTime - time in seconds where the current playback\n * is at\n * @param {TimeRanges} buffered - the currently buffered time ranges\n * @returns {Number} percent of the segment currently buffered\n */\nvar calculateBufferedPercent = function calculateBufferedPercent(adjustedRange, referenceRange, currentTime, buffered) {\n  var referenceDuration = referenceRange.end(0) - referenceRange.start(0);\n  var adjustedDuration = adjustedRange.end(0) - adjustedRange.start(0);\n  var bufferMissingFromAdjusted = referenceDuration - adjustedDuration;\n  var adjustedIntersection = bufferIntersection(adjustedRange, buffered);\n  var referenceIntersection = bufferIntersection(referenceRange, buffered);\n  var adjustedOverlap = 0;\n  var referenceOverlap = 0;\n\n  var count = adjustedIntersection.length;\n\n  while (count--) {\n    adjustedOverlap += adjustedIntersection.end(count) - adjustedIntersection.start(count);\n\n    // If the current overlap segment starts at currentTime, then increase the\n    // overlap duration so that it actually starts at the beginning of referenceRange\n    // by including the difference between the two Range's durations\n    // This is a work around for the way Flash has no buffer before currentTime\n    if (adjustedIntersection.start(count) === currentTime) {\n      adjustedOverlap += bufferMissingFromAdjusted;\n    }\n  }\n\n  count = referenceIntersection.length;\n\n  while (count--) {\n    referenceOverlap += referenceIntersection.end(count) - referenceIntersection.start(count);\n  }\n\n  // Use whichever value is larger for the percentage-buffered since that value\n  // is likely more accurate because the only way\n  return Math.max(adjustedOverlap, referenceOverlap) / referenceDuration * 100;\n};\n\n/**\n * Return the amount of a range specified by the startOfSegment and segmentDuration\n * overlaps the current buffered content.\n *\n * @param {Number} startOfSegment - the time where the segment begins\n * @param {Number} segmentDuration - the duration of the segment in seconds\n * @param {Number} currentTime - time in seconds where the current playback\n * is at\n * @param {TimeRanges} buffered - the state of the buffer\n * @returns {Number} percentage of the segment's time range that is\n * already in `buffered`\n */\nvar getSegmentBufferedPercent = function getSegmentBufferedPercent(startOfSegment, segmentDuration, currentTime, buffered) {\n  var endOfSegment = startOfSegment + segmentDuration;\n\n  // The entire time range of the segment\n  var originalSegmentRange = _videoJs2['default'].createTimeRanges([[startOfSegment, endOfSegment]]);\n\n  // The adjusted segment time range that is setup such that it starts\n  // no earlier than currentTime\n  // Flash has no notion of a back-buffer so adjustedSegmentRange adjusts\n  // for that and the function will still return 100% if a only half of a\n  // segment is actually in the buffer as long as the currentTime is also\n  // half-way through the segment\n  var adjustedSegmentRange = _videoJs2['default'].createTimeRanges([[clamp(startOfSegment, [currentTime, endOfSegment]), endOfSegment]]);\n\n  // This condition happens when the currentTime is beyond the segment's\n  // end time\n  if (adjustedSegmentRange.start(0) === adjustedSegmentRange.end(0)) {\n    return 0;\n  }\n\n  var percent = calculateBufferedPercent(adjustedSegmentRange, originalSegmentRange, currentTime, buffered);\n\n  // If the segment is reported as having a zero duration, return 0%\n  // since it is likely that we will need to fetch the segment\n  if (isNaN(percent) || percent === Infinity || percent === -Infinity) {\n    return 0;\n  }\n\n  return percent;\n};\n\n/**\n * Gets a human readable string for a TimeRange\n *\n * @param {TimeRange} range\n * @returns {String} a human readable string\n */\nvar printableRange = function printableRange(range) {\n  var strArr = [];\n\n  if (!range || !range.length) {\n    return '';\n  }\n\n  for (var i = 0; i < range.length; i++) {\n    strArr.push(range.start(i) + ' => ' + range.end(i));\n  }\n\n  return strArr.join(', ');\n};\n\n/**\n * Calculates the amount of time left in seconds until the player hits the end of the\n * buffer and causes a rebuffer\n *\n * @param {TimeRange} buffered\n *        The state of the buffer\n * @param {Numnber} currentTime\n *        The current time of the player\n * @param {Number} playbackRate\n *        The current playback rate of the player. Defaults to 1.\n * @return {Number}\n *         Time until the player has to start rebuffering in seconds.\n * @function timeUntilRebuffer\n */\nvar timeUntilRebuffer = function timeUntilRebuffer(buffered, currentTime) {\n  var playbackRate = arguments.length <= 2 || arguments[2] === undefined ? 1 : arguments[2];\n\n  var bufferedEnd = buffered.length ? buffered.end(buffered.length - 1) : 0;\n\n  return (bufferedEnd - currentTime) / playbackRate;\n};\n\nexports['default'] = {\n  findRange: findRange,\n  findNextRange: findNextRange,\n  findGaps: findGaps,\n  findSoleUncommonTimeRangesEnd: findSoleUncommonTimeRangesEnd,\n  getSegmentBufferedPercent: getSegmentBufferedPercent,\n  TIME_FUDGE_FACTOR: TIME_FUDGE_FACTOR,\n  SAFE_TIME_DELTA: SAFE_TIME_DELTA,\n  printableRange: printableRange,\n  timeUntilRebuffer: timeUntilRebuffer\n};\nmodule.exports = exports['default'];\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{}],13:[function(require,module,exports){\n(function (global){\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nvar _videoJs = (typeof window !== \"undefined\" ? window['videojs'] : typeof global !== \"undefined\" ? global['videojs'] : null);\n\nvar _videoJs2 = _interopRequireDefault(_videoJs);\n\nvar defaultOptions = {\n  errorInterval: 30,\n  getSource: function getSource(next) {\n    var tech = this.tech({ IWillNotUseThisInPlugins: true });\n    var sourceObj = tech.currentSource_;\n\n    return next(sourceObj);\n  }\n};\n\n/**\n * Main entry point for the plugin\n *\n * @param {Player} player a reference to a videojs Player instance\n * @param {Object} [options] an object with plugin options\n * @private\n */\nvar initPlugin = function initPlugin(player, options) {\n  var lastCalled = 0;\n  var seekTo = 0;\n  var localOptions = _videoJs2['default'].mergeOptions(defaultOptions, options);\n\n  player.ready(function () {\n    player.trigger({ type: 'usage', name: 'hls-error-reload-initialized' });\n  });\n\n  /**\n   * Player modifications to perform that must wait until `loadedmetadata`\n   * has been triggered\n   *\n   * @private\n   */\n  var loadedMetadataHandler = function loadedMetadataHandler() {\n    if (seekTo) {\n      player.currentTime(seekTo);\n    }\n  };\n\n  /**\n   * Set the source on the player element, play, and seek if necessary\n   *\n   * @param {Object} sourceObj An object specifying the source url and mime-type to play\n   * @private\n   */\n  var setSource = function setSource(sourceObj) {\n    if (sourceObj === null || sourceObj === undefined) {\n      return;\n    }\n    seekTo = player.duration() !== Infinity && player.currentTime() || 0;\n\n    player.one('loadedmetadata', loadedMetadataHandler);\n\n    player.src(sourceObj);\n    player.trigger({ type: 'usage', name: 'hls-error-reload' });\n    player.play();\n  };\n\n  /**\n   * Attempt to get a source from either the built-in getSource function\n   * or a custom function provided via the options\n   *\n   * @private\n   */\n  var errorHandler = function errorHandler() {\n    // Do not attempt to reload the source if a source-reload occurred before\n    // 'errorInterval' time has elapsed since the last source-reload\n    if (Date.now() - lastCalled < localOptions.errorInterval * 1000) {\n      player.trigger({ type: 'usage', name: 'hls-error-reload-canceled' });\n      return;\n    }\n\n    if (!localOptions.getSource || typeof localOptions.getSource !== 'function') {\n      _videoJs2['default'].log.error('ERROR: reloadSourceOnError - The option getSource must be a function!');\n      return;\n    }\n    lastCalled = Date.now();\n\n    return localOptions.getSource.call(player, setSource);\n  };\n\n  /**\n   * Unbind any event handlers that were bound by the plugin\n   *\n   * @private\n   */\n  var cleanupEvents = function cleanupEvents() {\n    player.off('loadedmetadata', loadedMetadataHandler);\n    player.off('error', errorHandler);\n    player.off('dispose', cleanupEvents);\n  };\n\n  /**\n   * Cleanup before re-initializing the plugin\n   *\n   * @param {Object} [newOptions] an object with plugin options\n   * @private\n   */\n  var reinitPlugin = function reinitPlugin(newOptions) {\n    cleanupEvents();\n    initPlugin(player, newOptions);\n  };\n\n  player.on('error', errorHandler);\n  player.on('dispose', cleanupEvents);\n\n  // Overwrite the plugin function so that we can correctly cleanup before\n  // initializing the plugin\n  player.reloadSourceOnError = reinitPlugin;\n};\n\n/**\n * Reload the source when an error is detected as long as there\n * wasn't an error previously within the last 30 seconds\n *\n * @param {Object} [options] an object with plugin options\n */\nvar reloadSourceOnError = function reloadSourceOnError(options) {\n  initPlugin(this, options);\n};\n\nexports['default'] = reloadSourceOnError;\nmodule.exports = exports['default'];\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{}],14:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\nvar _playlistJs = require('./playlist.js');\n\n/**\n * Returns a function that acts as the Enable/disable playlist function.\n *\n * @param {PlaylistLoader} loader - The master playlist loader\n * @param {String} playlistUri - uri of the playlist\n * @param {Function} changePlaylistFn - A function to be called after a\n * playlist's enabled-state has been changed. Will NOT be called if a\n * playlist's enabled-state is unchanged\n * @param {Boolean=} enable - Value to set the playlist enabled-state to\n * or if undefined returns the current enabled-state for the playlist\n * @return {Function} Function for setting/getting enabled\n */\nvar enableFunction = function enableFunction(loader, playlistUri, changePlaylistFn) {\n  return function (enable) {\n    var playlist = loader.master.playlists[playlistUri];\n    var incompatible = (0, _playlistJs.isIncompatible)(playlist);\n    var currentlyEnabled = (0, _playlistJs.isEnabled)(playlist);\n\n    if (typeof enable === 'undefined') {\n      return currentlyEnabled;\n    }\n\n    if (enable) {\n      delete playlist.disabled;\n    } else {\n      playlist.disabled = true;\n    }\n\n    if (enable !== currentlyEnabled && !incompatible) {\n      // Ensure the outside world knows about our changes\n      changePlaylistFn();\n      if (enable) {\n        loader.trigger('renditionenabled');\n      } else {\n        loader.trigger('renditiondisabled');\n      }\n    }\n    return enable;\n  };\n};\n\n/**\n * The representation object encapsulates the publicly visible information\n * in a media playlist along with a setter/getter-type function (enabled)\n * for changing the enabled-state of a particular playlist entry\n *\n * @class Representation\n */\n\nvar Representation = function Representation(hlsHandler, playlist, id) {\n  _classCallCheck(this, Representation);\n\n  // Get a reference to a bound version of fastQualityChange_\n  var fastChangeFunction = hlsHandler.masterPlaylistController_.fastQualityChange_.bind(hlsHandler.masterPlaylistController_);\n\n  // some playlist attributes are optional\n  if (playlist.attributes.RESOLUTION) {\n    var resolution = playlist.attributes.RESOLUTION;\n\n    this.width = resolution.width;\n    this.height = resolution.height;\n  }\n\n  this.bandwidth = playlist.attributes.BANDWIDTH;\n\n  // The id is simply the ordinality of the media playlist\n  // within the master playlist\n  this.id = id;\n\n  // Partially-apply the enableFunction to create a playlist-\n  // specific variant\n  this.enabled = enableFunction(hlsHandler.playlists, playlist.uri, fastChangeFunction);\n}\n\n/**\n * A mixin function that adds the `representations` api to an instance\n * of the HlsHandler class\n * @param {HlsHandler} hlsHandler - An instance of HlsHandler to add the\n * representation API into\n */\n;\n\nvar renditionSelectionMixin = function renditionSelectionMixin(hlsHandler) {\n  var playlists = hlsHandler.playlists;\n\n  // Add a single API-specific function to the HlsHandler instance\n  hlsHandler.representations = function () {\n    return playlists.master.playlists.filter(function (media) {\n      return !(0, _playlistJs.isIncompatible)(media);\n    }).map(function (e, i) {\n      return new Representation(hlsHandler, e, e.uri);\n    });\n  };\n};\n\nexports['default'] = renditionSelectionMixin;\nmodule.exports = exports['default'];\n},{\"./playlist.js\":11}],15:[function(require,module,exports){\n/**\n * @file resolve-url.js\n */\n\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nvar _urlToolkit = require('url-toolkit');\n\nvar _urlToolkit2 = _interopRequireDefault(_urlToolkit);\n\nvar _globalWindow = require('global/window');\n\nvar _globalWindow2 = _interopRequireDefault(_globalWindow);\n\nvar resolveUrl = function resolveUrl(baseURL, relativeURL) {\n  // return early if we don't need to resolve\n  if (/^[a-z]+:/i.test(relativeURL)) {\n    return relativeURL;\n  }\n\n  // if the base URL is relative then combine with the current location\n  if (!/\\/\\//i.test(baseURL)) {\n    baseURL = _urlToolkit2['default'].buildAbsoluteURL(_globalWindow2['default'].location.href, baseURL);\n  }\n\n  return _urlToolkit2['default'].buildAbsoluteURL(baseURL, relativeURL);\n};\n\nexports['default'] = resolveUrl;\nmodule.exports = exports['default'];\n},{\"global/window\":32,\"url-toolkit\":63}],16:[function(require,module,exports){\n(function (global){\n/**\n * @file segment-loader.js\n */\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\nvar _get = function get(_x4, _x5, _x6) { var _again = true; _function: while (_again) { var object = _x4, property = _x5, receiver = _x6; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x4 = parent; _x5 = property; _x6 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar _playlist = require('./playlist');\n\nvar _playlist2 = _interopRequireDefault(_playlist);\n\nvar _videoJs = (typeof window !== \"undefined\" ? window['videojs'] : typeof global !== \"undefined\" ? global['videojs'] : null);\n\nvar _videoJs2 = _interopRequireDefault(_videoJs);\n\nvar _sourceUpdater = require('./source-updater');\n\nvar _sourceUpdater2 = _interopRequireDefault(_sourceUpdater);\n\nvar _config = require('./config');\n\nvar _config2 = _interopRequireDefault(_config);\n\nvar _globalWindow = require('global/window');\n\nvar _globalWindow2 = _interopRequireDefault(_globalWindow);\n\nvar _videojsContribMediaSourcesEs5RemoveCuesFromTrackJs = require('videojs-contrib-media-sources/es5/remove-cues-from-track.js');\n\nvar _videojsContribMediaSourcesEs5RemoveCuesFromTrackJs2 = _interopRequireDefault(_videojsContribMediaSourcesEs5RemoveCuesFromTrackJs);\n\nvar _binUtils = require('./bin-utils');\n\nvar _mediaSegmentRequest = require('./media-segment-request');\n\nvar _ranges = require('./ranges');\n\nvar _playlistSelectors = require('./playlist-selectors');\n\n// in ms\nvar CHECK_BUFFER_DELAY = 500;\n\n/**\n * Determines if we should call endOfStream on the media source based\n * on the state of the buffer or if appened segment was the final\n * segment in the playlist.\n *\n * @param {Object} playlist a media playlist object\n * @param {Object} mediaSource the MediaSource object\n * @param {Number} segmentIndex the index of segment we last appended\n * @returns {Boolean} do we need to call endOfStream on the MediaSource\n */\nvar detectEndOfStream = function detectEndOfStream(playlist, mediaSource, segmentIndex) {\n  if (!playlist || !mediaSource) {\n    return false;\n  }\n\n  var segments = playlist.segments;\n\n  // determine a few boolean values to help make the branch below easier\n  // to read\n  var appendedLastSegment = segmentIndex === segments.length;\n\n  // if we've buffered to the end of the video, we need to call endOfStream\n  // so that MediaSources can trigger the `ended` event when it runs out of\n  // buffered data instead of waiting for me\n  return playlist.endList && mediaSource.readyState === 'open' && appendedLastSegment;\n};\n\nvar finite = function finite(num) {\n  return typeof num === 'number' && isFinite(num);\n};\n\nvar illegalMediaSwitch = function illegalMediaSwitch(loaderType, startingMedia, newSegmentMedia) {\n  // Although these checks should most likely cover non 'main' types, for now it narrows\n  // the scope of our checks.\n  if (loaderType !== 'main' || !startingMedia || !newSegmentMedia) {\n    return null;\n  }\n\n  if (!newSegmentMedia.containsAudio && !newSegmentMedia.containsVideo) {\n    return 'Neither audio nor video found in segment.';\n  }\n\n  if (startingMedia.containsVideo && !newSegmentMedia.containsVideo) {\n    return 'Only audio found in segment when we expected video.' + ' We can\\'t switch to audio only from a stream that had video.' + ' To get rid of this message, please add codec information to the manifest.';\n  }\n\n  if (!startingMedia.containsVideo && newSegmentMedia.containsVideo) {\n    return 'Video found in segment when we expected only audio.' + ' We can\\'t switch to a stream with video from an audio only stream.' + ' To get rid of this message, please add codec information to the manifest.';\n  }\n\n  return null;\n};\n\nexports.illegalMediaSwitch = illegalMediaSwitch;\n/**\n * Calculates a time value that is safe to remove from the back buffer without interupting\n * playback.\n *\n * @param {TimeRange} seekable\n *        The current seekable range\n * @param {Number} currentTime\n *        The current time of the player\n * @param {Number} targetDuration\n *        The target duration of the current playlist\n * @return {Number}\n *         Time that is safe to remove from the back buffer without interupting playback\n */\nvar safeBackBufferTrimTime = function safeBackBufferTrimTime(seekable, currentTime, targetDuration) {\n  var removeToTime = undefined;\n\n  if (seekable.length && seekable.start(0) > 0 && seekable.start(0) < currentTime) {\n    // If we have a seekable range use that as the limit for what can be removed safely\n    removeToTime = seekable.start(0);\n  } else {\n    // otherwise remove anything older than 30 seconds before the current play head\n    removeToTime = currentTime - 30;\n  }\n\n  // Don't allow removing from the buffer within target duration of current time\n  // to avoid the possibility of removing the GOP currently being played which could\n  // cause playback stalls.\n  return Math.min(removeToTime, currentTime - targetDuration);\n};\n\nexports.safeBackBufferTrimTime = safeBackBufferTrimTime;\n/**\n * An object that manages segment loading and appending.\n *\n * @class SegmentLoader\n * @param {Object} options required and optional options\n * @extends videojs.EventTarget\n */\n\nvar SegmentLoader = (function (_videojs$EventTarget) {\n  _inherits(SegmentLoader, _videojs$EventTarget);\n\n  function SegmentLoader(settings) {\n    var _this = this;\n\n    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n    _classCallCheck(this, SegmentLoader);\n\n    _get(Object.getPrototypeOf(SegmentLoader.prototype), 'constructor', this).call(this);\n    // check pre-conditions\n    if (!settings) {\n      throw new TypeError('Initialization settings are required');\n    }\n    if (typeof settings.currentTime !== 'function') {\n      throw new TypeError('No currentTime getter specified');\n    }\n    if (!settings.mediaSource) {\n      throw new TypeError('No MediaSource specified');\n    }\n    // public properties\n    this.state = 'INIT';\n    this.bandwidth = settings.bandwidth;\n    this.throughput = { rate: 0, count: 0 };\n    this.roundTrip = NaN;\n    this.resetStats_();\n    this.mediaIndex = null;\n\n    // private settings\n    this.hasPlayed_ = settings.hasPlayed;\n    this.currentTime_ = settings.currentTime;\n    this.seekable_ = settings.seekable;\n    this.seeking_ = settings.seeking;\n    this.duration_ = settings.duration;\n    this.mediaSource_ = settings.mediaSource;\n    this.hls_ = settings.hls;\n    this.loaderType_ = settings.loaderType;\n    this.startingMedia_ = void 0;\n    this.segmentMetadataTrack_ = settings.segmentMetadataTrack;\n    this.goalBufferLength_ = settings.goalBufferLength;\n\n    // private instance variables\n    this.checkBufferTimeout_ = null;\n    this.error_ = void 0;\n    this.currentTimeline_ = -1;\n    this.pendingSegment_ = null;\n    this.mimeType_ = null;\n    this.sourceUpdater_ = null;\n    this.xhrOptions_ = null;\n\n    // Fragmented mp4 playback\n    this.activeInitSegmentId_ = null;\n    this.initSegments_ = {};\n\n    this.decrypter_ = settings.decrypter;\n\n    // Manages the tracking and generation of sync-points, mappings\n    // between a time in the display time and a segment index within\n    // a playlist\n    this.syncController_ = settings.syncController;\n    this.syncPoint_ = {\n      segmentIndex: 0,\n      time: 0\n    };\n\n    this.syncController_.on('syncinfoupdate', function () {\n      return _this.trigger('syncinfoupdate');\n    });\n\n    this.mediaSource_.addEventListener('sourceopen', function () {\n      return _this.ended_ = false;\n    });\n\n    // ...for determining the fetch location\n    this.fetchAtBuffer_ = false;\n\n    if (options.debug) {\n      this.logger_ = _videoJs2['default'].log.bind(_videoJs2['default'], 'segment-loader', this.loaderType_, '->');\n    }\n  }\n\n  /**\n   * reset all of our media stats\n   *\n   * @private\n   */\n\n  _createClass(SegmentLoader, [{\n    key: 'resetStats_',\n    value: function resetStats_() {\n      this.mediaBytesTransferred = 0;\n      this.mediaRequests = 0;\n      this.mediaRequestsAborted = 0;\n      this.mediaRequestsTimedout = 0;\n      this.mediaRequestsErrored = 0;\n      this.mediaTransferDuration = 0;\n      this.mediaSecondsLoaded = 0;\n    }\n\n    /**\n     * dispose of the SegmentLoader and reset to the default state\n     */\n  }, {\n    key: 'dispose',\n    value: function dispose() {\n      this.state = 'DISPOSED';\n      this.pause();\n      this.abort_();\n      if (this.sourceUpdater_) {\n        this.sourceUpdater_.dispose();\n      }\n      this.resetStats_();\n    }\n\n    /**\n     * abort anything that is currently doing on with the SegmentLoader\n     * and reset to a default state\n     */\n  }, {\n    key: 'abort',\n    value: function abort() {\n      if (this.state !== 'WAITING') {\n        if (this.pendingSegment_) {\n          this.pendingSegment_ = null;\n        }\n        return;\n      }\n\n      this.abort_();\n\n      // We aborted the requests we were waiting on, so reset the loader's state to READY\n      // since we are no longer \"waiting\" on any requests. XHR callback is not always run\n      // when the request is aborted. This will prevent the loader from being stuck in the\n      // WAITING state indefinitely.\n      this.state = 'READY';\n\n      // don't wait for buffer check timeouts to begin fetching the\n      // next segment\n      if (!this.paused()) {\n        this.monitorBuffer_();\n      }\n    }\n\n    /**\n     * abort all pending xhr requests and null any pending segements\n     *\n     * @private\n     */\n  }, {\n    key: 'abort_',\n    value: function abort_() {\n      if (this.pendingSegment_) {\n        this.pendingSegment_.abortRequests();\n      }\n\n      // clear out the segment being processed\n      this.pendingSegment_ = null;\n    }\n\n    /**\n     * set an error on the segment loader and null out any pending segements\n     *\n     * @param {Error} error the error to set on the SegmentLoader\n     * @return {Error} the error that was set or that is currently set\n     */\n  }, {\n    key: 'error',\n    value: function error(_error) {\n      if (typeof _error !== 'undefined') {\n        this.error_ = _error;\n      }\n\n      this.pendingSegment_ = null;\n      return this.error_;\n    }\n  }, {\n    key: 'endOfStream',\n    value: function endOfStream() {\n      this.ended_ = true;\n      this.pause();\n      this.trigger('ended');\n    }\n\n    /**\n     * Indicates which time ranges are buffered\n     *\n     * @return {TimeRange}\n     *         TimeRange object representing the current buffered ranges\n     */\n  }, {\n    key: 'buffered_',\n    value: function buffered_() {\n      if (!this.sourceUpdater_) {\n        return _videoJs2['default'].createTimeRanges();\n      }\n\n      return this.sourceUpdater_.buffered();\n    }\n\n    /**\n     * Gets and sets init segment for the provided map\n     *\n     * @param {Object} map\n     *        The map object representing the init segment to get or set\n     * @param {Boolean=} set\n     *        If true, the init segment for the provided map should be saved\n     * @return {Object}\n     *         map object for desired init segment\n     */\n  }, {\n    key: 'initSegment',\n    value: function initSegment(map) {\n      var set = arguments.length <= 1 || arguments[1] === undefined ? false : arguments[1];\n\n      if (!map) {\n        return null;\n      }\n\n      var id = (0, _binUtils.initSegmentId)(map);\n      var storedMap = this.initSegments_[id];\n\n      if (set && !storedMap && map.bytes) {\n        this.initSegments_[id] = storedMap = {\n          resolvedUri: map.resolvedUri,\n          byterange: map.byterange,\n          bytes: map.bytes\n        };\n      }\n\n      return storedMap || map;\n    }\n\n    /**\n     * Returns true if all configuration required for loading is present, otherwise false.\n     *\n     * @return {Boolean} True if the all configuration is ready for loading\n     * @private\n     */\n  }, {\n    key: 'couldBeginLoading_',\n    value: function couldBeginLoading_() {\n      return this.playlist_ && (\n      // the source updater is created when init_ is called, so either having a\n      // source updater or being in the INIT state with a mimeType is enough\n      // to say we have all the needed configuration to start loading.\n      this.sourceUpdater_ || this.mimeType_ && this.state === 'INIT') && !this.paused();\n    }\n\n    /**\n     * load a playlist and start to fill the buffer\n     */\n  }, {\n    key: 'load',\n    value: function load() {\n      // un-pause\n      this.monitorBuffer_();\n\n      // if we don't have a playlist yet, keep waiting for one to be\n      // specified\n      if (!this.playlist_) {\n        return;\n      }\n\n      // not sure if this is the best place for this\n      this.syncController_.setDateTimeMapping(this.playlist_);\n\n      // if all the configuration is ready, initialize and begin loading\n      if (this.state === 'INIT' && this.couldBeginLoading_()) {\n        return this.init_();\n      }\n\n      // if we're in the middle of processing a segment already, don't\n      // kick off an additional segment request\n      if (!this.couldBeginLoading_() || this.state !== 'READY' && this.state !== 'INIT') {\n        return;\n      }\n\n      this.state = 'READY';\n    }\n\n    /**\n     * Once all the starting parameters have been specified, begin\n     * operation. This method should only be invoked from the INIT\n     * state.\n     *\n     * @private\n     */\n  }, {\n    key: 'init_',\n    value: function init_() {\n      this.state = 'READY';\n      this.sourceUpdater_ = new _sourceUpdater2['default'](this.mediaSource_, this.mimeType_);\n      this.resetEverything();\n      return this.monitorBuffer_();\n    }\n\n    /**\n     * set a playlist on the segment loader\n     *\n     * @param {PlaylistLoader} media the playlist to set on the segment loader\n     */\n  }, {\n    key: 'playlist',\n    value: function playlist(newPlaylist) {\n      var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n      if (!newPlaylist) {\n        return;\n      }\n\n      var oldPlaylist = this.playlist_;\n      var segmentInfo = this.pendingSegment_;\n\n      this.playlist_ = newPlaylist;\n      this.xhrOptions_ = options;\n\n      // when we haven't started playing yet, the start of a live playlist\n      // is always our zero-time so force a sync update each time the playlist\n      // is refreshed from the server\n      if (!this.hasPlayed_()) {\n        newPlaylist.syncInfo = {\n          mediaSequence: newPlaylist.mediaSequence,\n          time: 0\n        };\n      }\n\n      // in VOD, this is always a rendition switch (or we updated our syncInfo above)\n      // in LIVE, we always want to update with new playlists (including refreshes)\n      this.trigger('syncinfoupdate');\n\n      // if we were unpaused but waiting for a playlist, start\n      // buffering now\n      if (this.state === 'INIT' && this.couldBeginLoading_()) {\n        return this.init_();\n      }\n\n      if (!oldPlaylist || oldPlaylist.uri !== newPlaylist.uri) {\n        if (this.mediaIndex !== null) {\n          // we must \"resync\" the segment loader when we switch renditions and\n          // the segment loader is already synced to the previous rendition\n          this.resyncLoader();\n        }\n\n        // the rest of this function depends on `oldPlaylist` being defined\n        return;\n      }\n\n      // we reloaded the same playlist so we are in a live scenario\n      // and we will likely need to adjust the mediaIndex\n      var mediaSequenceDiff = newPlaylist.mediaSequence - oldPlaylist.mediaSequence;\n\n      this.logger_('mediaSequenceDiff', mediaSequenceDiff);\n\n      // update the mediaIndex on the SegmentLoader\n      // this is important because we can abort a request and this value must be\n      // equal to the last appended mediaIndex\n      if (this.mediaIndex !== null) {\n        this.mediaIndex -= mediaSequenceDiff;\n      }\n\n      // update the mediaIndex on the SegmentInfo object\n      // this is important because we will update this.mediaIndex with this value\n      // in `handleUpdateEnd_` after the segment has been successfully appended\n      if (segmentInfo) {\n        segmentInfo.mediaIndex -= mediaSequenceDiff;\n\n        // we need to update the referenced segment so that timing information is\n        // saved for the new playlist's segment, however, if the segment fell off the\n        // playlist, we can leave the old reference and just lose the timing info\n        if (segmentInfo.mediaIndex >= 0) {\n          segmentInfo.segment = newPlaylist.segments[segmentInfo.mediaIndex];\n        }\n      }\n\n      this.syncController_.saveExpiredSegmentInfo(oldPlaylist, newPlaylist);\n    }\n\n    /**\n     * Prevent the loader from fetching additional segments. If there\n     * is a segment request outstanding, it will finish processing\n     * before the loader halts. A segment loader can be unpaused by\n     * calling load().\n     */\n  }, {\n    key: 'pause',\n    value: function pause() {\n      if (this.checkBufferTimeout_) {\n        _globalWindow2['default'].clearTimeout(this.checkBufferTimeout_);\n\n        this.checkBufferTimeout_ = null;\n      }\n    }\n\n    /**\n     * Returns whether the segment loader is fetching additional\n     * segments when given the opportunity. This property can be\n     * modified through calls to pause() and load().\n     */\n  }, {\n    key: 'paused',\n    value: function paused() {\n      return this.checkBufferTimeout_ === null;\n    }\n\n    /**\n     * create/set the following mimetype on the SourceBuffer through a\n     * SourceUpdater\n     *\n     * @param {String} mimeType the mime type string to use\n     */\n  }, {\n    key: 'mimeType',\n    value: function mimeType(_mimeType) {\n      if (this.mimeType_) {\n        return;\n      }\n\n      this.mimeType_ = _mimeType;\n      // if we were unpaused but waiting for a sourceUpdater, start\n      // buffering now\n      if (this.state === 'INIT' && this.couldBeginLoading_()) {\n        this.init_();\n      }\n    }\n\n    /**\n     * Delete all the buffered data and reset the SegmentLoader\n     */\n  }, {\n    key: 'resetEverything',\n    value: function resetEverything() {\n      this.ended_ = false;\n      this.resetLoader();\n      this.remove(0, this.duration_());\n      this.trigger('reseteverything');\n    }\n\n    /**\n     * Force the SegmentLoader to resync and start loading around the currentTime instead\n     * of starting at the end of the buffer\n     *\n     * Useful for fast quality changes\n     */\n  }, {\n    key: 'resetLoader',\n    value: function resetLoader() {\n      this.fetchAtBuffer_ = false;\n      this.resyncLoader();\n    }\n\n    /**\n     * Force the SegmentLoader to restart synchronization and make a conservative guess\n     * before returning to the simple walk-forward method\n     */\n  }, {\n    key: 'resyncLoader',\n    value: function resyncLoader() {\n      this.mediaIndex = null;\n      this.syncPoint_ = null;\n      this.abort();\n    }\n\n    /**\n     * Remove any data in the source buffer between start and end times\n     * @param {Number} start - the start time of the region to remove from the buffer\n     * @param {Number} end - the end time of the region to remove from the buffer\n     */\n  }, {\n    key: 'remove',\n    value: function remove(start, end) {\n      if (this.sourceUpdater_) {\n        this.sourceUpdater_.remove(start, end);\n      }\n      (0, _videojsContribMediaSourcesEs5RemoveCuesFromTrackJs2['default'])(start, end, this.segmentMetadataTrack_);\n    }\n\n    /**\n     * (re-)schedule monitorBufferTick_ to run as soon as possible\n     *\n     * @private\n     */\n  }, {\n    key: 'monitorBuffer_',\n    value: function monitorBuffer_() {\n      if (this.checkBufferTimeout_) {\n        _globalWindow2['default'].clearTimeout(this.checkBufferTimeout_);\n      }\n\n      this.checkBufferTimeout_ = _globalWindow2['default'].setTimeout(this.monitorBufferTick_.bind(this), 1);\n    }\n\n    /**\n     * As long as the SegmentLoader is in the READY state, periodically\n     * invoke fillBuffer_().\n     *\n     * @private\n     */\n  }, {\n    key: 'monitorBufferTick_',\n    value: function monitorBufferTick_() {\n      if (this.state === 'READY') {\n        this.fillBuffer_();\n      }\n\n      if (this.checkBufferTimeout_) {\n        _globalWindow2['default'].clearTimeout(this.checkBufferTimeout_);\n      }\n\n      this.checkBufferTimeout_ = _globalWindow2['default'].setTimeout(this.monitorBufferTick_.bind(this), CHECK_BUFFER_DELAY);\n    }\n\n    /**\n     * fill the buffer with segements unless the sourceBuffers are\n     * currently updating\n     *\n     * Note: this function should only ever be called by monitorBuffer_\n     * and never directly\n     *\n     * @private\n     */\n  }, {\n    key: 'fillBuffer_',\n    value: function fillBuffer_() {\n      if (this.sourceUpdater_.updating()) {\n        return;\n      }\n\n      if (!this.syncPoint_) {\n        this.syncPoint_ = this.syncController_.getSyncPoint(this.playlist_, this.duration_(), this.currentTimeline_, this.currentTime_());\n      }\n\n      // see if we need to begin loading immediately\n      var segmentInfo = this.checkBuffer_(this.buffered_(), this.playlist_, this.mediaIndex, this.hasPlayed_(), this.currentTime_(), this.syncPoint_);\n\n      if (!segmentInfo) {\n        return;\n      }\n\n      var isEndOfStream = detectEndOfStream(this.playlist_, this.mediaSource_, segmentInfo.mediaIndex);\n\n      if (isEndOfStream) {\n        this.endOfStream();\n        return;\n      }\n\n      if (segmentInfo.mediaIndex === this.playlist_.segments.length - 1 && this.mediaSource_.readyState === 'ended' && !this.seeking_()) {\n        return;\n      }\n\n      // We will need to change timestampOffset of the sourceBuffer if either of\n      // the following conditions are true:\n      // - The segment.timeline !== this.currentTimeline\n      //   (we are crossing a discontinuity somehow)\n      // - The \"timestampOffset\" for the start of this segment is less than\n      //   the currently set timestampOffset\n      if (segmentInfo.timeline !== this.currentTimeline_ || segmentInfo.startOfSegment !== null && segmentInfo.startOfSegment < this.sourceUpdater_.timestampOffset()) {\n        this.syncController_.reset();\n        segmentInfo.timestampOffset = segmentInfo.startOfSegment;\n      }\n\n      this.loadSegment_(segmentInfo);\n    }\n\n    /**\n     * Determines what segment request should be made, given current playback\n     * state.\n     *\n     * @param {TimeRanges} buffered - the state of the buffer\n     * @param {Object} playlist - the playlist object to fetch segments from\n     * @param {Number} mediaIndex - the previous mediaIndex fetched or null\n     * @param {Boolean} hasPlayed - a flag indicating whether we have played or not\n     * @param {Number} currentTime - the playback position in seconds\n     * @param {Object} syncPoint - a segment info object that describes the\n     * @returns {Object} a segment request object that describes the segment to load\n     */\n  }, {\n    key: 'checkBuffer_',\n    value: function checkBuffer_(buffered, playlist, mediaIndex, hasPlayed, currentTime, syncPoint) {\n      var lastBufferedEnd = 0;\n      var startOfSegment = undefined;\n\n      if (buffered.length) {\n        lastBufferedEnd = buffered.end(buffered.length - 1);\n      }\n\n      var bufferedTime = Math.max(0, lastBufferedEnd - currentTime);\n\n      if (!playlist.segments.length) {\n        return null;\n      }\n\n      // if there is plenty of content buffered, and the video has\n      // been played before relax for awhile\n      if (bufferedTime >= this.goalBufferLength_()) {\n        return null;\n      }\n\n      // if the video has not yet played once, and we already have\n      // one segment downloaded do nothing\n      if (!hasPlayed && bufferedTime >= 1) {\n        return null;\n      }\n\n      this.logger_('checkBuffer_', 'mediaIndex:', mediaIndex, 'hasPlayed:', hasPlayed, 'currentTime:', currentTime, 'syncPoint:', syncPoint, 'fetchAtBuffer:', this.fetchAtBuffer_, 'bufferedTime:', bufferedTime);\n\n      // When the syncPoint is null, there is no way of determining a good\n      // conservative segment index to fetch from\n      // The best thing to do here is to get the kind of sync-point data by\n      // making a request\n      if (syncPoint === null) {\n        mediaIndex = this.getSyncSegmentCandidate_(playlist);\n        this.logger_('getSync', 'mediaIndex:', mediaIndex);\n        return this.generateSegmentInfo_(playlist, mediaIndex, null, true);\n      }\n\n      // Under normal playback conditions fetching is a simple walk forward\n      if (mediaIndex !== null) {\n        this.logger_('walkForward', 'mediaIndex:', mediaIndex + 1);\n        var segment = playlist.segments[mediaIndex];\n\n        if (segment && segment.end) {\n          startOfSegment = segment.end;\n        } else {\n          startOfSegment = lastBufferedEnd;\n        }\n        return this.generateSegmentInfo_(playlist, mediaIndex + 1, startOfSegment, false);\n      }\n\n      // There is a sync-point but the lack of a mediaIndex indicates that\n      // we need to make a good conservative guess about which segment to\n      // fetch\n      if (this.fetchAtBuffer_) {\n        // Find the segment containing the end of the buffer\n        var mediaSourceInfo = _playlist2['default'].getMediaInfoForTime(playlist, lastBufferedEnd, syncPoint.segmentIndex, syncPoint.time);\n\n        mediaIndex = mediaSourceInfo.mediaIndex;\n        startOfSegment = mediaSourceInfo.startTime;\n      } else {\n        // Find the segment containing currentTime\n        var mediaSourceInfo = _playlist2['default'].getMediaInfoForTime(playlist, currentTime, syncPoint.segmentIndex, syncPoint.time);\n\n        mediaIndex = mediaSourceInfo.mediaIndex;\n        startOfSegment = mediaSourceInfo.startTime;\n      }\n      this.logger_('getMediaIndexForTime', 'mediaIndex:', mediaIndex, 'startOfSegment:', startOfSegment);\n\n      return this.generateSegmentInfo_(playlist, mediaIndex, startOfSegment, false);\n    }\n\n    /**\n     * The segment loader has no recourse except to fetch a segment in the\n     * current playlist and use the internal timestamps in that segment to\n     * generate a syncPoint. This function returns a good candidate index\n     * for that process.\n     *\n     * @param {Object} playlist - the playlist object to look for a\n     * @returns {Number} An index of a segment from the playlist to load\n     */\n  }, {\n    key: 'getSyncSegmentCandidate_',\n    value: function getSyncSegmentCandidate_(playlist) {\n      var _this2 = this;\n\n      if (this.currentTimeline_ === -1) {\n        return 0;\n      }\n\n      var segmentIndexArray = playlist.segments.map(function (s, i) {\n        return {\n          timeline: s.timeline,\n          segmentIndex: i\n        };\n      }).filter(function (s) {\n        return s.timeline === _this2.currentTimeline_;\n      });\n\n      if (segmentIndexArray.length) {\n        return segmentIndexArray[Math.min(segmentIndexArray.length - 1, 1)].segmentIndex;\n      }\n\n      return Math.max(playlist.segments.length - 1, 0);\n    }\n  }, {\n    key: 'generateSegmentInfo_',\n    value: function generateSegmentInfo_(playlist, mediaIndex, startOfSegment, isSyncRequest) {\n      if (mediaIndex < 0 || mediaIndex >= playlist.segments.length) {\n        return null;\n      }\n\n      var segment = playlist.segments[mediaIndex];\n\n      return {\n        requestId: 'segment-loader-' + Math.random(),\n        // resolve the segment URL relative to the playlist\n        uri: segment.resolvedUri,\n        // the segment's mediaIndex at the time it was requested\n        mediaIndex: mediaIndex,\n        // whether or not to update the SegmentLoader's state with this\n        // segment's mediaIndex\n        isSyncRequest: isSyncRequest,\n        startOfSegment: startOfSegment,\n        // the segment's playlist\n        playlist: playlist,\n        // unencrypted bytes of the segment\n        bytes: null,\n        // when a key is defined for this segment, the encrypted bytes\n        encryptedBytes: null,\n        // The target timestampOffset for this segment when we append it\n        // to the source buffer\n        timestampOffset: null,\n        // The timeline that the segment is in\n        timeline: segment.timeline,\n        // The expected duration of the segment in seconds\n        duration: segment.duration,\n        // retain the segment in case the playlist updates while doing an async process\n        segment: segment\n      };\n    }\n\n    /**\n     * Determines if the network has enough bandwidth to complete the current segment\n     * request in a timely manner. If not, the request will be aborted early and bandwidth\n     * updated to trigger a playlist switch.\n     *\n     * @param {Object} stats\n     *        Object containing stats about the request timing and size\n     * @return {Boolean} True if the request was aborted, false otherwise\n     * @private\n     */\n  }, {\n    key: 'abortRequestEarly_',\n    value: function abortRequestEarly_(stats) {\n      if (this.hls_.tech_.paused() ||\n      // Don't abort if the current playlist is on the lowestEnabledRendition\n      // TODO: Replace using timeout with a boolean indicating whether this playlist is\n      //       the lowestEnabledRendition.\n      !this.xhrOptions_.timeout ||\n      // Don't abort if we have no bandwidth information to estimate segment sizes\n      !this.playlist_.attributes.BANDWIDTH) {\n        return false;\n      }\n\n      // Wait at least 1 second since the first byte of data has been received before\n      // using the calculated bandwidth from the progress event to allow the bitrate\n      // to stabilize\n      if (Date.now() - (stats.firstBytesReceivedAt || Date.now()) < 1000) {\n        return false;\n      }\n\n      var currentTime = this.currentTime_();\n      var measuredBandwidth = stats.bandwidth;\n      var segmentDuration = this.pendingSegment_.duration;\n\n      var requestTimeRemaining = _playlist2['default'].estimateSegmentRequestTime(segmentDuration, measuredBandwidth, this.playlist_, stats.bytesReceived);\n\n      // Subtract 1 from the timeUntilRebuffer so we still consider an early abort\n      // if we are only left with less than 1 second when the request completes.\n      // A negative timeUntilRebuffering indicates we are already rebuffering\n      var timeUntilRebuffer = (0, _ranges.timeUntilRebuffer)(this.buffered_(), currentTime, this.hls_.tech_.playbackRate()) - 1;\n\n      // Only consider aborting early if the estimated time to finish the download\n      // is larger than the estimated time until the player runs out of forward buffer\n      if (requestTimeRemaining <= timeUntilRebuffer) {\n        return false;\n      }\n\n      var switchCandidate = (0, _playlistSelectors.minRebufferMaxBandwidthSelector)({\n        master: this.hls_.playlists.master,\n        currentTime: currentTime,\n        bandwidth: measuredBandwidth,\n        duration: this.duration_(),\n        segmentDuration: segmentDuration,\n        timeUntilRebuffer: timeUntilRebuffer,\n        currentTimeline: this.currentTimeline_,\n        syncController: this.syncController_\n      });\n\n      if (!switchCandidate) {\n        return;\n      }\n\n      var rebufferingImpact = requestTimeRemaining - timeUntilRebuffer;\n\n      var timeSavedBySwitching = rebufferingImpact - switchCandidate.rebufferingImpact;\n\n      var minimumTimeSaving = 0.5;\n\n      // If we are already rebuffering, increase the amount of variance we add to the\n      // potential round trip time of the new request so that we are not too aggressive\n      // with switching to a playlist that might save us a fraction of a second.\n      if (timeUntilRebuffer <= _ranges.TIME_FUDGE_FACTOR) {\n        minimumTimeSaving = 1;\n      }\n\n      if (!switchCandidate.playlist || switchCandidate.playlist.uri === this.playlist_.uri || timeSavedBySwitching < minimumTimeSaving) {\n        return false;\n      }\n\n      // set the bandwidth to that of the desired playlist being sure to scale by\n      // BANDWIDTH_VARIANCE and add one so the playlist selector does not exclude it\n      // don't trigger a bandwidthupdate as the bandwidth is artifial\n      this.bandwidth = switchCandidate.playlist.attributes.BANDWIDTH * _config2['default'].BANDWIDTH_VARIANCE + 1;\n      this.abort();\n      this.trigger('earlyabort');\n      return true;\n    }\n\n    /**\n     * XHR `progress` event handler\n     *\n     * @param {Event}\n     *        The XHR `progress` event\n     * @param {Object} simpleSegment\n     *        A simplified segment object copy\n     * @private\n     */\n  }, {\n    key: 'handleProgress_',\n    value: function handleProgress_(event, simpleSegment) {\n      if (!this.pendingSegment_ || simpleSegment.requestId !== this.pendingSegment_.requestId || this.abortRequestEarly_(simpleSegment.stats)) {\n        return;\n      }\n\n      this.trigger('progress');\n    }\n\n    /**\n     * load a specific segment from a request into the buffer\n     *\n     * @private\n     */\n  }, {\n    key: 'loadSegment_',\n    value: function loadSegment_(segmentInfo) {\n      this.state = 'WAITING';\n      this.pendingSegment_ = segmentInfo;\n      this.trimBackBuffer_(segmentInfo);\n\n      segmentInfo.abortRequests = (0, _mediaSegmentRequest.mediaSegmentRequest)(this.hls_.xhr, this.xhrOptions_, this.decrypter_, this.createSimplifiedSegmentObj_(segmentInfo),\n      // progress callback\n      this.handleProgress_.bind(this), this.segmentRequestFinished_.bind(this));\n    }\n\n    /**\n     * trim the back buffer so that we don't have too much data\n     * in the source buffer\n     *\n     * @private\n     *\n     * @param {Object} segmentInfo - the current segment\n     */\n  }, {\n    key: 'trimBackBuffer_',\n    value: function trimBackBuffer_(segmentInfo) {\n      var removeToTime = safeBackBufferTrimTime(this.seekable_(), this.currentTime_(), this.playlist_.targetDuration || 10);\n\n      // Chrome has a hard limit of 150MB of\n      // buffer and a very conservative \"garbage collector\"\n      // We manually clear out the old buffer to ensure\n      // we don't trigger the QuotaExceeded error\n      // on the source buffer during subsequent appends\n\n      if (removeToTime > 0) {\n        this.remove(0, removeToTime);\n      }\n    }\n\n    /**\n     * created a simplified copy of the segment object with just the\n     * information necessary to perform the XHR and decryption\n     *\n     * @private\n     *\n     * @param {Object} segmentInfo - the current segment\n     * @returns {Object} a simplified segment object copy\n     */\n  }, {\n    key: 'createSimplifiedSegmentObj_',\n    value: function createSimplifiedSegmentObj_(segmentInfo) {\n      var segment = segmentInfo.segment;\n      var simpleSegment = {\n        resolvedUri: segment.resolvedUri,\n        byterange: segment.byterange,\n        requestId: segmentInfo.requestId\n      };\n\n      if (segment.key) {\n        // if the media sequence is greater than 2^32, the IV will be incorrect\n        // assuming 10s segments, that would be about 1300 years\n        var iv = segment.key.iv || new Uint32Array([0, 0, 0, segmentInfo.mediaIndex + segmentInfo.playlist.mediaSequence]);\n\n        simpleSegment.key = {\n          resolvedUri: segment.key.resolvedUri,\n          iv: iv\n        };\n      }\n\n      if (segment.map) {\n        simpleSegment.map = this.initSegment(segment.map);\n      }\n\n      return simpleSegment;\n    }\n\n    /**\n     * Handle the callback from the segmentRequest function and set the\n     * associated SegmentLoader state and errors if necessary\n     *\n     * @private\n     */\n  }, {\n    key: 'segmentRequestFinished_',\n    value: function segmentRequestFinished_(error, simpleSegment) {\n      // every request counts as a media request even if it has been aborted\n      // or canceled due to a timeout\n      this.mediaRequests += 1;\n\n      if (simpleSegment.stats) {\n        this.mediaBytesTransferred += simpleSegment.stats.bytesReceived;\n        this.mediaTransferDuration += simpleSegment.stats.roundTripTime;\n      }\n\n      // The request was aborted and the SegmentLoader has already been reset\n      if (!this.pendingSegment_) {\n        this.mediaRequestsAborted += 1;\n        return;\n      }\n\n      // the request was aborted and the SegmentLoader has already started\n      // another request. this can happen when the timeout for an aborted\n      // request triggers due to a limitation in the XHR library\n      // do not count this as any sort of request or we risk double-counting\n      if (simpleSegment.requestId !== this.pendingSegment_.requestId) {\n        return;\n      }\n\n      // an error occurred from the active pendingSegment_ so reset everything\n      if (error) {\n        this.pendingSegment_ = null;\n        this.state = 'READY';\n\n        // the requests were aborted just record the aborted stat and exit\n        // this is not a true error condition and nothing corrective needs\n        // to be done\n        if (error.code === _mediaSegmentRequest.REQUEST_ERRORS.ABORTED) {\n          this.mediaRequestsAborted += 1;\n          return;\n        }\n\n        this.pause();\n\n        // the error is really just that at least one of the requests timed-out\n        // set the bandwidth to a very low value and trigger an ABR switch to\n        // take emergency action\n        if (error.code === _mediaSegmentRequest.REQUEST_ERRORS.TIMEOUT) {\n          this.mediaRequestsTimedout += 1;\n          this.bandwidth = 1;\n          this.roundTrip = NaN;\n          this.trigger('bandwidthupdate');\n          return;\n        }\n\n        // if control-flow has arrived here, then the error is real\n        // emit an error event to blacklist the current playlist\n        this.mediaRequestsErrored += 1;\n        this.error(error);\n        this.trigger('error');\n        return;\n      }\n\n      // the response was a success so set any bandwidth stats the request\n      // generated for ABR purposes\n      this.bandwidth = simpleSegment.stats.bandwidth;\n      this.roundTrip = simpleSegment.stats.roundTripTime;\n\n      // if this request included an initialization segment, save that data\n      // to the initSegment cache\n      if (simpleSegment.map) {\n        simpleSegment.map = this.initSegment(simpleSegment.map, true);\n      }\n\n      this.processSegmentResponse_(simpleSegment);\n    }\n\n    /**\n     * Move any important data from the simplified segment object\n     * back to the real segment object for future phases\n     *\n     * @private\n     */\n  }, {\n    key: 'processSegmentResponse_',\n    value: function processSegmentResponse_(simpleSegment) {\n      var segmentInfo = this.pendingSegment_;\n\n      segmentInfo.bytes = simpleSegment.bytes;\n      if (simpleSegment.map) {\n        segmentInfo.segment.map.bytes = simpleSegment.map.bytes;\n      }\n\n      segmentInfo.endOfAllRequests = simpleSegment.endOfAllRequests;\n      this.handleSegment_();\n    }\n\n    /**\n     * append a decrypted segement to the SourceBuffer through a SourceUpdater\n     *\n     * @private\n     */\n  }, {\n    key: 'handleSegment_',\n    value: function handleSegment_() {\n      var _this3 = this;\n\n      if (!this.pendingSegment_) {\n        this.state = 'READY';\n        return;\n      }\n\n      var segmentInfo = this.pendingSegment_;\n      var segment = segmentInfo.segment;\n      var timingInfo = this.syncController_.probeSegmentInfo(segmentInfo);\n\n      // When we have our first timing info, determine what media types this loader is\n      // dealing with. Although we're maintaining extra state, it helps to preserve the\n      // separation of segment loader from the actual source buffers.\n      if (typeof this.startingMedia_ === 'undefined' && timingInfo && (\n      // Guard against cases where we're not getting timing info at all until we are\n      // certain that all streams will provide it.\n      timingInfo.containsAudio || timingInfo.containsVideo)) {\n        this.startingMedia_ = {\n          containsAudio: timingInfo.containsAudio,\n          containsVideo: timingInfo.containsVideo\n        };\n      }\n\n      var illegalMediaSwitchError = illegalMediaSwitch(this.loaderType_, this.startingMedia_, timingInfo);\n\n      if (illegalMediaSwitchError) {\n        this.error({\n          message: illegalMediaSwitchError,\n          blacklistDuration: Infinity\n        });\n        this.trigger('error');\n        return;\n      }\n\n      if (segmentInfo.isSyncRequest) {\n        this.trigger('syncinfoupdate');\n        this.pendingSegment_ = null;\n        this.state = 'READY';\n        return;\n      }\n\n      if (segmentInfo.timestampOffset !== null && segmentInfo.timestampOffset !== this.sourceUpdater_.timestampOffset()) {\n        this.sourceUpdater_.timestampOffset(segmentInfo.timestampOffset);\n        // fired when a timestamp offset is set in HLS (can also identify discontinuities)\n        this.trigger('timestampoffset');\n      }\n\n      var timelineMapping = this.syncController_.mappingForTimeline(segmentInfo.timeline);\n\n      if (timelineMapping !== null) {\n        this.trigger({\n          type: 'segmenttimemapping',\n          mapping: timelineMapping\n        });\n      }\n\n      this.state = 'APPENDING';\n\n      // if the media initialization segment is changing, append it\n      // before the content segment\n      if (segment.map) {\n        (function () {\n          var initId = (0, _binUtils.initSegmentId)(segment.map);\n\n          if (!_this3.activeInitSegmentId_ || _this3.activeInitSegmentId_ !== initId) {\n            var initSegment = _this3.initSegment(segment.map);\n\n            _this3.sourceUpdater_.appendBuffer(initSegment.bytes, function () {\n              _this3.activeInitSegmentId_ = initId;\n            });\n          }\n        })();\n      }\n\n      segmentInfo.byteLength = segmentInfo.bytes.byteLength;\n      if (typeof segment.start === 'number' && typeof segment.end === 'number') {\n        this.mediaSecondsLoaded += segment.end - segment.start;\n      } else {\n        this.mediaSecondsLoaded += segment.duration;\n      }\n\n      this.sourceUpdater_.appendBuffer(segmentInfo.bytes, this.handleUpdateEnd_.bind(this));\n    }\n\n    /**\n     * callback to run when appendBuffer is finished. detects if we are\n     * in a good state to do things with the data we got, or if we need\n     * to wait for more\n     *\n     * @private\n     */\n  }, {\n    key: 'handleUpdateEnd_',\n    value: function handleUpdateEnd_() {\n      this.logger_('handleUpdateEnd_', 'segmentInfo:', this.pendingSegment_);\n\n      if (!this.pendingSegment_) {\n        this.state = 'READY';\n        if (!this.paused()) {\n          this.monitorBuffer_();\n        }\n        return;\n      }\n\n      var segmentInfo = this.pendingSegment_;\n      var segment = segmentInfo.segment;\n      var isWalkingForward = this.mediaIndex !== null;\n\n      this.pendingSegment_ = null;\n      this.recordThroughput_(segmentInfo);\n      this.addSegmentMetadataCue_(segmentInfo);\n\n      this.state = 'READY';\n\n      this.mediaIndex = segmentInfo.mediaIndex;\n      this.fetchAtBuffer_ = true;\n      this.currentTimeline_ = segmentInfo.timeline;\n\n      // We must update the syncinfo to recalculate the seekable range before\n      // the following conditional otherwise it may consider this a bad \"guess\"\n      // and attempt to resync when the post-update seekable window and live\n      // point would mean that this was the perfect segment to fetch\n      this.trigger('syncinfoupdate');\n\n      // If we previously appended a segment that ends more than 3 targetDurations before\n      // the currentTime_ that means that our conservative guess was too conservative.\n      // In that case, reset the loader state so that we try to use any information gained\n      // from the previous request to create a new, more accurate, sync-point.\n      if (segment.end && this.currentTime_() - segment.end > segmentInfo.playlist.targetDuration * 3) {\n        this.resetEverything();\n        return;\n      }\n\n      // Don't do a rendition switch unless we have enough time to get a sync segment\n      // and conservatively guess\n      if (isWalkingForward) {\n        this.trigger('bandwidthupdate');\n      }\n      this.trigger('progress');\n\n      // any time an update finishes and the last segment is in the\n      // buffer, end the stream. this ensures the \"ended\" event will\n      // fire if playback reaches that point.\n      var isEndOfStream = detectEndOfStream(segmentInfo.playlist, this.mediaSource_, segmentInfo.mediaIndex + 1);\n\n      if (isEndOfStream) {\n        this.endOfStream();\n      }\n\n      if (!this.paused()) {\n        this.monitorBuffer_();\n      }\n    }\n\n    /**\n     * Records the current throughput of the decrypt, transmux, and append\n     * portion of the semgment pipeline. `throughput.rate` is a the cumulative\n     * moving average of the throughput. `throughput.count` is the number of\n     * data points in the average.\n     *\n     * @private\n     * @param {Object} segmentInfo the object returned by loadSegment\n     */\n  }, {\n    key: 'recordThroughput_',\n    value: function recordThroughput_(segmentInfo) {\n      var rate = this.throughput.rate;\n      // Add one to the time to ensure that we don't accidentally attempt to divide\n      // by zero in the case where the throughput is ridiculously high\n      var segmentProcessingTime = Date.now() - segmentInfo.endOfAllRequests + 1;\n      // Multiply by 8000 to convert from bytes/millisecond to bits/second\n      var segmentProcessingThroughput = Math.floor(segmentInfo.byteLength / segmentProcessingTime * 8 * 1000);\n\n      // This is just a cumulative moving average calculation:\n      //   newAvg = oldAvg + (sample - oldAvg) / (sampleCount + 1)\n      this.throughput.rate += (segmentProcessingThroughput - rate) / ++this.throughput.count;\n    }\n\n    /**\n     * A debugging logger noop that is set to console.log only if debugging\n     * is enabled globally\n     *\n     * @private\n     */\n  }, {\n    key: 'logger_',\n    value: function logger_() {}\n\n    /**\n     * Adds a cue to the segment-metadata track with some metadata information about the\n     * segment\n     *\n     * @private\n     * @param {Object} segmentInfo\n     *        the object returned by loadSegment\n     * @method addSegmentMetadataCue_\n     */\n  }, {\n    key: 'addSegmentMetadataCue_',\n    value: function addSegmentMetadataCue_(segmentInfo) {\n      if (!this.segmentMetadataTrack_) {\n        return;\n      }\n\n      var segment = segmentInfo.segment;\n      var start = segment.start;\n      var end = segment.end;\n\n      // Do not try adding the cue if the start and end times are invalid.\n      if (!finite(start) || !finite(end)) {\n        return;\n      }\n\n      (0, _videojsContribMediaSourcesEs5RemoveCuesFromTrackJs2['default'])(start, end, this.segmentMetadataTrack_);\n\n      var Cue = _globalWindow2['default'].WebKitDataCue || _globalWindow2['default'].VTTCue;\n      var value = {\n        bandwidth: segmentInfo.playlist.attributes.BANDWIDTH,\n        resolution: segmentInfo.playlist.attributes.RESOLUTION,\n        codecs: segmentInfo.playlist.attributes.CODECS,\n        byteLength: segmentInfo.byteLength,\n        uri: segmentInfo.uri,\n        timeline: segmentInfo.timeline,\n        playlist: segmentInfo.playlist.uri,\n        start: start,\n        end: end\n      };\n      var data = JSON.stringify(value);\n      var cue = new Cue(start, end, data);\n\n      // Attach the metadata to the value property of the cue to keep consistency between\n      // the differences of WebKitDataCue in safari and VTTCue in other browsers\n      cue.value = value;\n\n      this.segmentMetadataTrack_.addCue(cue);\n    }\n  }]);\n\n  return SegmentLoader;\n})(_videoJs2['default'].EventTarget);\n\nexports['default'] = SegmentLoader;\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{\"./bin-utils\":2,\"./config\":3,\"./media-segment-request\":7,\"./playlist\":11,\"./playlist-selectors\":10,\"./ranges\":12,\"./source-updater\":17,\"global/window\":32,\"videojs-contrib-media-sources/es5/remove-cues-from-track.js\":72}],17:[function(require,module,exports){\n(function (global){\n/**\n * @file source-updater.js\n */\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\nvar _videoJs = (typeof window !== \"undefined\" ? window['videojs'] : typeof global !== \"undefined\" ? global['videojs'] : null);\n\nvar _videoJs2 = _interopRequireDefault(_videoJs);\n\nvar noop = function noop() {};\n\n/**\n * A queue of callbacks to be serialized and applied when a\n * MediaSource and its associated SourceBuffers are not in the\n * updating state. It is used by the segment loader to update the\n * underlying SourceBuffers when new data is loaded, for instance.\n *\n * @class SourceUpdater\n * @param {MediaSource} mediaSource the MediaSource to create the\n * SourceBuffer from\n * @param {String} mimeType the desired MIME type of the underlying\n * SourceBuffer\n */\n\nvar SourceUpdater = (function () {\n  function SourceUpdater(mediaSource, mimeType) {\n    var _this = this;\n\n    _classCallCheck(this, SourceUpdater);\n\n    var createSourceBuffer = function createSourceBuffer() {\n      _this.sourceBuffer_ = mediaSource.addSourceBuffer(mimeType);\n\n      // run completion handlers and process callbacks as updateend\n      // events fire\n      _this.onUpdateendCallback_ = function () {\n        var pendingCallback = _this.pendingCallback_;\n\n        _this.pendingCallback_ = null;\n\n        if (pendingCallback) {\n          pendingCallback();\n        }\n\n        _this.runCallback_();\n      };\n\n      _this.sourceBuffer_.addEventListener('updateend', _this.onUpdateendCallback_);\n\n      _this.runCallback_();\n    };\n\n    this.callbacks_ = [];\n    this.pendingCallback_ = null;\n    this.timestampOffset_ = 0;\n    this.mediaSource = mediaSource;\n    this.processedAppend_ = false;\n\n    if (mediaSource.readyState === 'closed') {\n      mediaSource.addEventListener('sourceopen', createSourceBuffer);\n    } else {\n      createSourceBuffer();\n    }\n  }\n\n  /**\n   * Aborts the current segment and resets the segment parser.\n   *\n   * @param {Function} done function to call when done\n   * @see http://w3c.github.io/media-source/#widl-SourceBuffer-abort-void\n   */\n\n  _createClass(SourceUpdater, [{\n    key: 'abort',\n    value: function abort(done) {\n      var _this2 = this;\n\n      if (this.processedAppend_) {\n        this.queueCallback_(function () {\n          _this2.sourceBuffer_.abort();\n        }, done);\n      }\n    }\n\n    /**\n     * Queue an update to append an ArrayBuffer.\n     *\n     * @param {ArrayBuffer} bytes\n     * @param {Function} done the function to call when done\n     * @see http://www.w3.org/TR/media-source/#widl-SourceBuffer-appendBuffer-void-ArrayBuffer-data\n     */\n  }, {\n    key: 'appendBuffer',\n    value: function appendBuffer(bytes, done) {\n      var _this3 = this;\n\n      this.processedAppend_ = true;\n      this.queueCallback_(function () {\n        _this3.sourceBuffer_.appendBuffer(bytes);\n      }, done);\n    }\n\n    /**\n     * Indicates what TimeRanges are buffered in the managed SourceBuffer.\n     *\n     * @see http://www.w3.org/TR/media-source/#widl-SourceBuffer-buffered\n     */\n  }, {\n    key: 'buffered',\n    value: function buffered() {\n      if (!this.sourceBuffer_) {\n        return _videoJs2['default'].createTimeRanges();\n      }\n      return this.sourceBuffer_.buffered;\n    }\n\n    /**\n     * Queue an update to remove a time range from the buffer.\n     *\n     * @param {Number} start where to start the removal\n     * @param {Number} end where to end the removal\n     * @see http://www.w3.org/TR/media-source/#widl-SourceBuffer-remove-void-double-start-unrestricted-double-end\n     */\n  }, {\n    key: 'remove',\n    value: function remove(start, end) {\n      var _this4 = this;\n\n      if (this.processedAppend_) {\n        this.queueCallback_(function () {\n          _this4.sourceBuffer_.remove(start, end);\n        }, noop);\n      }\n    }\n\n    /**\n     * Whether the underlying sourceBuffer is updating or not\n     *\n     * @return {Boolean} the updating status of the SourceBuffer\n     */\n  }, {\n    key: 'updating',\n    value: function updating() {\n      return !this.sourceBuffer_ || this.sourceBuffer_.updating || this.pendingCallback_;\n    }\n\n    /**\n     * Set/get the timestampoffset on the SourceBuffer\n     *\n     * @return {Number} the timestamp offset\n     */\n  }, {\n    key: 'timestampOffset',\n    value: function timestampOffset(offset) {\n      var _this5 = this;\n\n      if (typeof offset !== 'undefined') {\n        this.queueCallback_(function () {\n          _this5.sourceBuffer_.timestampOffset = offset;\n        });\n        this.timestampOffset_ = offset;\n      }\n      return this.timestampOffset_;\n    }\n\n    /**\n     * Queue a callback to run\n     */\n  }, {\n    key: 'queueCallback_',\n    value: function queueCallback_(callback, done) {\n      this.callbacks_.push([callback.bind(this), done]);\n      this.runCallback_();\n    }\n\n    /**\n     * Run a queued callback\n     */\n  }, {\n    key: 'runCallback_',\n    value: function runCallback_() {\n      var callbacks = undefined;\n\n      if (!this.updating() && this.callbacks_.length) {\n        callbacks = this.callbacks_.shift();\n        this.pendingCallback_ = callbacks[1];\n        callbacks[0]();\n      }\n    }\n\n    /**\n     * dispose of the source updater and the underlying sourceBuffer\n     */\n  }, {\n    key: 'dispose',\n    value: function dispose() {\n      this.sourceBuffer_.removeEventListener('updateend', this.onUpdateendCallback_);\n      if (this.sourceBuffer_ && this.mediaSource.readyState === 'open') {\n        this.sourceBuffer_.abort();\n      }\n    }\n  }]);\n\n  return SourceUpdater;\n})();\n\nexports['default'] = SourceUpdater;\nmodule.exports = exports['default'];\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{}],18:[function(require,module,exports){\n(function (global){\n/**\n * @file sync-controller.js\n */\n\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\nvar _get = function get(_x2, _x3, _x4) { var _again = true; _function: while (_again) { var object = _x2, property = _x3, receiver = _x4; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x2 = parent; _x3 = property; _x4 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar _muxJsLibMp4Probe = require('mux.js/lib/mp4/probe');\n\nvar _muxJsLibMp4Probe2 = _interopRequireDefault(_muxJsLibMp4Probe);\n\nvar _muxJsLibToolsTsInspectorJs = require('mux.js/lib/tools/ts-inspector.js');\n\nvar _playlist = require('./playlist');\n\nvar _videoJs = (typeof window !== \"undefined\" ? window['videojs'] : typeof global !== \"undefined\" ? global['videojs'] : null);\n\nvar _videoJs2 = _interopRequireDefault(_videoJs);\n\nvar syncPointStrategies = [\n// Stategy \"VOD\": Handle the VOD-case where the sync-point is *always*\n//                the equivalence display-time 0 === segment-index 0\n{\n  name: 'VOD',\n  run: function run(syncController, playlist, duration, currentTimeline, currentTime) {\n    if (duration !== Infinity) {\n      var syncPoint = {\n        time: 0,\n        segmentIndex: 0\n      };\n\n      return syncPoint;\n    }\n    return null;\n  }\n},\n// Stategy \"ProgramDateTime\": We have a program-date-time tag in this playlist\n{\n  name: 'ProgramDateTime',\n  run: function run(syncController, playlist, duration, currentTimeline, currentTime) {\n    if (syncController.datetimeToDisplayTime && playlist.dateTimeObject) {\n      var playlistTime = playlist.dateTimeObject.getTime() / 1000;\n      var playlistStart = playlistTime + syncController.datetimeToDisplayTime;\n      var syncPoint = {\n        time: playlistStart,\n        segmentIndex: 0\n      };\n\n      return syncPoint;\n    }\n    return null;\n  }\n},\n// Stategy \"Segment\": We have a known time mapping for a timeline and a\n//                    segment in the current timeline with timing data\n{\n  name: 'Segment',\n  run: function run(syncController, playlist, duration, currentTimeline, currentTime) {\n    var segments = playlist.segments || [];\n    var syncPoint = null;\n    var lastDistance = null;\n\n    currentTime = currentTime || 0;\n\n    for (var i = 0; i < segments.length; i++) {\n      var segment = segments[i];\n\n      if (segment.timeline === currentTimeline && typeof segment.start !== 'undefined') {\n        var distance = Math.abs(currentTime - segment.start);\n\n        // Once the distance begins to increase, we have passed\n        // currentTime and can stop looking for better candidates\n        if (lastDistance !== null && lastDistance < distance) {\n          break;\n        }\n\n        if (!syncPoint || lastDistance === null || lastDistance >= distance) {\n          lastDistance = distance;\n          syncPoint = {\n            time: segment.start,\n            segmentIndex: i\n          };\n        }\n      }\n    }\n    return syncPoint;\n  }\n},\n// Stategy \"Discontinuity\": We have a discontinuity with a known\n//                          display-time\n{\n  name: 'Discontinuity',\n  run: function run(syncController, playlist, duration, currentTimeline, currentTime) {\n    var syncPoint = null;\n\n    currentTime = currentTime || 0;\n\n    if (playlist.discontinuityStarts && playlist.discontinuityStarts.length) {\n      var lastDistance = null;\n\n      for (var i = 0; i < playlist.discontinuityStarts.length; i++) {\n        var segmentIndex = playlist.discontinuityStarts[i];\n        var discontinuity = playlist.discontinuitySequence + i + 1;\n        var discontinuitySync = syncController.discontinuities[discontinuity];\n\n        if (discontinuitySync) {\n          var distance = Math.abs(currentTime - discontinuitySync.time);\n\n          // Once the distance begins to increase, we have passed\n          // currentTime and can stop looking for better candidates\n          if (lastDistance !== null && lastDistance < distance) {\n            break;\n          }\n\n          if (!syncPoint || lastDistance === null || lastDistance >= distance) {\n            lastDistance = distance;\n            syncPoint = {\n              time: discontinuitySync.time,\n              segmentIndex: segmentIndex\n            };\n          }\n        }\n      }\n    }\n    return syncPoint;\n  }\n},\n// Stategy \"Playlist\": We have a playlist with a known mapping of\n//                     segment index to display time\n{\n  name: 'Playlist',\n  run: function run(syncController, playlist, duration, currentTimeline, currentTime) {\n    if (playlist.syncInfo) {\n      var syncPoint = {\n        time: playlist.syncInfo.time,\n        segmentIndex: playlist.syncInfo.mediaSequence - playlist.mediaSequence\n      };\n\n      return syncPoint;\n    }\n    return null;\n  }\n}];\n\nexports.syncPointStrategies = syncPointStrategies;\n\nvar SyncController = (function (_videojs$EventTarget) {\n  _inherits(SyncController, _videojs$EventTarget);\n\n  function SyncController() {\n    var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];\n\n    _classCallCheck(this, SyncController);\n\n    _get(Object.getPrototypeOf(SyncController.prototype), 'constructor', this).call(this);\n    // Segment Loader state variables...\n    // ...for synching across variants\n    this.inspectCache_ = undefined;\n\n    // ...for synching across variants\n    this.timelines = [];\n    this.discontinuities = [];\n    this.datetimeToDisplayTime = null;\n\n    if (options.debug) {\n      this.logger_ = _videoJs2['default'].log.bind(_videoJs2['default'], 'sync-controller ->');\n    }\n  }\n\n  /**\n   * Find a sync-point for the playlist specified\n   *\n   * A sync-point is defined as a known mapping from display-time to\n   * a segment-index in the current playlist.\n   *\n   * @param {Playlist} playlist\n   *        The playlist that needs a sync-point\n   * @param {Number} duration\n   *        Duration of the MediaSource (Infinite if playing a live source)\n   * @param {Number} currentTimeline\n   *        The last timeline from which a segment was loaded\n   * @returns {Object}\n   *          A sync-point object\n   */\n\n  _createClass(SyncController, [{\n    key: 'getSyncPoint',\n    value: function getSyncPoint(playlist, duration, currentTimeline, currentTime) {\n      var syncPoints = this.runStrategies_(playlist, duration, currentTimeline, currentTime);\n\n      if (!syncPoints.length) {\n        // Signal that we need to attempt to get a sync-point manually\n        // by fetching a segment in the playlist and constructing\n        // a sync-point from that information\n        return null;\n      }\n\n      // Now find the sync-point that is closest to the currentTime because\n      // that should result in the most accurate guess about which segment\n      // to fetch\n      return this.selectSyncPoint_(syncPoints, { key: 'time', value: currentTime });\n    }\n\n    /**\n     * Calculate the amount of time that has expired off the playlist during playback\n     *\n     * @param {Playlist} playlist\n     *        Playlist object to calculate expired from\n     * @param {Number} duration\n     *        Duration of the MediaSource (Infinity if playling a live source)\n     * @returns {Number|null}\n     *          The amount of time that has expired off the playlist during playback. Null\n     *          if no sync-points for the playlist can be found.\n     */\n  }, {\n    key: 'getExpiredTime',\n    value: function getExpiredTime(playlist, duration) {\n      if (!playlist || !playlist.segments) {\n        return null;\n      }\n\n      var syncPoints = this.runStrategies_(playlist, duration, playlist.discontinuitySequence, 0);\n\n      // Without sync-points, there is not enough information to determine the expired time\n      if (!syncPoints.length) {\n        return null;\n      }\n\n      var syncPoint = this.selectSyncPoint_(syncPoints, {\n        key: 'segmentIndex',\n        value: 0\n      });\n\n      // If the sync-point is beyond the start of the playlist, we want to subtract the\n      // duration from index 0 to syncPoint.segmentIndex instead of adding.\n      if (syncPoint.segmentIndex > 0) {\n        syncPoint.time *= -1;\n      }\n\n      return Math.abs(syncPoint.time + (0, _playlist.sumDurations)(playlist, syncPoint.segmentIndex, 0));\n    }\n\n    /**\n     * Runs each sync-point strategy and returns a list of sync-points returned by the\n     * strategies\n     *\n     * @private\n     * @param {Playlist} playlist\n     *        The playlist that needs a sync-point\n     * @param {Number} duration\n     *        Duration of the MediaSource (Infinity if playing a live source)\n     * @param {Number} currentTimeline\n     *        The last timeline from which a segment was loaded\n     * @returns {Array}\n     *          A list of sync-point objects\n     */\n  }, {\n    key: 'runStrategies_',\n    value: function runStrategies_(playlist, duration, currentTimeline, currentTime) {\n      var syncPoints = [];\n\n      // Try to find a sync-point in by utilizing various strategies...\n      for (var i = 0; i < syncPointStrategies.length; i++) {\n        var strategy = syncPointStrategies[i];\n        var syncPoint = strategy.run(this, playlist, duration, currentTimeline, currentTime);\n\n        if (syncPoint) {\n          syncPoint.strategy = strategy.name;\n          syncPoints.push({\n            strategy: strategy.name,\n            syncPoint: syncPoint\n          });\n          this.logger_('syncPoint found via <' + strategy.name + '>:', syncPoint);\n        }\n      }\n\n      return syncPoints;\n    }\n\n    /**\n     * Selects the sync-point nearest the specified target\n     *\n     * @private\n     * @param {Array} syncPoints\n     *        List of sync-points to select from\n     * @param {Object} target\n     *        Object specifying the property and value we are targeting\n     * @param {String} target.key\n     *        Specifies the property to target. Must be either 'time' or 'segmentIndex'\n     * @param {Number} target.value\n     *        The value to target for the specified key.\n     * @returns {Object}\n     *          The sync-point nearest the target\n     */\n  }, {\n    key: 'selectSyncPoint_',\n    value: function selectSyncPoint_(syncPoints, target) {\n      var bestSyncPoint = syncPoints[0].syncPoint;\n      var bestDistance = Math.abs(syncPoints[0].syncPoint[target.key] - target.value);\n      var bestStrategy = syncPoints[0].strategy;\n\n      for (var i = 1; i < syncPoints.length; i++) {\n        var newDistance = Math.abs(syncPoints[i].syncPoint[target.key] - target.value);\n\n        if (newDistance < bestDistance) {\n          bestDistance = newDistance;\n          bestSyncPoint = syncPoints[i].syncPoint;\n          bestStrategy = syncPoints[i].strategy;\n        }\n      }\n\n      this.logger_('syncPoint with strategy <' + bestStrategy + '> chosen: ', bestSyncPoint);\n      return bestSyncPoint;\n    }\n\n    /**\n     * Save any meta-data present on the segments when segments leave\n     * the live window to the playlist to allow for synchronization at the\n     * playlist level later.\n     *\n     * @param {Playlist} oldPlaylist - The previous active playlist\n     * @param {Playlist} newPlaylist - The updated and most current playlist\n     */\n  }, {\n    key: 'saveExpiredSegmentInfo',\n    value: function saveExpiredSegmentInfo(oldPlaylist, newPlaylist) {\n      var mediaSequenceDiff = newPlaylist.mediaSequence - oldPlaylist.mediaSequence;\n\n      // When a segment expires from the playlist and it has a start time\n      // save that information as a possible sync-point reference in future\n      for (var i = mediaSequenceDiff - 1; i >= 0; i--) {\n        var lastRemovedSegment = oldPlaylist.segments[i];\n\n        if (lastRemovedSegment && typeof lastRemovedSegment.start !== 'undefined') {\n          newPlaylist.syncInfo = {\n            mediaSequence: oldPlaylist.mediaSequence + i,\n            time: lastRemovedSegment.start\n          };\n          this.logger_('playlist sync:', newPlaylist.syncInfo);\n          this.trigger('syncinfoupdate');\n          break;\n        }\n      }\n    }\n\n    /**\n     * Save the mapping from playlist's ProgramDateTime to display. This should\n     * only ever happen once at the start of playback.\n     *\n     * @param {Playlist} playlist - The currently active playlist\n     */\n  }, {\n    key: 'setDateTimeMapping',\n    value: function setDateTimeMapping(playlist) {\n      if (!this.datetimeToDisplayTime && playlist.dateTimeObject) {\n        var playlistTimestamp = playlist.dateTimeObject.getTime() / 1000;\n\n        this.datetimeToDisplayTime = -playlistTimestamp;\n      }\n    }\n\n    /**\n     * Reset the state of the inspection cache when we do a rendition\n     * switch\n     */\n  }, {\n    key: 'reset',\n    value: function reset() {\n      this.inspectCache_ = undefined;\n    }\n\n    /**\n     * Probe or inspect a fmp4 or an mpeg2-ts segment to determine the start\n     * and end of the segment in it's internal \"media time\". Used to generate\n     * mappings from that internal \"media time\" to the display time that is\n     * shown on the player.\n     *\n     * @param {SegmentInfo} segmentInfo - The current active request information\n     */\n  }, {\n    key: 'probeSegmentInfo',\n    value: function probeSegmentInfo(segmentInfo) {\n      var segment = segmentInfo.segment;\n      var playlist = segmentInfo.playlist;\n      var timingInfo = undefined;\n\n      if (segment.map) {\n        timingInfo = this.probeMp4Segment_(segmentInfo);\n      } else {\n        timingInfo = this.probeTsSegment_(segmentInfo);\n      }\n\n      if (timingInfo) {\n        if (this.calculateSegmentTimeMapping_(segmentInfo, timingInfo)) {\n          this.saveDiscontinuitySyncInfo_(segmentInfo);\n\n          // If the playlist does not have sync information yet, record that information\n          // now with segment timing information\n          if (!playlist.syncInfo) {\n            playlist.syncInfo = {\n              mediaSequence: playlist.mediaSequence + segmentInfo.mediaIndex,\n              time: segment.start\n            };\n          }\n        }\n      }\n\n      return timingInfo;\n    }\n\n    /**\n     * Probe an fmp4 or an mpeg2-ts segment to determine the start of the segment\n     * in it's internal \"media time\".\n     *\n     * @private\n     * @param {SegmentInfo} segmentInfo - The current active request information\n     * @return {object} The start and end time of the current segment in \"media time\"\n     */\n  }, {\n    key: 'probeMp4Segment_',\n    value: function probeMp4Segment_(segmentInfo) {\n      var segment = segmentInfo.segment;\n      var timescales = _muxJsLibMp4Probe2['default'].timescale(segment.map.bytes);\n      var startTime = _muxJsLibMp4Probe2['default'].startTime(timescales, segmentInfo.bytes);\n\n      if (segmentInfo.timestampOffset !== null) {\n        segmentInfo.timestampOffset -= startTime;\n      }\n\n      return {\n        start: startTime,\n        end: startTime + segment.duration\n      };\n    }\n\n    /**\n     * Probe an mpeg2-ts segment to determine the start and end of the segment\n     * in it's internal \"media time\".\n     *\n     * @private\n     * @param {SegmentInfo} segmentInfo - The current active request information\n     * @return {object} The start and end time of the current segment in \"media time\"\n     */\n  }, {\n    key: 'probeTsSegment_',\n    value: function probeTsSegment_(segmentInfo) {\n      var timeInfo = (0, _muxJsLibToolsTsInspectorJs.inspect)(segmentInfo.bytes, this.inspectCache_);\n      var segmentStartTime = undefined;\n      var segmentEndTime = undefined;\n\n      if (!timeInfo) {\n        return null;\n      }\n\n      if (timeInfo.video && timeInfo.video.length === 2) {\n        this.inspectCache_ = timeInfo.video[1].dts;\n        segmentStartTime = timeInfo.video[0].dtsTime;\n        segmentEndTime = timeInfo.video[1].dtsTime;\n      } else if (timeInfo.audio && timeInfo.audio.length === 2) {\n        this.inspectCache_ = timeInfo.audio[1].dts;\n        segmentStartTime = timeInfo.audio[0].dtsTime;\n        segmentEndTime = timeInfo.audio[1].dtsTime;\n      }\n\n      return {\n        start: segmentStartTime,\n        end: segmentEndTime,\n        containsVideo: timeInfo.video && timeInfo.video.length === 2,\n        containsAudio: timeInfo.audio && timeInfo.audio.length === 2\n      };\n    }\n  }, {\n    key: 'timestampOffsetForTimeline',\n    value: function timestampOffsetForTimeline(timeline) {\n      if (typeof this.timelines[timeline] === 'undefined') {\n        return null;\n      }\n      return this.timelines[timeline].time;\n    }\n  }, {\n    key: 'mappingForTimeline',\n    value: function mappingForTimeline(timeline) {\n      if (typeof this.timelines[timeline] === 'undefined') {\n        return null;\n      }\n      return this.timelines[timeline].mapping;\n    }\n\n    /**\n     * Use the \"media time\" for a segment to generate a mapping to \"display time\" and\n     * save that display time to the segment.\n     *\n     * @private\n     * @param {SegmentInfo} segmentInfo\n     *        The current active request information\n     * @param {object} timingInfo\n     *        The start and end time of the current segment in \"media time\"\n     * @returns {Boolean}\n     *          Returns false if segment time mapping could not be calculated\n     */\n  }, {\n    key: 'calculateSegmentTimeMapping_',\n    value: function calculateSegmentTimeMapping_(segmentInfo, timingInfo) {\n      var segment = segmentInfo.segment;\n      var mappingObj = this.timelines[segmentInfo.timeline];\n\n      if (segmentInfo.timestampOffset !== null) {\n        this.logger_('tsO:', segmentInfo.timestampOffset);\n\n        mappingObj = {\n          time: segmentInfo.startOfSegment,\n          mapping: segmentInfo.startOfSegment - timingInfo.start\n        };\n        this.timelines[segmentInfo.timeline] = mappingObj;\n        this.trigger('timestampoffset');\n\n        segment.start = segmentInfo.startOfSegment;\n        segment.end = timingInfo.end + mappingObj.mapping;\n      } else if (mappingObj) {\n        segment.start = timingInfo.start + mappingObj.mapping;\n        segment.end = timingInfo.end + mappingObj.mapping;\n      } else {\n        return false;\n      }\n\n      return true;\n    }\n\n    /**\n     * Each time we have discontinuity in the playlist, attempt to calculate the location\n     * in display of the start of the discontinuity and save that. We also save an accuracy\n     * value so that we save values with the most accuracy (closest to 0.)\n     *\n     * @private\n     * @param {SegmentInfo} segmentInfo - The current active request information\n     */\n  }, {\n    key: 'saveDiscontinuitySyncInfo_',\n    value: function saveDiscontinuitySyncInfo_(segmentInfo) {\n      var playlist = segmentInfo.playlist;\n      var segment = segmentInfo.segment;\n\n      // If the current segment is a discontinuity then we know exactly where\n      // the start of the range and it's accuracy is 0 (greater accuracy values\n      // mean more approximation)\n      if (segment.discontinuity) {\n        this.discontinuities[segment.timeline] = {\n          time: segment.start,\n          accuracy: 0\n        };\n      } else if (playlist.discontinuityStarts.length) {\n        // Search for future discontinuities that we can provide better timing\n        // information for and save that information for sync purposes\n        for (var i = 0; i < playlist.discontinuityStarts.length; i++) {\n          var segmentIndex = playlist.discontinuityStarts[i];\n          var discontinuity = playlist.discontinuitySequence + i + 1;\n          var mediaIndexDiff = segmentIndex - segmentInfo.mediaIndex;\n          var accuracy = Math.abs(mediaIndexDiff);\n\n          if (!this.discontinuities[discontinuity] || this.discontinuities[discontinuity].accuracy > accuracy) {\n            var time = undefined;\n\n            if (mediaIndexDiff < 0) {\n              time = segment.start - (0, _playlist.sumDurations)(playlist, segmentInfo.mediaIndex, segmentIndex);\n            } else {\n              time = segment.end + (0, _playlist.sumDurations)(playlist, segmentInfo.mediaIndex + 1, segmentIndex);\n            }\n\n            this.discontinuities[discontinuity] = {\n              time: time,\n              accuracy: accuracy\n            };\n          }\n        }\n      }\n    }\n\n    /**\n     * A debugging logger noop that is set to console.log only if debugging\n     * is enabled globally\n     *\n     * @private\n     */\n  }, {\n    key: 'logger_',\n    value: function logger_() {}\n  }]);\n\n  return SyncController;\n})(_videoJs2['default'].EventTarget);\n\nexports['default'] = SyncController;\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{\"./playlist\":11,\"mux.js/lib/mp4/probe\":57,\"mux.js/lib/tools/ts-inspector.js\":59}],19:[function(require,module,exports){\n\n/**\n * @file - codecs.js - Handles tasks regarding codec strings such as translating them to\n * codec strings, or translating codec strings into objects that can be examined.\n */\n\n/**\n * Parses a codec string to retrieve the number of codecs specified,\n * the video codec and object type indicator, and the audio profile.\n */\n\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar parseCodecs = function parseCodecs() {\n  var codecs = arguments.length <= 0 || arguments[0] === undefined ? '' : arguments[0];\n\n  var result = {\n    codecCount: 0\n  };\n  var parsed = undefined;\n\n  result.codecCount = codecs.split(',').length;\n  result.codecCount = result.codecCount || 2;\n\n  // parse the video codec\n  parsed = /(^|\\s|,)+(avc1)([^ ,]*)/i.exec(codecs);\n  if (parsed) {\n    result.videoCodec = parsed[2];\n    result.videoObjectTypeIndicator = parsed[3];\n  }\n\n  // parse the last field of the audio codec\n  result.audioProfile = /(^|\\s|,)+mp4a.[0-9A-Fa-f]+\\.([0-9A-Fa-f]+)/i.exec(codecs);\n  result.audioProfile = result.audioProfile && result.audioProfile[2];\n\n  return result;\n};\nexports.parseCodecs = parseCodecs;\n},{}],20:[function(require,module,exports){\n(function (global){\n/**\n * @file vtt-segment-loader.js\n */\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\nvar _get = function get(_x3, _x4, _x5) { var _again = true; _function: while (_again) { var object = _x3, property = _x4, receiver = _x5; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x3 = parent; _x4 = property; _x5 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar _segmentLoader = require('./segment-loader');\n\nvar _segmentLoader2 = _interopRequireDefault(_segmentLoader);\n\nvar _videoJs = (typeof window !== \"undefined\" ? window['videojs'] : typeof global !== \"undefined\" ? global['videojs'] : null);\n\nvar _videoJs2 = _interopRequireDefault(_videoJs);\n\nvar _globalWindow = require('global/window');\n\nvar _globalWindow2 = _interopRequireDefault(_globalWindow);\n\nvar _videojsContribMediaSourcesEs5RemoveCuesFromTrackJs = require('videojs-contrib-media-sources/es5/remove-cues-from-track.js');\n\nvar _videojsContribMediaSourcesEs5RemoveCuesFromTrackJs2 = _interopRequireDefault(_videojsContribMediaSourcesEs5RemoveCuesFromTrackJs);\n\nvar _binUtils = require('./bin-utils');\n\nvar VTT_LINE_TERMINATORS = new Uint8Array('\\n\\n'.split('').map(function (char) {\n  return char.charCodeAt(0);\n}));\n\nvar uintToString = function uintToString(uintArray) {\n  return String.fromCharCode.apply(null, uintArray);\n};\n\n/**\n * An object that manages segment loading and appending.\n *\n * @class VTTSegmentLoader\n * @param {Object} options required and optional options\n * @extends videojs.EventTarget\n */\n\nvar VTTSegmentLoader = (function (_SegmentLoader) {\n  _inherits(VTTSegmentLoader, _SegmentLoader);\n\n  function VTTSegmentLoader(settings) {\n    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n    _classCallCheck(this, VTTSegmentLoader);\n\n    _get(Object.getPrototypeOf(VTTSegmentLoader.prototype), 'constructor', this).call(this, settings, options);\n\n    // SegmentLoader requires a MediaSource be specified or it will throw an error;\n    // however, VTTSegmentLoader has no need of a media source, so delete the reference\n    this.mediaSource_ = null;\n\n    this.subtitlesTrack_ = null;\n  }\n\n  /**\n   * Indicates which time ranges are buffered\n   *\n   * @return {TimeRange}\n   *         TimeRange object representing the current buffered ranges\n   */\n\n  _createClass(VTTSegmentLoader, [{\n    key: 'buffered_',\n    value: function buffered_() {\n      if (!this.subtitlesTrack_ || !this.subtitlesTrack_.cues.length) {\n        return _videoJs2['default'].createTimeRanges();\n      }\n\n      var cues = this.subtitlesTrack_.cues;\n      var start = cues[0].startTime;\n      var end = cues[cues.length - 1].startTime;\n\n      return _videoJs2['default'].createTimeRanges([[start, end]]);\n    }\n\n    /**\n     * Gets and sets init segment for the provided map\n     *\n     * @param {Object} map\n     *        The map object representing the init segment to get or set\n     * @param {Boolean=} set\n     *        If true, the init segment for the provided map should be saved\n     * @return {Object}\n     *         map object for desired init segment\n     */\n  }, {\n    key: 'initSegment',\n    value: function initSegment(map) {\n      var set = arguments.length <= 1 || arguments[1] === undefined ? false : arguments[1];\n\n      if (!map) {\n        return null;\n      }\n\n      var id = (0, _binUtils.initSegmentId)(map);\n      var storedMap = this.initSegments_[id];\n\n      if (set && !storedMap && map.bytes) {\n        // append WebVTT line terminators to the media initialization segment if it exists\n        // to follow the WebVTT spec (https://w3c.github.io/webvtt/#file-structure) that\n        // requires two or more WebVTT line terminators between the WebVTT header and the\n        // rest of the file\n        var combinedByteLength = VTT_LINE_TERMINATORS.byteLength + map.bytes.byteLength;\n        var combinedSegment = new Uint8Array(combinedByteLength);\n\n        combinedSegment.set(map.bytes);\n        combinedSegment.set(VTT_LINE_TERMINATORS, map.bytes.byteLength);\n\n        this.initSegments_[id] = storedMap = {\n          resolvedUri: map.resolvedUri,\n          byterange: map.byterange,\n          bytes: combinedSegment\n        };\n      }\n\n      return storedMap || map;\n    }\n\n    /**\n     * Returns true if all configuration required for loading is present, otherwise false.\n     *\n     * @return {Boolean} True if the all configuration is ready for loading\n     * @private\n     */\n  }, {\n    key: 'couldBeginLoading_',\n    value: function couldBeginLoading_() {\n      return this.playlist_ && this.subtitlesTrack_ && !this.paused();\n    }\n\n    /**\n     * Once all the starting parameters have been specified, begin\n     * operation. This method should only be invoked from the INIT\n     * state.\n     *\n     * @private\n     */\n  }, {\n    key: 'init_',\n    value: function init_() {\n      this.state = 'READY';\n      this.resetEverything();\n      return this.monitorBuffer_();\n    }\n\n    /**\n     * Set a subtitle track on the segment loader to add subtitles to\n     *\n     * @param {TextTrack=} track\n     *        The text track to add loaded subtitles to\n     * @return {TextTrack}\n     *        Returns the subtitles track\n     */\n  }, {\n    key: 'track',\n    value: function track(_track) {\n      if (typeof _track === 'undefined') {\n        return this.subtitlesTrack_;\n      }\n\n      this.subtitlesTrack_ = _track;\n\n      // if we were unpaused but waiting for a sourceUpdater, start\n      // buffering now\n      if (this.state === 'INIT' && this.couldBeginLoading_()) {\n        this.init_();\n      }\n\n      return this.subtitlesTrack_;\n    }\n\n    /**\n     * Remove any data in the source buffer between start and end times\n     * @param {Number} start - the start time of the region to remove from the buffer\n     * @param {Number} end - the end time of the region to remove from the buffer\n     */\n  }, {\n    key: 'remove',\n    value: function remove(start, end) {\n      (0, _videojsContribMediaSourcesEs5RemoveCuesFromTrackJs2['default'])(start, end, this.subtitlesTrack_);\n    }\n\n    /**\n     * fill the buffer with segements unless the sourceBuffers are\n     * currently updating\n     *\n     * Note: this function should only ever be called by monitorBuffer_\n     * and never directly\n     *\n     * @private\n     */\n  }, {\n    key: 'fillBuffer_',\n    value: function fillBuffer_() {\n      var _this = this;\n\n      if (!this.syncPoint_) {\n        this.syncPoint_ = this.syncController_.getSyncPoint(this.playlist_, this.duration_(), this.currentTimeline_, this.currentTime_());\n      }\n\n      // see if we need to begin loading immediately\n      var segmentInfo = this.checkBuffer_(this.buffered_(), this.playlist_, this.mediaIndex, this.hasPlayed_(), this.currentTime_(), this.syncPoint_);\n\n      segmentInfo = this.skipEmptySegments_(segmentInfo);\n\n      if (!segmentInfo) {\n        return;\n      }\n\n      if (this.syncController_.timestampOffsetForTimeline(segmentInfo.timeline) === null) {\n        // We don't have the timestamp offset that we need to sync subtitles.\n        // Rerun on a timestamp offset or user interaction.\n        var checkTimestampOffset = function checkTimestampOffset() {\n          _this.state = 'READY';\n          if (!_this.paused()) {\n            // if not paused, queue a buffer check as soon as possible\n            _this.monitorBuffer_();\n          }\n        };\n\n        this.syncController_.one('timestampoffset', checkTimestampOffset);\n        this.state = 'WAITING_ON_TIMELINE';\n        return;\n      }\n\n      this.loadSegment_(segmentInfo);\n    }\n\n    /**\n     * Prevents the segment loader from requesting segments we know contain no subtitles\n     * by walking forward until we find the next segment that we don't know whether it is\n     * empty or not.\n     *\n     * @param {Object} segmentInfo\n     *        a segment info object that describes the current segment\n     * @return {Object}\n     *         a segment info object that describes the current segment\n     */\n  }, {\n    key: 'skipEmptySegments_',\n    value: function skipEmptySegments_(segmentInfo) {\n      while (segmentInfo && segmentInfo.segment.empty) {\n        segmentInfo = this.generateSegmentInfo_(segmentInfo.playlist, segmentInfo.mediaIndex + 1, segmentInfo.startOfSegment + segmentInfo.duration, segmentInfo.isSyncRequest);\n      }\n      return segmentInfo;\n    }\n\n    /**\n     * append a decrypted segement to the SourceBuffer through a SourceUpdater\n     *\n     * @private\n     */\n  }, {\n    key: 'handleSegment_',\n    value: function handleSegment_() {\n      var _this2 = this;\n\n      if (!this.pendingSegment_ || !this.subtitlesTrack_) {\n        this.state = 'READY';\n        return;\n      }\n\n      this.state = 'APPENDING';\n\n      var segmentInfo = this.pendingSegment_;\n      var segment = segmentInfo.segment;\n\n      // Make sure that vttjs has loaded, otherwise, wait till it finished loading\n      if (typeof _globalWindow2['default'].WebVTT !== 'function' && this.subtitlesTrack_ && this.subtitlesTrack_.tech_) {\n        var _ret = (function () {\n\n          var loadHandler = function loadHandler() {\n            _this2.handleSegment_();\n          };\n\n          _this2.state = 'WAITING_ON_VTTJS';\n          _this2.subtitlesTrack_.tech_.one('vttjsloaded', loadHandler);\n          _this2.subtitlesTrack_.tech_.one('vttjserror', function () {\n            _this2.subtitlesTrack_.tech_.off('vttjsloaded', loadHandler);\n            _this2.error({\n              message: 'Error loading vtt.js'\n            });\n            _this2.state = 'READY';\n            _this2.pause();\n            _this2.trigger('error');\n          });\n\n          return {\n            v: undefined\n          };\n        })();\n\n        if (typeof _ret === 'object') return _ret.v;\n      }\n\n      segment.requested = true;\n\n      try {\n        this.parseVTTCues_(segmentInfo);\n      } catch (e) {\n        this.error({\n          message: e.message\n        });\n        this.state = 'READY';\n        this.pause();\n        return this.trigger('error');\n      }\n\n      this.updateTimeMapping_(segmentInfo, this.syncController_.timelines[segmentInfo.timeline], this.playlist_);\n\n      if (segmentInfo.isSyncRequest) {\n        this.trigger('syncinfoupdate');\n        this.pendingSegment_ = null;\n        this.state = 'READY';\n        return;\n      }\n\n      segmentInfo.byteLength = segmentInfo.bytes.byteLength;\n\n      this.mediaSecondsLoaded += segment.duration;\n\n      if (segmentInfo.cues.length) {\n        // remove any overlapping cues to prevent doubling\n        this.remove(segmentInfo.cues[0].endTime, segmentInfo.cues[segmentInfo.cues.length - 1].endTime);\n      }\n\n      segmentInfo.cues.forEach(function (cue) {\n        _this2.subtitlesTrack_.addCue(cue);\n      });\n\n      this.handleUpdateEnd_();\n    }\n\n    /**\n     * Uses the WebVTT parser to parse the segment response\n     *\n     * @param {Object} segmentInfo\n     *        a segment info object that describes the current segment\n     * @private\n     */\n  }, {\n    key: 'parseVTTCues_',\n    value: function parseVTTCues_(segmentInfo) {\n      var decoder = undefined;\n      var decodeBytesToString = false;\n\n      if (typeof _globalWindow2['default'].TextDecoder === 'function') {\n        decoder = new _globalWindow2['default'].TextDecoder('utf8');\n      } else {\n        decoder = _globalWindow2['default'].WebVTT.StringDecoder();\n        decodeBytesToString = true;\n      }\n\n      var parser = new _globalWindow2['default'].WebVTT.Parser(_globalWindow2['default'], _globalWindow2['default'].vttjs, decoder);\n\n      segmentInfo.cues = [];\n      segmentInfo.timestampmap = { MPEGTS: 0, LOCAL: 0 };\n\n      parser.oncue = segmentInfo.cues.push.bind(segmentInfo.cues);\n      parser.ontimestampmap = function (map) {\n        return segmentInfo.timestampmap = map;\n      };\n      parser.onparsingerror = function (error) {\n        _videoJs2['default'].log.warn('Error encountered when parsing cues: ' + error.message);\n      };\n\n      if (segmentInfo.segment.map) {\n        var mapData = segmentInfo.segment.map.bytes;\n\n        if (decodeBytesToString) {\n          mapData = uintToString(mapData);\n        }\n\n        parser.parse(mapData);\n      }\n\n      var segmentData = segmentInfo.bytes;\n\n      if (decodeBytesToString) {\n        segmentData = uintToString(segmentData);\n      }\n\n      parser.parse(segmentData);\n      parser.flush();\n    }\n\n    /**\n     * Updates the start and end times of any cues parsed by the WebVTT parser using\n     * the information parsed from the X-TIMESTAMP-MAP header and a TS to media time mapping\n     * from the SyncController\n     *\n     * @param {Object} segmentInfo\n     *        a segment info object that describes the current segment\n     * @param {Object} mappingObj\n     *        object containing a mapping from TS to media time\n     * @param {Object} playlist\n     *        the playlist object containing the segment\n     * @private\n     */\n  }, {\n    key: 'updateTimeMapping_',\n    value: function updateTimeMapping_(segmentInfo, mappingObj, playlist) {\n      var segment = segmentInfo.segment;\n\n      if (!mappingObj) {\n        // If the sync controller does not have a mapping of TS to Media Time for the\n        // timeline, then we don't have enough information to update the cue\n        // start/end times\n        return;\n      }\n\n      if (!segmentInfo.cues.length) {\n        // If there are no cues, we also do not have enough information to figure out\n        // segment timing. Mark that the segment contains no cues so we don't re-request\n        // an empty segment.\n        segment.empty = true;\n        return;\n      }\n\n      var timestampmap = segmentInfo.timestampmap;\n      var diff = timestampmap.MPEGTS / 90000 - timestampmap.LOCAL + mappingObj.mapping;\n\n      segmentInfo.cues.forEach(function (cue) {\n        // First convert cue time to TS time using the timestamp-map provided within the vtt\n        cue.startTime += diff;\n        cue.endTime += diff;\n      });\n\n      if (!playlist.syncInfo) {\n        var firstStart = segmentInfo.cues[0].startTime;\n        var lastStart = segmentInfo.cues[segmentInfo.cues.length - 1].startTime;\n\n        playlist.syncInfo = {\n          mediaSequence: playlist.mediaSequence + segmentInfo.mediaIndex,\n          time: Math.min(firstStart, lastStart - segment.duration)\n        };\n      }\n    }\n  }]);\n\n  return VTTSegmentLoader;\n})(_segmentLoader2['default']);\n\nexports['default'] = VTTSegmentLoader;\nmodule.exports = exports['default'];\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{\"./bin-utils\":2,\"./segment-loader\":16,\"global/window\":32,\"videojs-contrib-media-sources/es5/remove-cues-from-track.js\":72}],21:[function(require,module,exports){\n(function (global){\n/**\n * @file xhr.js\n */\n\n/**\n * A wrapper for videojs.xhr that tracks bandwidth.\n *\n * @param {Object} options options for the XHR\n * @param {Function} callback the callback to call when done\n * @return {Request} the xhr request that is going to be made\n */\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nvar _videoJs = (typeof window !== \"undefined\" ? window['videojs'] : typeof global !== \"undefined\" ? global['videojs'] : null);\n\nvar _videoJs2 = _interopRequireDefault(_videoJs);\n\nvar xhrFactory = function xhrFactory() {\n  var xhr = function XhrFunction(options, callback) {\n    // Add a default timeout for all hls requests\n    options = (0, _videoJs.mergeOptions)({\n      timeout: 45e3\n    }, options);\n\n    // Allow an optional user-specified function to modify the option\n    // object before we construct the xhr request\n    var beforeRequest = XhrFunction.beforeRequest || _videoJs2['default'].Hls.xhr.beforeRequest;\n\n    if (beforeRequest && typeof beforeRequest === 'function') {\n      var newOptions = beforeRequest(options);\n\n      if (newOptions) {\n        options = newOptions;\n      }\n    }\n\n    var request = (0, _videoJs.xhr)(options, function (error, response) {\n      var reqResponse = request.response;\n\n      if (!error && reqResponse) {\n        request.responseTime = Date.now();\n        request.roundTripTime = request.responseTime - request.requestTime;\n        request.bytesReceived = reqResponse.byteLength || reqResponse.length;\n        if (!request.bandwidth) {\n          request.bandwidth = Math.floor(request.bytesReceived / request.roundTripTime * 8 * 1000);\n        }\n      }\n\n      // videojs.xhr now uses a specific code on the error\n      // object to signal that a request has timed out instead\n      // of setting a boolean on the request object\n      if (error && error.code === 'ETIMEDOUT') {\n        request.timedout = true;\n      }\n\n      // videojs.xhr no longer considers status codes outside of 200 and 0\n      // (for file uris) to be errors, but the old XHR did, so emulate that\n      // behavior. Status 206 may be used in response to byterange requests.\n      if (!error && !request.aborted && response.statusCode !== 200 && response.statusCode !== 206 && response.statusCode !== 0) {\n        error = new Error('XHR Failed with a response of: ' + (request && (reqResponse || request.responseText)));\n      }\n\n      callback(error, request);\n    });\n    var originalAbort = request.abort;\n\n    request.abort = function () {\n      request.aborted = true;\n      return originalAbort.apply(request, arguments);\n    };\n    request.uri = options.uri;\n    request.requestTime = Date.now();\n    return request;\n  };\n\n  return xhr;\n};\n\nexports['default'] = xhrFactory;\nmodule.exports = exports['default'];\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{}],22:[function(require,module,exports){\n/**\n * @file aes.js\n *\n * This file contains an adaptation of the AES decryption algorithm\n * from the Standford Javascript Cryptography Library. That work is\n * covered by the following copyright and permissions notice:\n *\n * Copyright 2009-2010 Emily Stark, Mike Hamburg, Dan Boneh.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n * 1. Redistributions of source code must retain the above copyright\n *    notice, this list of conditions and the following disclaimer.\n *\n * 2. Redistributions in binary form must reproduce the above\n *    copyright notice, this list of conditions and the following\n *    disclaimer in the documentation and/or other materials provided\n *    with the distribution.\n *\n * THIS SOFTWARE IS PROVIDED BY THE AUTHORS ``AS IS'' AND ANY EXPRESS OR\n * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> OR CONTRIBUTORS BE\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR\n * BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE\n * OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN\n * IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n *\n * The views and conclusions contained in the software and documentation\n * are those of the authors and should not be interpreted as representing\n * official policies, either expressed or implied, of the authors.\n */\n\n/**\n * Expand the S-box tables.\n *\n * @private\n */\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\nvar precompute = function precompute() {\n  var tables = [[[], [], [], [], []], [[], [], [], [], []]];\n  var encTable = tables[0];\n  var decTable = tables[1];\n  var sbox = encTable[4];\n  var sboxInv = decTable[4];\n  var i = undefined;\n  var x = undefined;\n  var xInv = undefined;\n  var d = [];\n  var th = [];\n  var x2 = undefined;\n  var x4 = undefined;\n  var x8 = undefined;\n  var s = undefined;\n  var tEnc = undefined;\n  var tDec = undefined;\n\n  // Compute double and third tables\n  for (i = 0; i < 256; i++) {\n    th[(d[i] = i << 1 ^ (i >> 7) * 283) ^ i] = i;\n  }\n\n  for (x = xInv = 0; !sbox[x]; x ^= x2 || 1, xInv = th[xInv] || 1) {\n    // Compute sbox\n    s = xInv ^ xInv << 1 ^ xInv << 2 ^ xInv << 3 ^ xInv << 4;\n    s = s >> 8 ^ s & 255 ^ 99;\n    sbox[x] = s;\n    sboxInv[s] = x;\n\n    // Compute MixColumns\n    x8 = d[x4 = d[x2 = d[x]]];\n    tDec = x8 * 0x1010101 ^ x4 * 0x10001 ^ x2 * 0x101 ^ x * 0x1010100;\n    tEnc = d[s] * 0x101 ^ s * 0x1010100;\n\n    for (i = 0; i < 4; i++) {\n      encTable[i][x] = tEnc = tEnc << 24 ^ tEnc >>> 8;\n      decTable[i][s] = tDec = tDec << 24 ^ tDec >>> 8;\n    }\n  }\n\n  // Compactify. Considerable speedup on Firefox.\n  for (i = 0; i < 5; i++) {\n    encTable[i] = encTable[i].slice(0);\n    decTable[i] = decTable[i].slice(0);\n  }\n  return tables;\n};\nvar aesTables = null;\n\n/**\n * Schedule out an AES key for both encryption and decryption. This\n * is a low-level class. Use a cipher mode to do bulk encryption.\n *\n * @class AES\n * @param key {Array} The key as an array of 4, 6 or 8 words.\n */\n\nvar AES = (function () {\n  function AES(key) {\n    _classCallCheck(this, AES);\n\n    /**\n     * The expanded S-box and inverse S-box tables. These will be computed\n     * on the client so that we don't have to send them down the wire.\n     *\n     * There are two tables, _tables[0] is for encryption and\n     * _tables[1] is for decryption.\n     *\n     * The first 4 sub-tables are the expanded S-box with MixColumns. The\n     * last (_tables[01][4]) is the S-box itself.\n     *\n     * @private\n     */\n    // if we have yet to precompute the S-box tables\n    // do so now\n    if (!aesTables) {\n      aesTables = precompute();\n    }\n    // then make a copy of that object for use\n    this._tables = [[aesTables[0][0].slice(), aesTables[0][1].slice(), aesTables[0][2].slice(), aesTables[0][3].slice(), aesTables[0][4].slice()], [aesTables[1][0].slice(), aesTables[1][1].slice(), aesTables[1][2].slice(), aesTables[1][3].slice(), aesTables[1][4].slice()]];\n    var i = undefined;\n    var j = undefined;\n    var tmp = undefined;\n    var encKey = undefined;\n    var decKey = undefined;\n    var sbox = this._tables[0][4];\n    var decTable = this._tables[1];\n    var keyLen = key.length;\n    var rcon = 1;\n\n    if (keyLen !== 4 && keyLen !== 6 && keyLen !== 8) {\n      throw new Error('Invalid aes key size');\n    }\n\n    encKey = key.slice(0);\n    decKey = [];\n    this._key = [encKey, decKey];\n\n    // schedule encryption keys\n    for (i = keyLen; i < 4 * keyLen + 28; i++) {\n      tmp = encKey[i - 1];\n\n      // apply sbox\n      if (i % keyLen === 0 || keyLen === 8 && i % keyLen === 4) {\n        tmp = sbox[tmp >>> 24] << 24 ^ sbox[tmp >> 16 & 255] << 16 ^ sbox[tmp >> 8 & 255] << 8 ^ sbox[tmp & 255];\n\n        // shift rows and add rcon\n        if (i % keyLen === 0) {\n          tmp = tmp << 8 ^ tmp >>> 24 ^ rcon << 24;\n          rcon = rcon << 1 ^ (rcon >> 7) * 283;\n        }\n      }\n\n      encKey[i] = encKey[i - keyLen] ^ tmp;\n    }\n\n    // schedule decryption keys\n    for (j = 0; i; j++, i--) {\n      tmp = encKey[j & 3 ? i : i - 4];\n      if (i <= 4 || j < 4) {\n        decKey[j] = tmp;\n      } else {\n        decKey[j] = decTable[0][sbox[tmp >>> 24]] ^ decTable[1][sbox[tmp >> 16 & 255]] ^ decTable[2][sbox[tmp >> 8 & 255]] ^ decTable[3][sbox[tmp & 255]];\n      }\n    }\n  }\n\n  /**\n   * Decrypt 16 bytes, specified as four 32-bit words.\n   *\n   * @param {Number} encrypted0 the first word to decrypt\n   * @param {Number} encrypted1 the second word to decrypt\n   * @param {Number} encrypted2 the third word to decrypt\n   * @param {Number} encrypted3 the fourth word to decrypt\n   * @param {Int32Array} out the array to write the decrypted words\n   * into\n   * @param {Number} offset the offset into the output array to start\n   * writing results\n   * @return {Array} The plaintext.\n   */\n\n  _createClass(AES, [{\n    key: 'decrypt',\n    value: function decrypt(encrypted0, encrypted1, encrypted2, encrypted3, out, offset) {\n      var key = this._key[1];\n      // state variables a,b,c,d are loaded with pre-whitened data\n      var a = encrypted0 ^ key[0];\n      var b = encrypted3 ^ key[1];\n      var c = encrypted2 ^ key[2];\n      var d = encrypted1 ^ key[3];\n      var a2 = undefined;\n      var b2 = undefined;\n      var c2 = undefined;\n\n      // key.length === 2 ?\n      var nInnerRounds = key.length / 4 - 2;\n      var i = undefined;\n      var kIndex = 4;\n      var table = this._tables[1];\n\n      // load up the tables\n      var table0 = table[0];\n      var table1 = table[1];\n      var table2 = table[2];\n      var table3 = table[3];\n      var sbox = table[4];\n\n      // Inner rounds. Cribbed from OpenSSL.\n      for (i = 0; i < nInnerRounds; i++) {\n        a2 = table0[a >>> 24] ^ table1[b >> 16 & 255] ^ table2[c >> 8 & 255] ^ table3[d & 255] ^ key[kIndex];\n        b2 = table0[b >>> 24] ^ table1[c >> 16 & 255] ^ table2[d >> 8 & 255] ^ table3[a & 255] ^ key[kIndex + 1];\n        c2 = table0[c >>> 24] ^ table1[d >> 16 & 255] ^ table2[a >> 8 & 255] ^ table3[b & 255] ^ key[kIndex + 2];\n        d = table0[d >>> 24] ^ table1[a >> 16 & 255] ^ table2[b >> 8 & 255] ^ table3[c & 255] ^ key[kIndex + 3];\n        kIndex += 4;\n        a = a2;b = b2;c = c2;\n      }\n\n      // Last round.\n      for (i = 0; i < 4; i++) {\n        out[(3 & -i) + offset] = sbox[a >>> 24] << 24 ^ sbox[b >> 16 & 255] << 16 ^ sbox[c >> 8 & 255] << 8 ^ sbox[d & 255] ^ key[kIndex++];\n        a2 = a;a = b;b = c;c = d;d = a2;\n      }\n    }\n  }]);\n\n  return AES;\n})();\n\nexports['default'] = AES;\nmodule.exports = exports['default'];\n},{}],23:[function(require,module,exports){\n/**\n * @file async-stream.js\n */\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\nvar _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar _stream = require('./stream');\n\nvar _stream2 = _interopRequireDefault(_stream);\n\n/**\n * A wrapper around the Stream class to use setTiemout\n * and run stream \"jobs\" Asynchronously\n *\n * @class AsyncStream\n * @extends Stream\n */\n\nvar AsyncStream = (function (_Stream) {\n  _inherits(AsyncStream, _Stream);\n\n  function AsyncStream() {\n    _classCallCheck(this, AsyncStream);\n\n    _get(Object.getPrototypeOf(AsyncStream.prototype), 'constructor', this).call(this, _stream2['default']);\n    this.jobs = [];\n    this.delay = 1;\n    this.timeout_ = null;\n  }\n\n  /**\n   * process an async job\n   *\n   * @private\n   */\n\n  _createClass(AsyncStream, [{\n    key: 'processJob_',\n    value: function processJob_() {\n      this.jobs.shift()();\n      if (this.jobs.length) {\n        this.timeout_ = setTimeout(this.processJob_.bind(this), this.delay);\n      } else {\n        this.timeout_ = null;\n      }\n    }\n\n    /**\n     * push a job into the stream\n     *\n     * @param {Function} job the job to push into the stream\n     */\n  }, {\n    key: 'push',\n    value: function push(job) {\n      this.jobs.push(job);\n      if (!this.timeout_) {\n        this.timeout_ = setTimeout(this.processJob_.bind(this), this.delay);\n      }\n    }\n  }]);\n\n  return AsyncStream;\n})(_stream2['default']);\n\nexports['default'] = AsyncStream;\nmodule.exports = exports['default'];\n},{\"./stream\":26}],24:[function(require,module,exports){\n/**\n * @file decrypter.js\n *\n * An asynchronous implementation of AES-128 CBC decryption with\n * PKCS#7 padding.\n */\n\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\nvar _aes = require('./aes');\n\nvar _aes2 = _interopRequireDefault(_aes);\n\nvar _asyncStream = require('./async-stream');\n\nvar _asyncStream2 = _interopRequireDefault(_asyncStream);\n\nvar _pkcs7 = require('pkcs7');\n\n/**\n * Convert network-order (big-endian) bytes into their little-endian\n * representation.\n */\nvar ntoh = function ntoh(word) {\n  return word << 24 | (word & 0xff00) << 8 | (word & 0xff0000) >> 8 | word >>> 24;\n};\n\n/**\n * Decrypt bytes using AES-128 with CBC and PKCS#7 padding.\n *\n * @param {Uint8Array} encrypted the encrypted bytes\n * @param {Uint32Array} key the bytes of the decryption key\n * @param {Uint32Array} initVector the initialization vector (IV) to\n * use for the first round of CBC.\n * @return {Uint8Array} the decrypted bytes\n *\n * @see http://en.wikipedia.org/wiki/Advanced_Encryption_Standard\n * @see http://en.wikipedia.org/wiki/Block_cipher_mode_of_operation#Cipher_Block_Chaining_.28CBC.29\n * @see https://tools.ietf.org/html/rfc2315\n */\nvar decrypt = function decrypt(encrypted, key, initVector) {\n  // word-level access to the encrypted bytes\n  var encrypted32 = new Int32Array(encrypted.buffer, encrypted.byteOffset, encrypted.byteLength >> 2);\n\n  var decipher = new _aes2['default'](Array.prototype.slice.call(key));\n\n  // byte and word-level access for the decrypted output\n  var decrypted = new Uint8Array(encrypted.byteLength);\n  var decrypted32 = new Int32Array(decrypted.buffer);\n\n  // temporary variables for working with the IV, encrypted, and\n  // decrypted data\n  var init0 = undefined;\n  var init1 = undefined;\n  var init2 = undefined;\n  var init3 = undefined;\n  var encrypted0 = undefined;\n  var encrypted1 = undefined;\n  var encrypted2 = undefined;\n  var encrypted3 = undefined;\n\n  // iteration variable\n  var wordIx = undefined;\n\n  // pull out the words of the IV to ensure we don't modify the\n  // passed-in reference and easier access\n  init0 = initVector[0];\n  init1 = initVector[1];\n  init2 = initVector[2];\n  init3 = initVector[3];\n\n  // decrypt four word sequences, applying cipher-block chaining (CBC)\n  // to each decrypted block\n  for (wordIx = 0; wordIx < encrypted32.length; wordIx += 4) {\n    // convert big-endian (network order) words into little-endian\n    // (javascript order)\n    encrypted0 = ntoh(encrypted32[wordIx]);\n    encrypted1 = ntoh(encrypted32[wordIx + 1]);\n    encrypted2 = ntoh(encrypted32[wordIx + 2]);\n    encrypted3 = ntoh(encrypted32[wordIx + 3]);\n\n    // decrypt the block\n    decipher.decrypt(encrypted0, encrypted1, encrypted2, encrypted3, decrypted32, wordIx);\n\n    // XOR with the IV, and restore network byte-order to obtain the\n    // plaintext\n    decrypted32[wordIx] = ntoh(decrypted32[wordIx] ^ init0);\n    decrypted32[wordIx + 1] = ntoh(decrypted32[wordIx + 1] ^ init1);\n    decrypted32[wordIx + 2] = ntoh(decrypted32[wordIx + 2] ^ init2);\n    decrypted32[wordIx + 3] = ntoh(decrypted32[wordIx + 3] ^ init3);\n\n    // setup the IV for the next round\n    init0 = encrypted0;\n    init1 = encrypted1;\n    init2 = encrypted2;\n    init3 = encrypted3;\n  }\n\n  return decrypted;\n};\n\nexports.decrypt = decrypt;\n/**\n * The `Decrypter` class that manages decryption of AES\n * data through `AsyncStream` objects and the `decrypt`\n * function\n *\n * @param {Uint8Array} encrypted the encrypted bytes\n * @param {Uint32Array} key the bytes of the decryption key\n * @param {Uint32Array} initVector the initialization vector (IV) to\n * @param {Function} done the function to run when done\n * @class Decrypter\n */\n\nvar Decrypter = (function () {\n  function Decrypter(encrypted, key, initVector, done) {\n    _classCallCheck(this, Decrypter);\n\n    var step = Decrypter.STEP;\n    var encrypted32 = new Int32Array(encrypted.buffer);\n    var decrypted = new Uint8Array(encrypted.byteLength);\n    var i = 0;\n\n    this.asyncStream_ = new _asyncStream2['default']();\n\n    // split up the encryption job and do the individual chunks asynchronously\n    this.asyncStream_.push(this.decryptChunk_(encrypted32.subarray(i, i + step), key, initVector, decrypted));\n    for (i = step; i < encrypted32.length; i += step) {\n      initVector = new Uint32Array([ntoh(encrypted32[i - 4]), ntoh(encrypted32[i - 3]), ntoh(encrypted32[i - 2]), ntoh(encrypted32[i - 1])]);\n      this.asyncStream_.push(this.decryptChunk_(encrypted32.subarray(i, i + step), key, initVector, decrypted));\n    }\n    // invoke the done() callback when everything is finished\n    this.asyncStream_.push(function () {\n      // remove pkcs#7 padding from the decrypted bytes\n      done(null, (0, _pkcs7.unpad)(decrypted));\n    });\n  }\n\n  /**\n   * a getter for step the maximum number of bytes to process at one time\n   *\n   * @return {Number} the value of step 32000\n   */\n\n  _createClass(Decrypter, [{\n    key: 'decryptChunk_',\n\n    /**\n     * @private\n     */\n    value: function decryptChunk_(encrypted, key, initVector, decrypted) {\n      return function () {\n        var bytes = decrypt(encrypted, key, initVector);\n\n        decrypted.set(bytes, encrypted.byteOffset);\n      };\n    }\n  }], [{\n    key: 'STEP',\n    get: function get() {\n      // 4 * 8000;\n      return 32000;\n    }\n  }]);\n\n  return Decrypter;\n})();\n\nexports.Decrypter = Decrypter;\nexports['default'] = {\n  Decrypter: Decrypter,\n  decrypt: decrypt\n};\n},{\"./aes\":22,\"./async-stream\":23,\"pkcs7\":28}],25:[function(require,module,exports){\n/**\n * @file index.js\n *\n * Index module to easily import the primary components of AES-128\n * decryption. Like this:\n *\n * ```js\n * import {Decrypter, decrypt, AsyncStream} from 'aes-decrypter';\n * ```\n */\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nvar _decrypter = require('./decrypter');\n\nvar _asyncStream = require('./async-stream');\n\nvar _asyncStream2 = _interopRequireDefault(_asyncStream);\n\nexports['default'] = {\n  decrypt: _decrypter.decrypt,\n  Decrypter: _decrypter.Decrypter,\n  AsyncStream: _asyncStream2['default']\n};\nmodule.exports = exports['default'];\n},{\"./async-stream\":23,\"./decrypter\":24}],26:[function(require,module,exports){\n/**\n * @file stream.js\n */\n/**\n * A lightweight readable stream implemention that handles event dispatching.\n *\n * @class Stream\n */\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\nvar Stream = (function () {\n  function Stream() {\n    _classCallCheck(this, Stream);\n\n    this.listeners = {};\n  }\n\n  /**\n   * Add a listener for a specified event type.\n   *\n   * @param {String} type the event name\n   * @param {Function} listener the callback to be invoked when an event of\n   * the specified type occurs\n   */\n\n  _createClass(Stream, [{\n    key: 'on',\n    value: function on(type, listener) {\n      if (!this.listeners[type]) {\n        this.listeners[type] = [];\n      }\n      this.listeners[type].push(listener);\n    }\n\n    /**\n     * Remove a listener for a specified event type.\n     *\n     * @param {String} type the event name\n     * @param {Function} listener  a function previously registered for this\n     * type of event through `on`\n     * @return {Boolean} if we could turn it off or not\n     */\n  }, {\n    key: 'off',\n    value: function off(type, listener) {\n      var index = undefined;\n\n      if (!this.listeners[type]) {\n        return false;\n      }\n      index = this.listeners[type].indexOf(listener);\n      this.listeners[type].splice(index, 1);\n      return index > -1;\n    }\n\n    /**\n     * Trigger an event of the specified type on this stream. Any additional\n     * arguments to this function are passed as parameters to event listeners.\n     *\n     * @param {String} type the event name\n     */\n  }, {\n    key: 'trigger',\n    value: function trigger(type) {\n      var callbacks = undefined;\n      var i = undefined;\n      var length = undefined;\n      var args = undefined;\n\n      callbacks = this.listeners[type];\n      if (!callbacks) {\n        return;\n      }\n      // Slicing the arguments on every invocation of this method\n      // can add a significant amount of overhead. Avoid the\n      // intermediate object creation for the common case of a\n      // single callback argument\n      if (arguments.length === 2) {\n        length = callbacks.length;\n        for (i = 0; i < length; ++i) {\n          callbacks[i].call(this, arguments[1]);\n        }\n      } else {\n        args = Array.prototype.slice.call(arguments, 1);\n        length = callbacks.length;\n        for (i = 0; i < length; ++i) {\n          callbacks[i].apply(this, args);\n        }\n      }\n    }\n\n    /**\n     * Destroys the stream and cleans up.\n     */\n  }, {\n    key: 'dispose',\n    value: function dispose() {\n      this.listeners = {};\n    }\n\n    /**\n     * Forwards all `data` events on this stream to the destination stream. The\n     * destination stream should provide a method `push` to receive the data\n     * events as they arrive.\n     *\n     * @param {Stream} destination the stream that will receive all `data` events\n     * @see http://nodejs.org/api/stream.html#stream_readable_pipe_destination_options\n     */\n  }, {\n    key: 'pipe',\n    value: function pipe(destination) {\n      this.on('data', function (data) {\n        destination.push(data);\n      });\n    }\n  }]);\n\n  return Stream;\n})();\n\nexports['default'] = Stream;\nmodule.exports = exports['default'];\n},{}],27:[function(require,module,exports){\n/*\n * pkcs7.pad\n * https://github.com/brightcove/pkcs7\n *\n * Copyright (c) 2014 Brightcove\n * Licensed under the apache2 license.\n */\n\n'use strict';\n\nvar PADDING;\n\n/**\n * Returns a new Uint8Array that is padded with PKCS#7 padding.\n * @param plaintext {Uint8Array} the input bytes before encryption\n * @return {Uint8Array} the padded bytes\n * @see http://tools.ietf.org/html/rfc5652\n */\nmodule.exports = function pad(plaintext) {\n  var padding = PADDING[(plaintext.byteLength % 16) || 0],\n      result = new Uint8Array(plaintext.byteLength + padding.length);\n  result.set(plaintext);\n  result.set(padding, plaintext.byteLength);\n  return result;\n};\n\n// pre-define the padding values\nPADDING = [\n  [16, 16, 16, 16,\n   16, 16, 16, 16,\n   16, 16, 16, 16,\n   16, 16, 16, 16],\n\n  [15, 15, 15, 15,\n   15, 15, 15, 15,\n   15, 15, 15, 15,\n   15, 15, 15],\n\n  [14, 14, 14, 14,\n   14, 14, 14, 14,\n   14, 14, 14, 14,\n   14, 14],\n\n  [13, 13, 13, 13,\n   13, 13, 13, 13,\n   13, 13, 13, 13,\n   13],\n\n  [12, 12, 12, 12,\n   12, 12, 12, 12,\n   12, 12, 12, 12],\n\n  [11, 11, 11, 11,\n   11, 11, 11, 11,\n   11, 11, 11],\n\n  [10, 10, 10, 10,\n   10, 10, 10, 10,\n   10, 10],\n\n  [9, 9, 9, 9,\n   9, 9, 9, 9,\n   9],\n\n  [8, 8, 8, 8,\n   8, 8, 8, 8],\n\n  [7, 7, 7, 7,\n   7, 7, 7],\n\n  [6, 6, 6, 6,\n   6, 6],\n\n  [5, 5, 5, 5,\n   5],\n\n  [4, 4, 4, 4],\n\n  [3, 3, 3],\n\n  [2, 2],\n\n  [1]\n];\n\n},{}],28:[function(require,module,exports){\n/*\n * pkcs7\n * https://github.com/brightcove/pkcs7\n *\n * Copyright (c) 2014 Brightcove\n * Licensed under the apache2 license.\n */\n\n'use strict';\n\nexports.pad = require('./pad.js');\nexports.unpad = require('./unpad.js');\n\n},{\"./pad.js\":27,\"./unpad.js\":29}],29:[function(require,module,exports){\n/*\n * pkcs7.unpad\n * https://github.com/brightcove/pkcs7\n *\n * Copyright (c) 2014 Brightcove\n * Licensed under the apache2 license.\n */\n\n'use strict';\n\n/**\n * Returns the subarray of a Uint8Array without PKCS#7 padding.\n * @param padded {Uint8Array} unencrypted bytes that have been padded\n * @return {Uint8Array} the unpadded bytes\n * @see http://tools.ietf.org/html/rfc5652\n */\nmodule.exports = function unpad(padded) {\n  return padded.subarray(0, padded.byteLength - padded[padded.byteLength - 1]);\n};\n\n},{}],30:[function(require,module,exports){\n\n},{}],31:[function(require,module,exports){\n(function (global){\nvar topLevel = typeof global !== 'undefined' ? global :\n    typeof window !== 'undefined' ? window : {}\nvar minDoc = require('min-document');\n\nvar doccy;\n\nif (typeof document !== 'undefined') {\n    doccy = document;\n} else {\n    doccy = topLevel['__GLOBAL_DOCUMENT_CACHE@4'];\n\n    if (!doccy) {\n        doccy = topLevel['__GLOBAL_DOCUMENT_CACHE@4'] = minDoc;\n    }\n}\n\nmodule.exports = doccy;\n\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{\"min-document\":30}],32:[function(require,module,exports){\n(function (global){\nvar win;\n\nif (typeof window !== \"undefined\") {\n    win = window;\n} else if (typeof global !== \"undefined\") {\n    win = global;\n} else if (typeof self !== \"undefined\"){\n    win = self;\n} else {\n    win = {};\n}\n\nmodule.exports = win;\n\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{}],33:[function(require,module,exports){\n'use strict';\n\nvar _lineStream = require('./line-stream');\n\nvar _lineStream2 = _interopRequireDefault(_lineStream);\n\nvar _parseStream = require('./parse-stream');\n\nvar _parseStream2 = _interopRequireDefault(_parseStream);\n\nvar _parser = require('./parser');\n\nvar _parser2 = _interopRequireDefault(_parser);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nmodule.exports = {\n  LineStream: _lineStream2['default'],\n  ParseStream: _parseStream2['default'],\n  Parser: _parser2['default']\n}; /**\n    * @file m3u8/index.js\n    *\n    * Utilities for parsing M3U8 files. If the entire manifest is available,\n    * `Parser` will create an object representation with enough detail for managing\n    * playback. `ParseStream` and `LineStream` are lower-level parsing primitives\n    * that do not assume the entirety of the manifest is ready and expose a\n    * ReadableStream-like interface.\n    */\n},{\"./line-stream\":34,\"./parse-stream\":35,\"./parser\":36}],34:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _stream = require('./stream');\n\nvar _stream2 = _interopRequireDefault(_stream);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file m3u8/line-stream.js\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */\n\n\n/**\n * A stream that buffers string input and generates a `data` event for each\n * line.\n *\n * @class LineStream\n * @extends Stream\n */\nvar LineStream = function (_Stream) {\n  _inherits(LineStream, _Stream);\n\n  function LineStream() {\n    _classCallCheck(this, LineStream);\n\n    var _this = _possibleConstructorReturn(this, (LineStream.__proto__ || Object.getPrototypeOf(LineStream)).call(this));\n\n    _this.buffer = '';\n    return _this;\n  }\n\n  /**\n   * Add new data to be parsed.\n   *\n   * @param {String} data the text to process\n   */\n\n\n  _createClass(LineStream, [{\n    key: 'push',\n    value: function push(data) {\n      var nextNewline = void 0;\n\n      this.buffer += data;\n      nextNewline = this.buffer.indexOf('\\n');\n\n      for (; nextNewline > -1; nextNewline = this.buffer.indexOf('\\n')) {\n        this.trigger('data', this.buffer.substring(0, nextNewline));\n        this.buffer = this.buffer.substring(nextNewline + 1);\n      }\n    }\n  }]);\n\n  return LineStream;\n}(_stream2['default']);\n\nexports['default'] = LineStream;\n},{\"./stream\":37}],35:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _stream = require('./stream');\n\nvar _stream2 = _interopRequireDefault(_stream);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file m3u8/parse-stream.js\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */\n\n\n/**\n * \"forgiving\" attribute list psuedo-grammar:\n * attributes -> keyvalue (',' keyvalue)*\n * keyvalue   -> key '=' value\n * key        -> [^=]*\n * value      -> '\"' [^\"]* '\"' | [^,]*\n */\nvar attributeSeparator = function attributeSeparator() {\n  var key = '[^=]*';\n  var value = '\"[^\"]*\"|[^,]*';\n  var keyvalue = '(?:' + key + ')=(?:' + value + ')';\n\n  return new RegExp('(?:^|,)(' + keyvalue + ')');\n};\n\n/**\n * Parse attributes from a line given the seperator\n *\n * @param {String} attributes the attibute line to parse\n */\nvar parseAttributes = function parseAttributes(attributes) {\n  // split the string using attributes as the separator\n  var attrs = attributes.split(attributeSeparator());\n  var result = {};\n  var i = attrs.length;\n  var attr = void 0;\n\n  while (i--) {\n    // filter out unmatched portions of the string\n    if (attrs[i] === '') {\n      continue;\n    }\n\n    // split the key and value\n    attr = /([^=]*)=(.*)/.exec(attrs[i]).slice(1);\n    // trim whitespace and remove optional quotes around the value\n    attr[0] = attr[0].replace(/^\\s+|\\s+$/g, '');\n    attr[1] = attr[1].replace(/^\\s+|\\s+$/g, '');\n    attr[1] = attr[1].replace(/^['\"](.*)['\"]$/g, '$1');\n    result[attr[0]] = attr[1];\n  }\n  return result;\n};\n\n/**\n * A line-level M3U8 parser event stream. It expects to receive input one\n * line at a time and performs a context-free parse of its contents. A stream\n * interpretation of a manifest can be useful if the manifest is expected to\n * be too large to fit comfortably into memory or the entirety of the input\n * is not immediately available. Otherwise, it's probably much easier to work\n * with a regular `Parser` object.\n *\n * Produces `data` events with an object that captures the parser's\n * interpretation of the input. That object has a property `tag` that is one\n * of `uri`, `comment`, or `tag`. URIs only have a single additional\n * property, `line`, which captures the entirety of the input without\n * interpretation. Comments similarly have a single additional property\n * `text` which is the input without the leading `#`.\n *\n * Tags always have a property `tagType` which is the lower-cased version of\n * the M3U8 directive without the `#EXT` or `#EXT-X-` prefix. For instance,\n * `#EXT-X-MEDIA-SEQUENCE` becomes `media-sequence` when parsed. Unrecognized\n * tags are given the tag type `unknown` and a single additional property\n * `data` with the remainder of the input.\n *\n * @class ParseStream\n * @extends Stream\n */\n\nvar ParseStream = function (_Stream) {\n  _inherits(ParseStream, _Stream);\n\n  function ParseStream() {\n    _classCallCheck(this, ParseStream);\n\n    return _possibleConstructorReturn(this, (ParseStream.__proto__ || Object.getPrototypeOf(ParseStream)).call(this));\n  }\n\n  /**\n   * Parses an additional line of input.\n   *\n   * @param {String} line a single line of an M3U8 file to parse\n   */\n\n\n  _createClass(ParseStream, [{\n    key: 'push',\n    value: function push(line) {\n      var match = void 0;\n      var event = void 0;\n\n      // strip whitespace\n      line = line.replace(/^[\\u0000\\s]+|[\\u0000\\s]+$/g, '');\n      if (line.length === 0) {\n        // ignore empty lines\n        return;\n      }\n\n      // URIs\n      if (line[0] !== '#') {\n        this.trigger('data', {\n          type: 'uri',\n          uri: line\n        });\n        return;\n      }\n\n      // Comments\n      if (line.indexOf('#EXT') !== 0) {\n        this.trigger('data', {\n          type: 'comment',\n          text: line.slice(1)\n        });\n        return;\n      }\n\n      // strip off any carriage returns here so the regex matching\n      // doesn't have to account for them.\n      line = line.replace('\\r', '');\n\n      // Tags\n      match = /^#EXTM3U/.exec(line);\n      if (match) {\n        this.trigger('data', {\n          type: 'tag',\n          tagType: 'm3u'\n        });\n        return;\n      }\n      match = /^#EXTINF:?([0-9\\.]*)?,?(.*)?$/.exec(line);\n      if (match) {\n        event = {\n          type: 'tag',\n          tagType: 'inf'\n        };\n        if (match[1]) {\n          event.duration = parseFloat(match[1]);\n        }\n        if (match[2]) {\n          event.title = match[2];\n        }\n        this.trigger('data', event);\n        return;\n      }\n      match = /^#EXT-X-TARGETDURATION:?([0-9.]*)?/.exec(line);\n      if (match) {\n        event = {\n          type: 'tag',\n          tagType: 'targetduration'\n        };\n        if (match[1]) {\n          event.duration = parseInt(match[1], 10);\n        }\n        this.trigger('data', event);\n        return;\n      }\n      match = /^#ZEN-TOTAL-DURATION:?([0-9.]*)?/.exec(line);\n      if (match) {\n        event = {\n          type: 'tag',\n          tagType: 'totalduration'\n        };\n        if (match[1]) {\n          event.duration = parseInt(match[1], 10);\n        }\n        this.trigger('data', event);\n        return;\n      }\n      match = /^#EXT-X-VERSION:?([0-9.]*)?/.exec(line);\n      if (match) {\n        event = {\n          type: 'tag',\n          tagType: 'version'\n        };\n        if (match[1]) {\n          event.version = parseInt(match[1], 10);\n        }\n        this.trigger('data', event);\n        return;\n      }\n      match = /^#EXT-X-MEDIA-SEQUENCE:?(\\-?[0-9.]*)?/.exec(line);\n      if (match) {\n        event = {\n          type: 'tag',\n          tagType: 'media-sequence'\n        };\n        if (match[1]) {\n          event.number = parseInt(match[1], 10);\n        }\n        this.trigger('data', event);\n        return;\n      }\n      match = /^#EXT-X-DISCONTINUITY-SEQUENCE:?(\\-?[0-9.]*)?/.exec(line);\n      if (match) {\n        event = {\n          type: 'tag',\n          tagType: 'discontinuity-sequence'\n        };\n        if (match[1]) {\n          event.number = parseInt(match[1], 10);\n        }\n        this.trigger('data', event);\n        return;\n      }\n      match = /^#EXT-X-PLAYLIST-TYPE:?(.*)?$/.exec(line);\n      if (match) {\n        event = {\n          type: 'tag',\n          tagType: 'playlist-type'\n        };\n        if (match[1]) {\n          event.playlistType = match[1];\n        }\n        this.trigger('data', event);\n        return;\n      }\n      match = /^#EXT-X-BYTERANGE:?([0-9.]*)?@?([0-9.]*)?/.exec(line);\n      if (match) {\n        event = {\n          type: 'tag',\n          tagType: 'byterange'\n        };\n        if (match[1]) {\n          event.length = parseInt(match[1], 10);\n        }\n        if (match[2]) {\n          event.offset = parseInt(match[2], 10);\n        }\n        this.trigger('data', event);\n        return;\n      }\n      match = /^#EXT-X-ALLOW-CACHE:?(YES|NO)?/.exec(line);\n      if (match) {\n        event = {\n          type: 'tag',\n          tagType: 'allow-cache'\n        };\n        if (match[1]) {\n          event.allowed = !/NO/.test(match[1]);\n        }\n        this.trigger('data', event);\n        return;\n      }\n      match = /^#EXT-X-MAP:?(.*)$/.exec(line);\n      if (match) {\n        event = {\n          type: 'tag',\n          tagType: 'map'\n        };\n\n        if (match[1]) {\n          var attributes = parseAttributes(match[1]);\n\n          if (attributes.URI) {\n            event.uri = attributes.URI;\n          }\n          if (attributes.BYTERANGE) {\n            var _attributes$BYTERANGE = attributes.BYTERANGE.split('@'),\n                _attributes$BYTERANGE2 = _slicedToArray(_attributes$BYTERANGE, 2),\n                length = _attributes$BYTERANGE2[0],\n                offset = _attributes$BYTERANGE2[1];\n\n            event.byterange = {};\n            if (length) {\n              event.byterange.length = parseInt(length, 10);\n            }\n            if (offset) {\n              event.byterange.offset = parseInt(offset, 10);\n            }\n          }\n        }\n\n        this.trigger('data', event);\n        return;\n      }\n      match = /^#EXT-X-STREAM-INF:?(.*)$/.exec(line);\n      if (match) {\n        event = {\n          type: 'tag',\n          tagType: 'stream-inf'\n        };\n        if (match[1]) {\n          event.attributes = parseAttributes(match[1]);\n\n          if (event.attributes.RESOLUTION) {\n            var split = event.attributes.RESOLUTION.split('x');\n            var resolution = {};\n\n            if (split[0]) {\n              resolution.width = parseInt(split[0], 10);\n            }\n            if (split[1]) {\n              resolution.height = parseInt(split[1], 10);\n            }\n            event.attributes.RESOLUTION = resolution;\n          }\n          if (event.attributes.BANDWIDTH) {\n            event.attributes.BANDWIDTH = parseInt(event.attributes.BANDWIDTH, 10);\n          }\n          if (event.attributes['PROGRAM-ID']) {\n            event.attributes['PROGRAM-ID'] = parseInt(event.attributes['PROGRAM-ID'], 10);\n          }\n        }\n        this.trigger('data', event);\n        return;\n      }\n      match = /^#EXT-X-MEDIA:?(.*)$/.exec(line);\n      if (match) {\n        event = {\n          type: 'tag',\n          tagType: 'media'\n        };\n        if (match[1]) {\n          event.attributes = parseAttributes(match[1]);\n        }\n        this.trigger('data', event);\n        return;\n      }\n      match = /^#EXT-X-ENDLIST/.exec(line);\n      if (match) {\n        this.trigger('data', {\n          type: 'tag',\n          tagType: 'endlist'\n        });\n        return;\n      }\n      match = /^#EXT-X-DISCONTINUITY/.exec(line);\n      if (match) {\n        this.trigger('data', {\n          type: 'tag',\n          tagType: 'discontinuity'\n        });\n        return;\n      }\n      match = /^#EXT-X-PROGRAM-DATE-TIME:?(.*)$/.exec(line);\n      if (match) {\n        event = {\n          type: 'tag',\n          tagType: 'program-date-time'\n        };\n        if (match[1]) {\n          event.dateTimeString = match[1];\n          event.dateTimeObject = new Date(match[1]);\n        }\n        this.trigger('data', event);\n        return;\n      }\n      match = /^#EXT-X-KEY:?(.*)$/.exec(line);\n      if (match) {\n        event = {\n          type: 'tag',\n          tagType: 'key'\n        };\n        if (match[1]) {\n          event.attributes = parseAttributes(match[1]);\n          // parse the IV string into a Uint32Array\n          if (event.attributes.IV) {\n            if (event.attributes.IV.substring(0, 2).toLowerCase() === '0x') {\n              event.attributes.IV = event.attributes.IV.substring(2);\n            }\n\n            event.attributes.IV = event.attributes.IV.match(/.{8}/g);\n            event.attributes.IV[0] = parseInt(event.attributes.IV[0], 16);\n            event.attributes.IV[1] = parseInt(event.attributes.IV[1], 16);\n            event.attributes.IV[2] = parseInt(event.attributes.IV[2], 16);\n            event.attributes.IV[3] = parseInt(event.attributes.IV[3], 16);\n            event.attributes.IV = new Uint32Array(event.attributes.IV);\n          }\n        }\n        this.trigger('data', event);\n        return;\n      }\n      match = /^#EXT-X-CUE-OUT-CONT:?(.*)?$/.exec(line);\n      if (match) {\n        event = {\n          type: 'tag',\n          tagType: 'cue-out-cont'\n        };\n        if (match[1]) {\n          event.data = match[1];\n        } else {\n          event.data = '';\n        }\n        this.trigger('data', event);\n        return;\n      }\n      match = /^#EXT-X-CUE-OUT:?(.*)?$/.exec(line);\n      if (match) {\n        event = {\n          type: 'tag',\n          tagType: 'cue-out'\n        };\n        if (match[1]) {\n          event.data = match[1];\n        } else {\n          event.data = '';\n        }\n        this.trigger('data', event);\n        return;\n      }\n      match = /^#EXT-X-CUE-IN:?(.*)?$/.exec(line);\n      if (match) {\n        event = {\n          type: 'tag',\n          tagType: 'cue-in'\n        };\n        if (match[1]) {\n          event.data = match[1];\n        } else {\n          event.data = '';\n        }\n        this.trigger('data', event);\n        return;\n      }\n\n      // unknown tag type\n      this.trigger('data', {\n        type: 'tag',\n        data: line.slice(4)\n      });\n    }\n  }]);\n\n  return ParseStream;\n}(_stream2['default']);\n\nexports['default'] = ParseStream;\n},{\"./stream\":37}],36:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _stream = require('./stream');\n\nvar _stream2 = _interopRequireDefault(_stream);\n\nvar _lineStream = require('./line-stream');\n\nvar _lineStream2 = _interopRequireDefault(_lineStream);\n\nvar _parseStream = require('./parse-stream');\n\nvar _parseStream2 = _interopRequireDefault(_parseStream);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file m3u8/parser.js\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */\n\n\n/**\n * A parser for M3U8 files. The current interpretation of the input is\n * exposed as a property `manifest` on parser objects. It's just two lines to\n * create and parse a manifest once you have the contents available as a string:\n *\n * ```js\n * var parser = new m3u8.Parser();\n * parser.push(xhr.responseText);\n * ```\n *\n * New input can later be applied to update the manifest object by calling\n * `push` again.\n *\n * The parser attempts to create a usable manifest object even if the\n * underlying input is somewhat nonsensical. It emits `info` and `warning`\n * events during the parse if it encounters input that seems invalid or\n * requires some property of the manifest object to be defaulted.\n *\n * @class Parser\n * @extends Stream\n */\nvar Parser = function (_Stream) {\n  _inherits(Parser, _Stream);\n\n  function Parser() {\n    _classCallCheck(this, Parser);\n\n    var _this = _possibleConstructorReturn(this, (Parser.__proto__ || Object.getPrototypeOf(Parser)).call(this));\n\n    _this.lineStream = new _lineStream2['default']();\n    _this.parseStream = new _parseStream2['default']();\n    _this.lineStream.pipe(_this.parseStream);\n    /* eslint-disable consistent-this */\n    var self = _this;\n    /* eslint-enable consistent-this */\n    var uris = [];\n    var currentUri = {};\n    // if specified, the active EXT-X-MAP definition\n    var currentMap = void 0;\n    // if specified, the active decryption key\n    var _key = void 0;\n    var noop = function noop() {};\n    var defaultMediaGroups = {\n      'AUDIO': {},\n      'VIDEO': {},\n      'CLOSED-CAPTIONS': {},\n      'SUBTITLES': {}\n    };\n    // group segments into numbered timelines delineated by discontinuities\n    var currentTimeline = 0;\n\n    // the manifest is empty until the parse stream begins delivering data\n    _this.manifest = {\n      allowCache: true,\n      discontinuityStarts: [],\n      segments: []\n    };\n\n    // update the manifest with the m3u8 entry from the parse stream\n    _this.parseStream.on('data', function (entry) {\n      var mediaGroup = void 0;\n      var rendition = void 0;\n\n      ({\n        tag: function tag() {\n          // switch based on the tag type\n          (({\n            'allow-cache': function allowCache() {\n              this.manifest.allowCache = entry.allowed;\n              if (!('allowed' in entry)) {\n                this.trigger('info', {\n                  message: 'defaulting allowCache to YES'\n                });\n                this.manifest.allowCache = true;\n              }\n            },\n            byterange: function byterange() {\n              var byterange = {};\n\n              if ('length' in entry) {\n                currentUri.byterange = byterange;\n                byterange.length = entry.length;\n\n                if (!('offset' in entry)) {\n                  this.trigger('info', {\n                    message: 'defaulting offset to zero'\n                  });\n                  entry.offset = 0;\n                }\n              }\n              if ('offset' in entry) {\n                currentUri.byterange = byterange;\n                byterange.offset = entry.offset;\n              }\n            },\n            endlist: function endlist() {\n              this.manifest.endList = true;\n            },\n            inf: function inf() {\n              if (!('mediaSequence' in this.manifest)) {\n                this.manifest.mediaSequence = 0;\n                this.trigger('info', {\n                  message: 'defaulting media sequence to zero'\n                });\n              }\n              if (!('discontinuitySequence' in this.manifest)) {\n                this.manifest.discontinuitySequence = 0;\n                this.trigger('info', {\n                  message: 'defaulting discontinuity sequence to zero'\n                });\n              }\n              if (entry.duration > 0) {\n                currentUri.duration = entry.duration;\n              }\n\n              if (entry.duration === 0) {\n                currentUri.duration = 0.01;\n                this.trigger('info', {\n                  message: 'updating zero segment duration to a small value'\n                });\n              }\n\n              this.manifest.segments = uris;\n            },\n            key: function key() {\n              if (!entry.attributes) {\n                this.trigger('warn', {\n                  message: 'ignoring key declaration without attribute list'\n                });\n                return;\n              }\n              // clear the active encryption key\n              if (entry.attributes.METHOD === 'NONE') {\n                _key = null;\n                return;\n              }\n              if (!entry.attributes.URI) {\n                this.trigger('warn', {\n                  message: 'ignoring key declaration without URI'\n                });\n                return;\n              }\n              if (!entry.attributes.METHOD) {\n                this.trigger('warn', {\n                  message: 'defaulting key method to AES-128'\n                });\n              }\n\n              // setup an encryption key for upcoming segments\n              _key = {\n                method: entry.attributes.METHOD || 'AES-128',\n                uri: entry.attributes.URI\n              };\n\n              if (typeof entry.attributes.IV !== 'undefined') {\n                _key.iv = entry.attributes.IV;\n              }\n            },\n            'media-sequence': function mediaSequence() {\n              if (!isFinite(entry.number)) {\n                this.trigger('warn', {\n                  message: 'ignoring invalid media sequence: ' + entry.number\n                });\n                return;\n              }\n              this.manifest.mediaSequence = entry.number;\n            },\n            'discontinuity-sequence': function discontinuitySequence() {\n              if (!isFinite(entry.number)) {\n                this.trigger('warn', {\n                  message: 'ignoring invalid discontinuity sequence: ' + entry.number\n                });\n                return;\n              }\n              this.manifest.discontinuitySequence = entry.number;\n              currentTimeline = entry.number;\n            },\n            'playlist-type': function playlistType() {\n              if (!/VOD|EVENT/.test(entry.playlistType)) {\n                this.trigger('warn', {\n                  message: 'ignoring unknown playlist type: ' + entry.playlist\n                });\n                return;\n              }\n              this.manifest.playlistType = entry.playlistType;\n            },\n            map: function map() {\n              currentMap = {};\n              if (entry.uri) {\n                currentMap.uri = entry.uri;\n              }\n              if (entry.byterange) {\n                currentMap.byterange = entry.byterange;\n              }\n            },\n            'stream-inf': function streamInf() {\n              this.manifest.playlists = uris;\n              this.manifest.mediaGroups = this.manifest.mediaGroups || defaultMediaGroups;\n\n              if (!entry.attributes) {\n                this.trigger('warn', {\n                  message: 'ignoring empty stream-inf attributes'\n                });\n                return;\n              }\n\n              if (!currentUri.attributes) {\n                currentUri.attributes = {};\n              }\n              _extends(currentUri.attributes, entry.attributes);\n            },\n            media: function media() {\n              this.manifest.mediaGroups = this.manifest.mediaGroups || defaultMediaGroups;\n\n              if (!(entry.attributes && entry.attributes.TYPE && entry.attributes['GROUP-ID'] && entry.attributes.NAME)) {\n                this.trigger('warn', {\n                  message: 'ignoring incomplete or missing media group'\n                });\n                return;\n              }\n\n              // find the media group, creating defaults as necessary\n              var mediaGroupType = this.manifest.mediaGroups[entry.attributes.TYPE];\n\n              mediaGroupType[entry.attributes['GROUP-ID']] = mediaGroupType[entry.attributes['GROUP-ID']] || {};\n              mediaGroup = mediaGroupType[entry.attributes['GROUP-ID']];\n\n              // collect the rendition metadata\n              rendition = {\n                'default': /yes/i.test(entry.attributes.DEFAULT)\n              };\n              if (rendition['default']) {\n                rendition.autoselect = true;\n              } else {\n                rendition.autoselect = /yes/i.test(entry.attributes.AUTOSELECT);\n              }\n              if (entry.attributes.LANGUAGE) {\n                rendition.language = entry.attributes.LANGUAGE;\n              }\n              if (entry.attributes.URI) {\n                rendition.uri = entry.attributes.URI;\n              }\n              if (entry.attributes['INSTREAM-ID']) {\n                rendition.instreamId = entry.attributes['INSTREAM-ID'];\n              }\n              if (entry.attributes.CHARACTERISTICS) {\n                rendition.characteristics = entry.attributes.CHARACTERISTICS;\n              }\n              if (entry.attributes.FORCED) {\n                rendition.forced = /yes/i.test(entry.attributes.FORCED);\n              }\n\n              // insert the new rendition\n              mediaGroup[entry.attributes.NAME] = rendition;\n            },\n            discontinuity: function discontinuity() {\n              currentTimeline += 1;\n              currentUri.discontinuity = true;\n              this.manifest.discontinuityStarts.push(uris.length);\n            },\n            'program-date-time': function programDateTime() {\n              this.manifest.dateTimeString = entry.dateTimeString;\n              this.manifest.dateTimeObject = entry.dateTimeObject;\n            },\n            targetduration: function targetduration() {\n              if (!isFinite(entry.duration) || entry.duration < 0) {\n                this.trigger('warn', {\n                  message: 'ignoring invalid target duration: ' + entry.duration\n                });\n                return;\n              }\n              this.manifest.targetDuration = entry.duration;\n            },\n            totalduration: function totalduration() {\n              if (!isFinite(entry.duration) || entry.duration < 0) {\n                this.trigger('warn', {\n                  message: 'ignoring invalid total duration: ' + entry.duration\n                });\n                return;\n              }\n              this.manifest.totalDuration = entry.duration;\n            },\n            'cue-out': function cueOut() {\n              currentUri.cueOut = entry.data;\n            },\n            'cue-out-cont': function cueOutCont() {\n              currentUri.cueOutCont = entry.data;\n            },\n            'cue-in': function cueIn() {\n              currentUri.cueIn = entry.data;\n            }\n          })[entry.tagType] || noop).call(self);\n        },\n        uri: function uri() {\n          currentUri.uri = entry.uri;\n          uris.push(currentUri);\n\n          // if no explicit duration was declared, use the target duration\n          if (this.manifest.targetDuration && !('duration' in currentUri)) {\n            this.trigger('warn', {\n              message: 'defaulting segment duration to the target duration'\n            });\n            currentUri.duration = this.manifest.targetDuration;\n          }\n          // annotate with encryption information, if necessary\n          if (_key) {\n            currentUri.key = _key;\n          }\n          currentUri.timeline = currentTimeline;\n          // annotate with initialization segment information, if necessary\n          if (currentMap) {\n            currentUri.map = currentMap;\n          }\n\n          // prepare for the next URI\n          currentUri = {};\n        },\n        comment: function comment() {\n          // comments are not important for playback\n        }\n      })[entry.type].call(self);\n    });\n\n    return _this;\n  }\n\n  /**\n   * Parse the input string and update the manifest object.\n   *\n   * @param {String} chunk a potentially incomplete portion of the manifest\n   */\n\n\n  _createClass(Parser, [{\n    key: 'push',\n    value: function push(chunk) {\n      this.lineStream.push(chunk);\n    }\n\n    /**\n     * Flush any remaining input. This can be handy if the last line of an M3U8\n     * manifest did not contain a trailing newline but the file has been\n     * completely received.\n     */\n\n  }, {\n    key: 'end',\n    value: function end() {\n      // flush any buffered input\n      this.lineStream.push('\\n');\n    }\n  }]);\n\n  return Parser;\n}(_stream2['default']);\n\nexports['default'] = Parser;\n},{\"./line-stream\":34,\"./parse-stream\":35,\"./stream\":37}],37:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/**\n * @file stream.js\n */\n/**\n * A lightweight readable stream implemention that handles event dispatching.\n *\n * @class Stream\n */\nvar Stream = function () {\n  function Stream() {\n    _classCallCheck(this, Stream);\n\n    this.listeners = {};\n  }\n\n  /**\n   * Add a listener for a specified event type.\n   *\n   * @param {String} type the event name\n   * @param {Function} listener the callback to be invoked when an event of\n   * the specified type occurs\n   */\n\n\n  _createClass(Stream, [{\n    key: 'on',\n    value: function on(type, listener) {\n      if (!this.listeners[type]) {\n        this.listeners[type] = [];\n      }\n      this.listeners[type].push(listener);\n    }\n\n    /**\n     * Remove a listener for a specified event type.\n     *\n     * @param {String} type the event name\n     * @param {Function} listener  a function previously registered for this\n     * type of event through `on`\n     * @return {Boolean} if we could turn it off or not\n     */\n\n  }, {\n    key: 'off',\n    value: function off(type, listener) {\n      if (!this.listeners[type]) {\n        return false;\n      }\n\n      var index = this.listeners[type].indexOf(listener);\n\n      this.listeners[type].splice(index, 1);\n      return index > -1;\n    }\n\n    /**\n     * Trigger an event of the specified type on this stream. Any additional\n     * arguments to this function are passed as parameters to event listeners.\n     *\n     * @param {String} type the event name\n     */\n\n  }, {\n    key: 'trigger',\n    value: function trigger(type) {\n      var callbacks = this.listeners[type];\n      var i = void 0;\n      var length = void 0;\n      var args = void 0;\n\n      if (!callbacks) {\n        return;\n      }\n      // Slicing the arguments on every invocation of this method\n      // can add a significant amount of overhead. Avoid the\n      // intermediate object creation for the common case of a\n      // single callback argument\n      if (arguments.length === 2) {\n        length = callbacks.length;\n        for (i = 0; i < length; ++i) {\n          callbacks[i].call(this, arguments[1]);\n        }\n      } else {\n        args = Array.prototype.slice.call(arguments, 1);\n        length = callbacks.length;\n        for (i = 0; i < length; ++i) {\n          callbacks[i].apply(this, args);\n        }\n      }\n    }\n\n    /**\n     * Destroys the stream and cleans up.\n     */\n\n  }, {\n    key: 'dispose',\n    value: function dispose() {\n      this.listeners = {};\n    }\n    /**\n     * Forwards all `data` events on this stream to the destination stream. The\n     * destination stream should provide a method `push` to receive the data\n     * events as they arrive.\n     *\n     * @param {Stream} destination the stream that will receive all `data` events\n     * @see http://nodejs.org/api/stream.html#stream_readable_pipe_destination_options\n     */\n\n  }, {\n    key: 'pipe',\n    value: function pipe(destination) {\n      this.on('data', function (data) {\n        destination.push(data);\n      });\n    }\n  }]);\n\n  return Stream;\n}();\n\nexports['default'] = Stream;\n},{}],38:[function(require,module,exports){\n/**\n * mux.js\n *\n * Copyright (c) 2016 Brightcove\n * All rights reserved.\n *\n * A stream-based aac to mp4 converter. This utility can be used to\n * deliver mp4s to a SourceBuffer on platforms that support native\n * Media Source Extensions.\n */\n'use strict';\nvar Stream = require('../utils/stream.js');\n\n// Constants\nvar AacStream;\n\n/**\n * Splits an incoming stream of binary data into ADTS and ID3 Frames.\n */\n\nAacStream = function() {\n  var\n    everything = new Uint8Array(),\n    timeStamp = 0;\n\n  AacStream.prototype.init.call(this);\n\n  this.setTimestamp = function(timestamp) {\n    timeStamp = timestamp;\n  };\n\n  this.parseId3TagSize = function(header, byteIndex) {\n    var\n      returnSize = (header[byteIndex + 6] << 21) |\n                   (header[byteIndex + 7] << 14) |\n                   (header[byteIndex + 8] << 7) |\n                   (header[byteIndex + 9]),\n      flags = header[byteIndex + 5],\n      footerPresent = (flags & 16) >> 4;\n\n    if (footerPresent) {\n      return returnSize + 20;\n    }\n    return returnSize + 10;\n  };\n\n  this.parseAdtsSize = function(header, byteIndex) {\n    var\n      lowThree = (header[byteIndex + 5] & 0xE0) >> 5,\n      middle = header[byteIndex + 4] << 3,\n      highTwo = header[byteIndex + 3] & 0x3 << 11;\n\n    return (highTwo | middle) | lowThree;\n  };\n\n  this.push = function(bytes) {\n    var\n      frameSize = 0,\n      byteIndex = 0,\n      bytesLeft,\n      chunk,\n      packet,\n      tempLength;\n\n    // If there are bytes remaining from the last segment, prepend them to the\n    // bytes that were pushed in\n    if (everything.length) {\n      tempLength = everything.length;\n      everything = new Uint8Array(bytes.byteLength + tempLength);\n      everything.set(everything.subarray(0, tempLength));\n      everything.set(bytes, tempLength);\n    } else {\n      everything = bytes;\n    }\n\n    while (everything.length - byteIndex >= 3) {\n      if ((everything[byteIndex] === 'I'.charCodeAt(0)) &&\n          (everything[byteIndex + 1] === 'D'.charCodeAt(0)) &&\n          (everything[byteIndex + 2] === '3'.charCodeAt(0))) {\n\n        // Exit early because we don't have enough to parse\n        // the ID3 tag header\n        if (everything.length - byteIndex < 10) {\n          break;\n        }\n\n        // check framesize\n        frameSize = this.parseId3TagSize(everything, byteIndex);\n\n        // Exit early if we don't have enough in the buffer\n        // to emit a full packet\n        if (frameSize > everything.length) {\n          break;\n        }\n        chunk = {\n          type: 'timed-metadata',\n          data: everything.subarray(byteIndex, byteIndex + frameSize)\n        };\n        this.trigger('data', chunk);\n        byteIndex += frameSize;\n        continue;\n      } else if ((everything[byteIndex] & 0xff === 0xff) &&\n                 ((everything[byteIndex + 1] & 0xf0) === 0xf0)) {\n\n        // Exit early because we don't have enough to parse\n        // the ADTS frame header\n        if (everything.length - byteIndex < 7) {\n          break;\n        }\n\n        frameSize = this.parseAdtsSize(everything, byteIndex);\n\n        // Exit early if we don't have enough in the buffer\n        // to emit a full packet\n        if (frameSize > everything.length) {\n          break;\n        }\n\n        packet = {\n          type: 'audio',\n          data: everything.subarray(byteIndex, byteIndex + frameSize),\n          pts: timeStamp,\n          dts: timeStamp\n        };\n        this.trigger('data', packet);\n        byteIndex += frameSize;\n        continue;\n      }\n      byteIndex++;\n    }\n    bytesLeft = everything.length - byteIndex;\n\n    if (bytesLeft > 0) {\n      everything = everything.subarray(byteIndex);\n    } else {\n      everything = new Uint8Array();\n    }\n  };\n};\n\nAacStream.prototype = new Stream();\n\nmodule.exports = AacStream;\n\n},{\"../utils/stream.js\":62}],39:[function(require,module,exports){\n/**\n * mux.js\n *\n * Copyright (c) 2016 Brightcove\n * All rights reserved.\n *\n * Utilities to detect basic properties and metadata about Aac data.\n */\n'use strict';\n\nvar ADTS_SAMPLING_FREQUENCIES = [\n  96000,\n  88200,\n  64000,\n  48000,\n  44100,\n  32000,\n  24000,\n  22050,\n  16000,\n  12000,\n  11025,\n  8000,\n  7350\n];\n\nvar parseSyncSafeInteger = function(data) {\n  return (data[0] << 21) |\n          (data[1] << 14) |\n          (data[2] << 7) |\n          (data[3]);\n};\n\n// return a percent-encoded representation of the specified byte range\n// @see http://en.wikipedia.org/wiki/Percent-encoding\nvar percentEncode = function(bytes, start, end) {\n  var i, result = '';\n  for (i = start; i < end; i++) {\n    result += '%' + ('00' + bytes[i].toString(16)).slice(-2);\n  }\n  return result;\n};\n\n// return the string representation of the specified byte range,\n// interpreted as ISO-8859-1.\nvar parseIso88591 = function(bytes, start, end) {\n  return unescape(percentEncode(bytes, start, end)); // jshint ignore:line\n};\n\nvar parseId3TagSize = function(header, byteIndex) {\n  var\n    returnSize = (header[byteIndex + 6] << 21) |\n                 (header[byteIndex + 7] << 14) |\n                 (header[byteIndex + 8] << 7) |\n                 (header[byteIndex + 9]),\n    flags = header[byteIndex + 5],\n    footerPresent = (flags & 16) >> 4;\n\n  if (footerPresent) {\n    return returnSize + 20;\n  }\n  return returnSize + 10;\n};\n\nvar parseAdtsSize = function(header, byteIndex) {\n  var\n    lowThree = (header[byteIndex + 5] & 0xE0) >> 5,\n    middle = header[byteIndex + 4] << 3,\n    highTwo = header[byteIndex + 3] & 0x3 << 11;\n\n  return (highTwo | middle) | lowThree;\n};\n\nvar parseType = function(header, byteIndex) {\n  if ((header[byteIndex] === 'I'.charCodeAt(0)) &&\n      (header[byteIndex + 1] === 'D'.charCodeAt(0)) &&\n      (header[byteIndex + 2] === '3'.charCodeAt(0))) {\n    return 'timed-metadata';\n  } else if ((header[byteIndex] & 0xff === 0xff) &&\n             ((header[byteIndex + 1] & 0xf0) === 0xf0)) {\n    return 'audio';\n  }\n  return null;\n};\n\nvar parseSampleRate = function(packet) {\n  var i = 0;\n\n  while (i + 5 < packet.length) {\n    if (packet[i] !== 0xFF || (packet[i + 1] & 0xF6) !== 0xF0) {\n      // If a valid header was not found,  jump one forward and attempt to\n      // find a valid ADTS header starting at the next byte\n      i++;\n      continue;\n    }\n    return ADTS_SAMPLING_FREQUENCIES[(packet[i + 2] & 0x3c) >>> 2];\n  }\n\n  return null;\n};\n\nvar parseAacTimestamp = function(packet) {\n  var frameStart, frameSize, frame, frameHeader;\n\n  // find the start of the first frame and the end of the tag\n  frameStart = 10;\n  if (packet[5] & 0x40) {\n    // advance the frame start past the extended header\n    frameStart += 4; // header size field\n    frameStart += parseSyncSafeInteger(packet.subarray(10, 14));\n  }\n\n  // parse one or more ID3 frames\n  // http://id3.org/id3v2.3.0#ID3v2_frame_overview\n  do {\n    // determine the number of bytes in this frame\n    frameSize = parseSyncSafeInteger(packet.subarray(frameStart + 4, frameStart + 8));\n    if (frameSize < 1) {\n      return null;\n    }\n    frameHeader = String.fromCharCode(packet[frameStart],\n                                      packet[frameStart + 1],\n                                      packet[frameStart + 2],\n                                      packet[frameStart + 3]);\n\n    if (frameHeader === 'PRIV') {\n      frame = packet.subarray(frameStart + 10, frameStart + frameSize + 10);\n\n      for (var i = 0; i < frame.byteLength; i++) {\n        if (frame[i] === 0) {\n          var owner = parseIso88591(frame, 0, i);\n          if (owner === 'com.apple.streaming.transportStreamTimestamp') {\n            var d = frame.subarray(i + 1);\n            var size = ((d[3] & 0x01)  << 30) |\n                       (d[4]  << 22) |\n                       (d[5] << 14) |\n                       (d[6] << 6) |\n                       (d[7] >>> 2);\n            size *= 4;\n            size += d[7] & 0x03;\n\n            return size;\n          }\n          break;\n        }\n      }\n    }\n\n    frameStart += 10; // advance past the frame header\n    frameStart += frameSize; // advance past the frame body\n  } while (frameStart < packet.byteLength);\n  return null;\n};\n\nmodule.exports = {\n  parseId3TagSize: parseId3TagSize,\n  parseAdtsSize: parseAdtsSize,\n  parseType: parseType,\n  parseSampleRate: parseSampleRate,\n  parseAacTimestamp: parseAacTimestamp\n};\n\n},{}],40:[function(require,module,exports){\n'use strict';\n\nvar Stream = require('../utils/stream.js');\n\nvar AdtsStream;\n\nvar\n  ADTS_SAMPLING_FREQUENCIES = [\n    96000,\n    88200,\n    64000,\n    48000,\n    44100,\n    32000,\n    24000,\n    22050,\n    16000,\n    12000,\n    11025,\n    8000,\n    7350\n  ];\n\n/*\n * Accepts a ElementaryStream and emits data events with parsed\n * AAC Audio Frames of the individual packets. Input audio in ADTS\n * format is unpacked and re-emitted as AAC frames.\n *\n * @see http://wiki.multimedia.cx/index.php?title=ADTS\n * @see http://wiki.multimedia.cx/?title=Understanding_AAC\n */\nAdtsStream = function() {\n  var buffer;\n\n  AdtsStream.prototype.init.call(this);\n\n  this.push = function(packet) {\n    var\n      i = 0,\n      frameNum = 0,\n      frameLength,\n      protectionSkipBytes,\n      frameEnd,\n      oldBuffer,\n      sampleCount,\n      adtsFrameDuration;\n\n    if (packet.type !== 'audio') {\n      // ignore non-audio data\n      return;\n    }\n\n    // Prepend any data in the buffer to the input data so that we can parse\n    // aac frames the cross a PES packet boundary\n    if (buffer) {\n      oldBuffer = buffer;\n      buffer = new Uint8Array(oldBuffer.byteLength + packet.data.byteLength);\n      buffer.set(oldBuffer);\n      buffer.set(packet.data, oldBuffer.byteLength);\n    } else {\n      buffer = packet.data;\n    }\n\n    // unpack any ADTS frames which have been fully received\n    // for details on the ADTS header, see http://wiki.multimedia.cx/index.php?title=ADTS\n    while (i + 5 < buffer.length) {\n\n      // Loook for the start of an ADTS header..\n      if (buffer[i] !== 0xFF || (buffer[i + 1] & 0xF6) !== 0xF0) {\n        // If a valid header was not found,  jump one forward and attempt to\n        // find a valid ADTS header starting at the next byte\n        i++;\n        continue;\n      }\n\n      // The protection skip bit tells us if we have 2 bytes of CRC data at the\n      // end of the ADTS header\n      protectionSkipBytes = (~buffer[i + 1] & 0x01) * 2;\n\n      // Frame length is a 13 bit integer starting 16 bits from the\n      // end of the sync sequence\n      frameLength = ((buffer[i + 3] & 0x03) << 11) |\n        (buffer[i + 4] << 3) |\n        ((buffer[i + 5] & 0xe0) >> 5);\n\n      sampleCount = ((buffer[i + 6] & 0x03) + 1) * 1024;\n      adtsFrameDuration = (sampleCount * 90000) /\n        ADTS_SAMPLING_FREQUENCIES[(buffer[i + 2] & 0x3c) >>> 2];\n\n      frameEnd = i + frameLength;\n\n      // If we don't have enough data to actually finish this ADTS frame, return\n      // and wait for more data\n      if (buffer.byteLength < frameEnd) {\n        return;\n      }\n\n      // Otherwise, deliver the complete AAC frame\n      this.trigger('data', {\n        pts: packet.pts + (frameNum * adtsFrameDuration),\n        dts: packet.dts + (frameNum * adtsFrameDuration),\n        sampleCount: sampleCount,\n        audioobjecttype: ((buffer[i + 2] >>> 6) & 0x03) + 1,\n        channelcount: ((buffer[i + 2] & 1) << 2) |\n          ((buffer[i + 3] & 0xc0) >>> 6),\n        samplerate: ADTS_SAMPLING_FREQUENCIES[(buffer[i + 2] & 0x3c) >>> 2],\n        samplingfrequencyindex: (buffer[i + 2] & 0x3c) >>> 2,\n        // assume ISO/IEC 14496-12 AudioSampleEntry default of 16\n        samplesize: 16,\n        data: buffer.subarray(i + 7 + protectionSkipBytes, frameEnd)\n      });\n\n      // If the buffer is empty, clear it and return\n      if (buffer.byteLength === frameEnd) {\n        buffer = undefined;\n        return;\n      }\n\n      frameNum++;\n\n      // Remove the finished frame from the buffer and start the process again\n      buffer = buffer.subarray(frameEnd);\n    }\n  };\n  this.flush = function() {\n    this.trigger('done');\n  };\n};\n\nAdtsStream.prototype = new Stream();\n\nmodule.exports = AdtsStream;\n\n},{\"../utils/stream.js\":62}],41:[function(require,module,exports){\n'use strict';\n\nvar Stream = require('../utils/stream.js');\nvar ExpGolomb = require('../utils/exp-golomb.js');\n\nvar H264Stream, NalByteStream;\nvar PROFILES_WITH_OPTIONAL_SPS_DATA;\n\n/**\n * Accepts a NAL unit byte stream and unpacks the embedded NAL units.\n */\nNalByteStream = function() {\n  var\n    syncPoint = 0,\n    i,\n    buffer;\n  NalByteStream.prototype.init.call(this);\n\n  this.push = function(data) {\n    var swapBuffer;\n\n    if (!buffer) {\n      buffer = data.data;\n    } else {\n      swapBuffer = new Uint8Array(buffer.byteLength + data.data.byteLength);\n      swapBuffer.set(buffer);\n      swapBuffer.set(data.data, buffer.byteLength);\n      buffer = swapBuffer;\n    }\n\n    // Rec. ITU-T H.264, Annex B\n    // scan for NAL unit boundaries\n\n    // a match looks like this:\n    // 0 0 1 .. NAL .. 0 0 1\n    // ^ sync point        ^ i\n    // or this:\n    // 0 0 1 .. NAL .. 0 0 0\n    // ^ sync point        ^ i\n\n    // advance the sync point to a NAL start, if necessary\n    for (; syncPoint < buffer.byteLength - 3; syncPoint++) {\n      if (buffer[syncPoint + 2] === 1) {\n        // the sync point is properly aligned\n        i = syncPoint + 5;\n        break;\n      }\n    }\n\n    while (i < buffer.byteLength) {\n      // look at the current byte to determine if we've hit the end of\n      // a NAL unit boundary\n      switch (buffer[i]) {\n      case 0:\n        // skip past non-sync sequences\n        if (buffer[i - 1] !== 0) {\n          i += 2;\n          break;\n        } else if (buffer[i - 2] !== 0) {\n          i++;\n          break;\n        }\n\n        // deliver the NAL unit if it isn't empty\n        if (syncPoint + 3 !== i - 2) {\n          this.trigger('data', buffer.subarray(syncPoint + 3, i - 2));\n        }\n\n        // drop trailing zeroes\n        do {\n          i++;\n        } while (buffer[i] !== 1 && i < buffer.length);\n        syncPoint = i - 2;\n        i += 3;\n        break;\n      case 1:\n        // skip past non-sync sequences\n        if (buffer[i - 1] !== 0 ||\n            buffer[i - 2] !== 0) {\n          i += 3;\n          break;\n        }\n\n        // deliver the NAL unit\n        this.trigger('data', buffer.subarray(syncPoint + 3, i - 2));\n        syncPoint = i - 2;\n        i += 3;\n        break;\n      default:\n        // the current byte isn't a one or zero, so it cannot be part\n        // of a sync sequence\n        i += 3;\n        break;\n      }\n    }\n    // filter out the NAL units that were delivered\n    buffer = buffer.subarray(syncPoint);\n    i -= syncPoint;\n    syncPoint = 0;\n  };\n\n  this.flush = function() {\n    // deliver the last buffered NAL unit\n    if (buffer && buffer.byteLength > 3) {\n      this.trigger('data', buffer.subarray(syncPoint + 3));\n    }\n    // reset the stream state\n    buffer = null;\n    syncPoint = 0;\n    this.trigger('done');\n  };\n};\nNalByteStream.prototype = new Stream();\n\n// values of profile_idc that indicate additional fields are included in the SPS\n// see Recommendation ITU-T H.264 (4/2013),\n// 7.3.2.1.1 Sequence parameter set data syntax\nPROFILES_WITH_OPTIONAL_SPS_DATA = {\n  100: true,\n  110: true,\n  122: true,\n  244: true,\n  44: true,\n  83: true,\n  86: true,\n  118: true,\n  128: true,\n  138: true,\n  139: true,\n  134: true\n};\n\n/**\n * Accepts input from a ElementaryStream and produces H.264 NAL unit data\n * events.\n */\nH264Stream = function() {\n  var\n    nalByteStream = new NalByteStream(),\n    self,\n    trackId,\n    currentPts,\n    currentDts,\n\n    discardEmulationPreventionBytes,\n    readSequenceParameterSet,\n    skipScalingList;\n\n  H264Stream.prototype.init.call(this);\n  self = this;\n\n  this.push = function(packet) {\n    if (packet.type !== 'video') {\n      return;\n    }\n    trackId = packet.trackId;\n    currentPts = packet.pts;\n    currentDts = packet.dts;\n\n    nalByteStream.push(packet);\n  };\n\n  nalByteStream.on('data', function(data) {\n    var\n      event = {\n        trackId: trackId,\n        pts: currentPts,\n        dts: currentDts,\n        data: data\n      };\n\n    switch (data[0] & 0x1f) {\n    case 0x05:\n      event.nalUnitType = 'slice_layer_without_partitioning_rbsp_idr';\n      break;\n    case 0x06:\n      event.nalUnitType = 'sei_rbsp';\n      event.escapedRBSP = discardEmulationPreventionBytes(data.subarray(1));\n      break;\n    case 0x07:\n      event.nalUnitType = 'seq_parameter_set_rbsp';\n      event.escapedRBSP = discardEmulationPreventionBytes(data.subarray(1));\n      event.config = readSequenceParameterSet(event.escapedRBSP);\n      break;\n    case 0x08:\n      event.nalUnitType = 'pic_parameter_set_rbsp';\n      break;\n    case 0x09:\n      event.nalUnitType = 'access_unit_delimiter_rbsp';\n      break;\n\n    default:\n      break;\n    }\n    self.trigger('data', event);\n  });\n  nalByteStream.on('done', function() {\n    self.trigger('done');\n  });\n\n  this.flush = function() {\n    nalByteStream.flush();\n  };\n\n  /**\n   * Advance the ExpGolomb decoder past a scaling list. The scaling\n   * list is optionally transmitted as part of a sequence parameter\n   * set and is not relevant to transmuxing.\n   * @param count {number} the number of entries in this scaling list\n   * @param expGolombDecoder {object} an ExpGolomb pointed to the\n   * start of a scaling list\n   * @see Recommendation ITU-T H.264, Section 7.3.2.1.1.1\n   */\n  skipScalingList = function(count, expGolombDecoder) {\n    var\n      lastScale = 8,\n      nextScale = 8,\n      j,\n      deltaScale;\n\n    for (j = 0; j < count; j++) {\n      if (nextScale !== 0) {\n        deltaScale = expGolombDecoder.readExpGolomb();\n        nextScale = (lastScale + deltaScale + 256) % 256;\n      }\n\n      lastScale = (nextScale === 0) ? lastScale : nextScale;\n    }\n  };\n\n  /**\n   * Expunge any \"Emulation Prevention\" bytes from a \"Raw Byte\n   * Sequence Payload\"\n   * @param data {Uint8Array} the bytes of a RBSP from a NAL\n   * unit\n   * @return {Uint8Array} the RBSP without any Emulation\n   * Prevention Bytes\n   */\n  discardEmulationPreventionBytes = function(data) {\n    var\n      length = data.byteLength,\n      emulationPreventionBytesPositions = [],\n      i = 1,\n      newLength, newData;\n\n    // Find all `Emulation Prevention Bytes`\n    while (i < length - 2) {\n      if (data[i] === 0 && data[i + 1] === 0 && data[i + 2] === 0x03) {\n        emulationPreventionBytesPositions.push(i + 2);\n        i += 2;\n      } else {\n        i++;\n      }\n    }\n\n    // If no Emulation Prevention Bytes were found just return the original\n    // array\n    if (emulationPreventionBytesPositions.length === 0) {\n      return data;\n    }\n\n    // Create a new array to hold the NAL unit data\n    newLength = length - emulationPreventionBytesPositions.length;\n    newData = new Uint8Array(newLength);\n    var sourceIndex = 0;\n\n    for (i = 0; i < newLength; sourceIndex++, i++) {\n      if (sourceIndex === emulationPreventionBytesPositions[0]) {\n        // Skip this byte\n        sourceIndex++;\n        // Remove this position index\n        emulationPreventionBytesPositions.shift();\n      }\n      newData[i] = data[sourceIndex];\n    }\n\n    return newData;\n  };\n\n  /**\n   * Read a sequence parameter set and return some interesting video\n   * properties. A sequence parameter set is the H264 metadata that\n   * describes the properties of upcoming video frames.\n   * @param data {Uint8Array} the bytes of a sequence parameter set\n   * @return {object} an object with configuration parsed from the\n   * sequence parameter set, including the dimensions of the\n   * associated video frames.\n   */\n  readSequenceParameterSet = function(data) {\n    var\n      frameCropLeftOffset = 0,\n      frameCropRightOffset = 0,\n      frameCropTopOffset = 0,\n      frameCropBottomOffset = 0,\n      sarScale = 1,\n      expGolombDecoder, profileIdc, levelIdc, profileCompatibility,\n      chromaFormatIdc, picOrderCntType,\n      numRefFramesInPicOrderCntCycle, picWidthInMbsMinus1,\n      picHeightInMapUnitsMinus1,\n      frameMbsOnlyFlag,\n      scalingListCount,\n      sarRatio,\n      aspectRatioIdc,\n      i;\n\n    expGolombDecoder = new ExpGolomb(data);\n    profileIdc = expGolombDecoder.readUnsignedByte(); // profile_idc\n    profileCompatibility = expGolombDecoder.readUnsignedByte(); // constraint_set[0-5]_flag\n    levelIdc = expGolombDecoder.readUnsignedByte(); // level_idc u(8)\n    expGolombDecoder.skipUnsignedExpGolomb(); // seq_parameter_set_id\n\n    // some profiles have more optional data we don't need\n    if (PROFILES_WITH_OPTIONAL_SPS_DATA[profileIdc]) {\n      chromaFormatIdc = expGolombDecoder.readUnsignedExpGolomb();\n      if (chromaFormatIdc === 3) {\n        expGolombDecoder.skipBits(1); // separate_colour_plane_flag\n      }\n      expGolombDecoder.skipUnsignedExpGolomb(); // bit_depth_luma_minus8\n      expGolombDecoder.skipUnsignedExpGolomb(); // bit_depth_chroma_minus8\n      expGolombDecoder.skipBits(1); // qpprime_y_zero_transform_bypass_flag\n      if (expGolombDecoder.readBoolean()) { // seq_scaling_matrix_present_flag\n        scalingListCount = (chromaFormatIdc !== 3) ? 8 : 12;\n        for (i = 0; i < scalingListCount; i++) {\n          if (expGolombDecoder.readBoolean()) { // seq_scaling_list_present_flag[ i ]\n            if (i < 6) {\n              skipScalingList(16, expGolombDecoder);\n            } else {\n              skipScalingList(64, expGolombDecoder);\n            }\n          }\n        }\n      }\n    }\n\n    expGolombDecoder.skipUnsignedExpGolomb(); // log2_max_frame_num_minus4\n    picOrderCntType = expGolombDecoder.readUnsignedExpGolomb();\n\n    if (picOrderCntType === 0) {\n      expGolombDecoder.readUnsignedExpGolomb(); // log2_max_pic_order_cnt_lsb_minus4\n    } else if (picOrderCntType === 1) {\n      expGolombDecoder.skipBits(1); // delta_pic_order_always_zero_flag\n      expGolombDecoder.skipExpGolomb(); // offset_for_non_ref_pic\n      expGolombDecoder.skipExpGolomb(); // offset_for_top_to_bottom_field\n      numRefFramesInPicOrderCntCycle = expGolombDecoder.readUnsignedExpGolomb();\n      for (i = 0; i < numRefFramesInPicOrderCntCycle; i++) {\n        expGolombDecoder.skipExpGolomb(); // offset_for_ref_frame[ i ]\n      }\n    }\n\n    expGolombDecoder.skipUnsignedExpGolomb(); // max_num_ref_frames\n    expGolombDecoder.skipBits(1); // gaps_in_frame_num_value_allowed_flag\n\n    picWidthInMbsMinus1 = expGolombDecoder.readUnsignedExpGolomb();\n    picHeightInMapUnitsMinus1 = expGolombDecoder.readUnsignedExpGolomb();\n\n    frameMbsOnlyFlag = expGolombDecoder.readBits(1);\n    if (frameMbsOnlyFlag === 0) {\n      expGolombDecoder.skipBits(1); // mb_adaptive_frame_field_flag\n    }\n\n    expGolombDecoder.skipBits(1); // direct_8x8_inference_flag\n    if (expGolombDecoder.readBoolean()) { // frame_cropping_flag\n      frameCropLeftOffset = expGolombDecoder.readUnsignedExpGolomb();\n      frameCropRightOffset = expGolombDecoder.readUnsignedExpGolomb();\n      frameCropTopOffset = expGolombDecoder.readUnsignedExpGolomb();\n      frameCropBottomOffset = expGolombDecoder.readUnsignedExpGolomb();\n    }\n    if (expGolombDecoder.readBoolean()) {\n      // vui_parameters_present_flag\n      if (expGolombDecoder.readBoolean()) {\n        // aspect_ratio_info_present_flag\n        aspectRatioIdc = expGolombDecoder.readUnsignedByte();\n        switch (aspectRatioIdc) {\n          case 1: sarRatio = [1, 1]; break;\n          case 2: sarRatio = [12, 11]; break;\n          case 3: sarRatio = [10, 11]; break;\n          case 4: sarRatio = [16, 11]; break;\n          case 5: sarRatio = [40, 33]; break;\n          case 6: sarRatio = [24, 11]; break;\n          case 7: sarRatio = [20, 11]; break;\n          case 8: sarRatio = [32, 11]; break;\n          case 9: sarRatio = [80, 33]; break;\n          case 10: sarRatio = [18, 11]; break;\n          case 11: sarRatio = [15, 11]; break;\n          case 12: sarRatio = [64, 33]; break;\n          case 13: sarRatio = [160, 99]; break;\n          case 14: sarRatio = [4, 3]; break;\n          case 15: sarRatio = [3, 2]; break;\n          case 16: sarRatio = [2, 1]; break;\n          case 255: {\n            sarRatio = [expGolombDecoder.readUnsignedByte() << 8 |\n                        expGolombDecoder.readUnsignedByte(),\n                        expGolombDecoder.readUnsignedByte() << 8 |\n                        expGolombDecoder.readUnsignedByte() ];\n            break;\n          }\n        }\n        if (sarRatio) {\n          sarScale = sarRatio[0] / sarRatio[1];\n        }\n      }\n    }\n    return {\n      profileIdc: profileIdc,\n      levelIdc: levelIdc,\n      profileCompatibility: profileCompatibility,\n      width: Math.ceil((((picWidthInMbsMinus1 + 1) * 16) - frameCropLeftOffset * 2 - frameCropRightOffset * 2) * sarScale),\n      height: ((2 - frameMbsOnlyFlag) * (picHeightInMapUnitsMinus1 + 1) * 16) - (frameCropTopOffset * 2) - (frameCropBottomOffset * 2)\n    };\n  };\n\n};\nH264Stream.prototype = new Stream();\n\nmodule.exports = {\n  H264Stream: H264Stream,\n  NalByteStream: NalByteStream\n};\n\n},{\"../utils/exp-golomb.js\":61,\"../utils/stream.js\":62}],42:[function(require,module,exports){\nvar highPrefix = [33, 16, 5, 32, 164, 27];\nvar lowPrefix = [33, 65, 108, 84, 1, 2, 4, 8, 168, 2, 4, 8, 17, 191, 252];\nvar zeroFill = function(count) {\n  var a = [];\n  while (count--) {\n    a.push(0);\n  }\n  return a;\n};\n\nvar makeTable = function(metaTable) {\n  return Object.keys(metaTable).reduce(function(obj, key) {\n    obj[key] = new Uint8Array(metaTable[key].reduce(function(arr, part) {\n      return arr.concat(part);\n    }, []));\n    return obj;\n  }, {});\n};\n\n// Frames-of-silence to use for filling in missing AAC frames\nvar coneOfSilence = {\n  96000: [highPrefix, [227, 64], zeroFill(154), [56]],\n  88200: [highPrefix, [231], zeroFill(170), [56]],\n  64000: [highPrefix, [248, 192], zeroFill(240), [56]],\n  48000: [highPrefix, [255, 192], zeroFill(268), [55, 148, 128], zeroFill(54), [112]],\n  44100: [highPrefix, [255, 192], zeroFill(268), [55, 163, 128], zeroFill(84), [112]],\n  32000: [highPrefix, [255, 192], zeroFill(268), [55, 234], zeroFill(226), [112]],\n  24000: [highPrefix, [255, 192], zeroFill(268), [55, 255, 128], zeroFill(268), [111, 112], zeroFill(126), [224]],\n  16000: [highPrefix, [255, 192], zeroFill(268), [55, 255, 128], zeroFill(268), [111, 255], zeroFill(269), [223, 108], zeroFill(195), [1, 192]],\n  12000: [lowPrefix, zeroFill(268), [3, 127, 248], zeroFill(268), [6, 255, 240], zeroFill(268), [13, 255, 224], zeroFill(268), [27, 253, 128], zeroFill(259), [56]],\n  11025: [lowPrefix, zeroFill(268), [3, 127, 248], zeroFill(268), [6, 255, 240], zeroFill(268), [13, 255, 224], zeroFill(268), [27, 255, 192], zeroFill(268), [55, 175, 128], zeroFill(108), [112]],\n  8000: [lowPrefix, zeroFill(268), [3, 121, 16], zeroFill(47), [7]]\n};\n\nmodule.exports = makeTable(coneOfSilence);\n\n},{}],43:[function(require,module,exports){\n'use strict';\n\nvar Stream = require('../utils/stream.js');\n\n/**\n * The final stage of the transmuxer that emits the flv tags\n * for audio, video, and metadata. Also tranlates in time and\n * outputs caption data and id3 cues.\n */\nvar CoalesceStream = function(options) {\n  // Number of Tracks per output segment\n  // If greater than 1, we combine multiple\n  // tracks into a single segment\n  this.numberOfTracks = 0;\n  this.metadataStream = options.metadataStream;\n\n  this.videoTags = [];\n  this.audioTags = [];\n  this.videoTrack = null;\n  this.audioTrack = null;\n  this.pendingCaptions = [];\n  this.pendingMetadata = [];\n  this.pendingTracks = 0;\n  this.processedTracks = 0;\n\n  CoalesceStream.prototype.init.call(this);\n\n  // Take output from multiple\n  this.push = function(output) {\n    // buffer incoming captions until the associated video segment\n    // finishes\n    if (output.text) {\n      return this.pendingCaptions.push(output);\n    }\n    // buffer incoming id3 tags until the final flush\n    if (output.frames) {\n      return this.pendingMetadata.push(output);\n    }\n\n    if (output.track.type === 'video') {\n      this.videoTrack = output.track;\n      this.videoTags = output.tags;\n      this.pendingTracks++;\n    }\n    if (output.track.type === 'audio') {\n      this.audioTrack = output.track;\n      this.audioTags = output.tags;\n      this.pendingTracks++;\n    }\n  };\n};\n\nCoalesceStream.prototype = new Stream();\nCoalesceStream.prototype.flush = function(flushSource) {\n  var\n    id3,\n    caption,\n    i,\n    timelineStartPts,\n    event = {\n      tags: {},\n      captions: [],\n      captionStreams: {},\n      metadata: []\n    };\n\n  if (this.pendingTracks < this.numberOfTracks) {\n    if (flushSource !== 'VideoSegmentStream' &&\n        flushSource !== 'AudioSegmentStream') {\n      // Return because we haven't received a flush from a data-generating\n      // portion of the segment (meaning that we have only recieved meta-data\n      // or captions.)\n      return;\n    } else if (this.pendingTracks === 0) {\n      // In the case where we receive a flush without any data having been\n      // received we consider it an emitted track for the purposes of coalescing\n      // `done` events.\n      // We do this for the case where there is an audio and video track in the\n      // segment but no audio data. (seen in several playlists with alternate\n      // audio tracks and no audio present in the main TS segments.)\n      this.processedTracks++;\n\n      if (this.processedTracks < this.numberOfTracks) {\n        return;\n      }\n    }\n  }\n\n  this.processedTracks += this.pendingTracks;\n  this.pendingTracks = 0;\n\n  if (this.processedTracks < this.numberOfTracks) {\n    return;\n  }\n\n  if (this.videoTrack) {\n    timelineStartPts = this.videoTrack.timelineStartInfo.pts;\n  } else if (this.audioTrack) {\n    timelineStartPts = this.audioTrack.timelineStartInfo.pts;\n  }\n\n  event.tags.videoTags = this.videoTags;\n  event.tags.audioTags = this.audioTags;\n\n  // Translate caption PTS times into second offsets into the\n  // video timeline for the segment, and add track info\n  for (i = 0; i < this.pendingCaptions.length; i++) {\n    caption = this.pendingCaptions[i];\n    caption.startTime = caption.startPts - timelineStartPts;\n    caption.startTime /= 90e3;\n    caption.endTime = caption.endPts - timelineStartPts;\n    caption.endTime /= 90e3;\n    event.captionStreams[caption.stream] = true;\n    event.captions.push(caption);\n  }\n\n  // Translate ID3 frame PTS times into second offsets into the\n  // video timeline for the segment\n  for (i = 0; i < this.pendingMetadata.length; i++) {\n    id3 = this.pendingMetadata[i];\n    id3.cueTime = id3.pts - timelineStartPts;\n    id3.cueTime /= 90e3;\n    event.metadata.push(id3);\n  }\n  // We add this to every single emitted segment even though we only need\n  // it for the first\n  event.metadata.dispatchType = this.metadataStream.dispatchType;\n\n  // Reset stream state\n  this.videoTrack = null;\n  this.audioTrack = null;\n  this.videoTags = [];\n  this.audioTags = [];\n  this.pendingCaptions.length = 0;\n  this.pendingMetadata.length = 0;\n  this.pendingTracks = 0;\n  this.processedTracks = 0;\n\n  // Emit the final segment\n  this.trigger('data', event);\n\n  this.trigger('done');\n};\n\nmodule.exports = CoalesceStream;\n\n},{\"../utils/stream.js\":62}],44:[function(require,module,exports){\n'use strict';\n\nvar FlvTag = require('./flv-tag.js');\n\n// For information on the FLV format, see\n// http://download.macromedia.com/f4v/video_file_format_spec_v10_1.pdf.\n// Technically, this function returns the header and a metadata FLV tag\n// if duration is greater than zero\n// duration in seconds\n// @return {object} the bytes of the FLV header as a Uint8Array\nvar getFlvHeader = function(duration, audio, video) { // :ByteArray {\n  var\n    headBytes = new Uint8Array(3 + 1 + 1 + 4),\n    head = new DataView(headBytes.buffer),\n    metadata,\n    result,\n    metadataLength;\n\n  // default arguments\n  duration = duration || 0;\n  audio = audio === undefined ? true : audio;\n  video = video === undefined ? true : video;\n\n  // signature\n  head.setUint8(0, 0x46); // 'F'\n  head.setUint8(1, 0x4c); // 'L'\n  head.setUint8(2, 0x56); // 'V'\n\n  // version\n  head.setUint8(3, 0x01);\n\n  // flags\n  head.setUint8(4, (audio ? 0x04 : 0x00) | (video ? 0x01 : 0x00));\n\n  // data offset, should be 9 for FLV v1\n  head.setUint32(5, headBytes.byteLength);\n\n  // init the first FLV tag\n  if (duration <= 0) {\n    // no duration available so just write the first field of the first\n    // FLV tag\n    result = new Uint8Array(headBytes.byteLength + 4);\n    result.set(headBytes);\n    result.set([0, 0, 0, 0], headBytes.byteLength);\n    return result;\n  }\n\n  // write out the duration metadata tag\n  metadata = new FlvTag(FlvTag.METADATA_TAG);\n  metadata.pts = metadata.dts = 0;\n  metadata.writeMetaDataDouble('duration', duration);\n  metadataLength = metadata.finalize().length;\n  result = new Uint8Array(headBytes.byteLength + metadataLength);\n  result.set(headBytes);\n  result.set(head.byteLength, metadataLength);\n\n  return result;\n};\n\nmodule.exports = getFlvHeader;\n\n},{\"./flv-tag.js\":45}],45:[function(require,module,exports){\n/**\n * An object that stores the bytes of an FLV tag and methods for\n * querying and manipulating that data.\n * @see http://download.macromedia.com/f4v/video_file_format_spec_v10_1.pdf\n */\n'use strict';\n\nvar FlvTag;\n\n// (type:uint, extraData:Boolean = false) extends ByteArray\nFlvTag = function(type, extraData) {\n  var\n    // Counter if this is a metadata tag, nal start marker if this is a video\n    // tag. unused if this is an audio tag\n    adHoc = 0, // :uint\n\n    // The default size is 16kb but this is not enough to hold iframe\n    // data and the resizing algorithm costs a bit so we create a larger\n    // starting buffer for video tags\n    bufferStartSize = 16384,\n\n    // checks whether the FLV tag has enough capacity to accept the proposed\n    // write and re-allocates the internal buffers if necessary\n    prepareWrite = function(flv, count) {\n      var\n        bytes,\n        minLength = flv.position + count;\n      if (minLength < flv.bytes.byteLength) {\n        // there's enough capacity so do nothing\n        return;\n      }\n\n      // allocate a new buffer and copy over the data that will not be modified\n      bytes = new Uint8Array(minLength * 2);\n      bytes.set(flv.bytes.subarray(0, flv.position), 0);\n      flv.bytes = bytes;\n      flv.view = new DataView(flv.bytes.buffer);\n    },\n\n    // commonly used metadata properties\n    widthBytes = FlvTag.widthBytes || new Uint8Array('width'.length),\n    heightBytes = FlvTag.heightBytes || new Uint8Array('height'.length),\n    videocodecidBytes = FlvTag.videocodecidBytes || new Uint8Array('videocodecid'.length),\n    i;\n\n  if (!FlvTag.widthBytes) {\n    // calculating the bytes of common metadata names ahead of time makes the\n    // corresponding writes faster because we don't have to loop over the\n    // characters\n    // re-test with test/perf.html if you're planning on changing this\n    for (i = 0; i < 'width'.length; i++) {\n      widthBytes[i] = 'width'.charCodeAt(i);\n    }\n    for (i = 0; i < 'height'.length; i++) {\n      heightBytes[i] = 'height'.charCodeAt(i);\n    }\n    for (i = 0; i < 'videocodecid'.length; i++) {\n      videocodecidBytes[i] = 'videocodecid'.charCodeAt(i);\n    }\n\n    FlvTag.widthBytes = widthBytes;\n    FlvTag.heightBytes = heightBytes;\n    FlvTag.videocodecidBytes = videocodecidBytes;\n  }\n\n  this.keyFrame = false; // :Boolean\n\n  switch (type) {\n  case FlvTag.VIDEO_TAG:\n    this.length = 16;\n    // Start the buffer at 256k\n    bufferStartSize *= 6;\n    break;\n  case FlvTag.AUDIO_TAG:\n    this.length = 13;\n    this.keyFrame = true;\n    break;\n  case FlvTag.METADATA_TAG:\n    this.length = 29;\n    this.keyFrame = true;\n    break;\n  default:\n    throw new Error('Unknown FLV tag type');\n  }\n\n  this.bytes = new Uint8Array(bufferStartSize);\n  this.view = new DataView(this.bytes.buffer);\n  this.bytes[0] = type;\n  this.position = this.length;\n  this.keyFrame = extraData; // Defaults to false\n\n  // presentation timestamp\n  this.pts = 0;\n  // decoder timestamp\n  this.dts = 0;\n\n  // ByteArray#writeBytes(bytes:ByteArray, offset:uint = 0, length:uint = 0)\n  this.writeBytes = function(bytes, offset, length) {\n    var\n      start = offset || 0,\n      end;\n    length = length || bytes.byteLength;\n    end = start + length;\n\n    prepareWrite(this, length);\n    this.bytes.set(bytes.subarray(start, end), this.position);\n\n    this.position += length;\n    this.length = Math.max(this.length, this.position);\n  };\n\n  // ByteArray#writeByte(value:int):void\n  this.writeByte = function(byte) {\n    prepareWrite(this, 1);\n    this.bytes[this.position] = byte;\n    this.position++;\n    this.length = Math.max(this.length, this.position);\n  };\n\n  // ByteArray#writeShort(value:int):void\n  this.writeShort = function(short) {\n    prepareWrite(this, 2);\n    this.view.setUint16(this.position, short);\n    this.position += 2;\n    this.length = Math.max(this.length, this.position);\n  };\n\n  // Negative index into array\n  // (pos:uint):int\n  this.negIndex = function(pos) {\n    return this.bytes[this.length - pos];\n  };\n\n  // The functions below ONLY work when this[0] == VIDEO_TAG.\n  // We are not going to check for that because we dont want the overhead\n  // (nal:ByteArray = null):int\n  this.nalUnitSize = function() {\n    if (adHoc === 0) {\n      return 0;\n    }\n\n    return this.length - (adHoc + 4);\n  };\n\n  this.startNalUnit = function() {\n    // remember position and add 4 bytes\n    if (adHoc > 0) {\n      throw new Error('Attempted to create new NAL wihout closing the old one');\n    }\n\n    // reserve 4 bytes for nal unit size\n    adHoc = this.length;\n    this.length += 4;\n    this.position = this.length;\n  };\n\n  // (nal:ByteArray = null):void\n  this.endNalUnit = function(nalContainer) {\n    var\n      nalStart, // :uint\n      nalLength; // :uint\n\n    // Rewind to the marker and write the size\n    if (this.length === adHoc + 4) {\n      // we started a nal unit, but didnt write one, so roll back the 4 byte size value\n      this.length -= 4;\n    } else if (adHoc > 0) {\n      nalStart = adHoc + 4;\n      nalLength = this.length - nalStart;\n\n      this.position = adHoc;\n      this.view.setUint32(this.position, nalLength);\n      this.position = this.length;\n\n      if (nalContainer) {\n        // Add the tag to the NAL unit\n        nalContainer.push(this.bytes.subarray(nalStart, nalStart + nalLength));\n      }\n    }\n\n    adHoc = 0;\n  };\n\n  /**\n   * Write out a 64-bit floating point valued metadata property. This method is\n   * called frequently during a typical parse and needs to be fast.\n   */\n  // (key:String, val:Number):void\n  this.writeMetaDataDouble = function(key, val) {\n    var i;\n    prepareWrite(this, 2 + key.length + 9);\n\n    // write size of property name\n    this.view.setUint16(this.position, key.length);\n    this.position += 2;\n\n    // this next part looks terrible but it improves parser throughput by\n    // 10kB/s in my testing\n\n    // write property name\n    if (key === 'width') {\n      this.bytes.set(widthBytes, this.position);\n      this.position += 5;\n    } else if (key === 'height') {\n      this.bytes.set(heightBytes, this.position);\n      this.position += 6;\n    } else if (key === 'videocodecid') {\n      this.bytes.set(videocodecidBytes, this.position);\n      this.position += 12;\n    } else {\n      for (i = 0; i < key.length; i++) {\n        this.bytes[this.position] = key.charCodeAt(i);\n        this.position++;\n      }\n    }\n\n    // skip null byte\n    this.position++;\n\n    // write property value\n    this.view.setFloat64(this.position, val);\n    this.position += 8;\n\n    // update flv tag length\n    this.length = Math.max(this.length, this.position);\n    ++adHoc;\n  };\n\n  // (key:String, val:Boolean):void\n  this.writeMetaDataBoolean = function(key, val) {\n    var i;\n    prepareWrite(this, 2);\n    this.view.setUint16(this.position, key.length);\n    this.position += 2;\n    for (i = 0; i < key.length; i++) {\n      // if key.charCodeAt(i) >= 255, handle error\n      prepareWrite(this, 1);\n      this.bytes[this.position] = key.charCodeAt(i);\n      this.position++;\n    }\n    prepareWrite(this, 2);\n    this.view.setUint8(this.position, 0x01);\n    this.position++;\n    this.view.setUint8(this.position, val ? 0x01 : 0x00);\n    this.position++;\n    this.length = Math.max(this.length, this.position);\n    ++adHoc;\n  };\n\n  // ():ByteArray\n  this.finalize = function() {\n    var\n      dtsDelta, // :int\n      len; // :int\n\n    switch (this.bytes[0]) {\n      // Video Data\n    case FlvTag.VIDEO_TAG:\n       // We only support AVC, 1 = key frame (for AVC, a seekable\n       // frame), 2 = inter frame (for AVC, a non-seekable frame)\n      this.bytes[11] = ((this.keyFrame || extraData) ? 0x10 : 0x20) | 0x07;\n      this.bytes[12] = extraData ?  0x00 : 0x01;\n\n      dtsDelta = this.pts - this.dts;\n      this.bytes[13] = (dtsDelta & 0x00FF0000) >>> 16;\n      this.bytes[14] = (dtsDelta & 0x0000FF00) >>>  8;\n      this.bytes[15] = (dtsDelta & 0x000000FF) >>>  0;\n      break;\n\n    case FlvTag.AUDIO_TAG:\n      this.bytes[11] = 0xAF; // 44 kHz, 16-bit stereo\n      this.bytes[12] = extraData ? 0x00 : 0x01;\n      break;\n\n    case FlvTag.METADATA_TAG:\n      this.position = 11;\n      this.view.setUint8(this.position, 0x02); // String type\n      this.position++;\n      this.view.setUint16(this.position, 0x0A); // 10 Bytes\n      this.position += 2;\n      // set \"onMetaData\"\n      this.bytes.set([0x6f, 0x6e, 0x4d, 0x65,\n                      0x74, 0x61, 0x44, 0x61,\n                      0x74, 0x61], this.position);\n      this.position += 10;\n      this.bytes[this.position] = 0x08; // Array type\n      this.position++;\n      this.view.setUint32(this.position, adHoc);\n      this.position = this.length;\n      this.bytes.set([0, 0, 9], this.position);\n      this.position += 3; // End Data Tag\n      this.length = this.position;\n      break;\n    }\n\n    len = this.length - 11;\n\n    // write the DataSize field\n    this.bytes[ 1] = (len & 0x00FF0000) >>> 16;\n    this.bytes[ 2] = (len & 0x0000FF00) >>>  8;\n    this.bytes[ 3] = (len & 0x000000FF) >>>  0;\n    // write the Timestamp\n    this.bytes[ 4] = (this.dts & 0x00FF0000) >>> 16;\n    this.bytes[ 5] = (this.dts & 0x0000FF00) >>>  8;\n    this.bytes[ 6] = (this.dts & 0x000000FF) >>>  0;\n    this.bytes[ 7] = (this.dts & 0xFF000000) >>> 24;\n    // write the StreamID\n    this.bytes[ 8] = 0;\n    this.bytes[ 9] = 0;\n    this.bytes[10] = 0;\n\n    // Sometimes we're at the end of the view and have one slot to write a\n    // uint32, so, prepareWrite of count 4, since, view is uint8\n    prepareWrite(this, 4);\n    this.view.setUint32(this.length, this.length);\n    this.length += 4;\n    this.position += 4;\n\n    // trim down the byte buffer to what is actually being used\n    this.bytes = this.bytes.subarray(0, this.length);\n    this.frameTime = FlvTag.frameTime(this.bytes);\n    // if bytes.bytelength isn't equal to this.length, handle error\n    return this;\n  };\n};\n\nFlvTag.AUDIO_TAG = 0x08; // == 8, :uint\nFlvTag.VIDEO_TAG = 0x09; // == 9, :uint\nFlvTag.METADATA_TAG = 0x12; // == 18, :uint\n\n// (tag:ByteArray):Boolean {\nFlvTag.isAudioFrame = function(tag) {\n  return FlvTag.AUDIO_TAG === tag[0];\n};\n\n// (tag:ByteArray):Boolean {\nFlvTag.isVideoFrame = function(tag) {\n  return FlvTag.VIDEO_TAG === tag[0];\n};\n\n// (tag:ByteArray):Boolean {\nFlvTag.isMetaData = function(tag) {\n  return FlvTag.METADATA_TAG === tag[0];\n};\n\n// (tag:ByteArray):Boolean {\nFlvTag.isKeyFrame = function(tag) {\n  if (FlvTag.isVideoFrame(tag)) {\n    return tag[11] === 0x17;\n  }\n\n  if (FlvTag.isAudioFrame(tag)) {\n    return true;\n  }\n\n  if (FlvTag.isMetaData(tag)) {\n    return true;\n  }\n\n  return false;\n};\n\n// (tag:ByteArray):uint {\nFlvTag.frameTime = function(tag) {\n  var pts = tag[ 4] << 16; // :uint\n  pts |= tag[ 5] <<  8;\n  pts |= tag[ 6] <<  0;\n  pts |= tag[ 7] << 24;\n  return pts;\n};\n\nmodule.exports = FlvTag;\n\n},{}],46:[function(require,module,exports){\nmodule.exports = {\n  tag: require('./flv-tag'),\n  Transmuxer: require('./transmuxer'),\n  getFlvHeader: require('./flv-header')\n};\n\n},{\"./flv-header\":44,\"./flv-tag\":45,\"./transmuxer\":48}],47:[function(require,module,exports){\n'use strict';\n\nvar TagList = function() {\n  var self = this;\n\n  this.list = [];\n\n  this.push = function(tag) {\n    this.list.push({\n      bytes: tag.bytes,\n      dts: tag.dts,\n      pts: tag.pts,\n      keyFrame: tag.keyFrame,\n      metaDataTag: tag.metaDataTag\n    });\n  };\n\n  Object.defineProperty(this, 'length', {\n    get: function() {\n      return self.list.length;\n    }\n  });\n};\n\nmodule.exports = TagList;\n\n},{}],48:[function(require,module,exports){\n'use strict';\n\nvar Stream = require('../utils/stream.js');\nvar FlvTag = require('./flv-tag.js');\nvar m2ts = require('../m2ts/m2ts.js');\nvar AdtsStream = require('../codecs/adts.js');\nvar H264Stream = require('../codecs/h264').H264Stream;\nvar CoalesceStream = require('./coalesce-stream.js');\nvar TagList = require('./tag-list.js');\n\nvar\n  Transmuxer,\n  VideoSegmentStream,\n  AudioSegmentStream,\n  collectTimelineInfo,\n  metaDataTag,\n  extraDataTag;\n\n/**\n * Store information about the start and end of the tracka and the\n * duration for each frame/sample we process in order to calculate\n * the baseMediaDecodeTime\n */\ncollectTimelineInfo = function(track, data) {\n  if (typeof data.pts === 'number') {\n    if (track.timelineStartInfo.pts === undefined) {\n      track.timelineStartInfo.pts = data.pts;\n    } else {\n      track.timelineStartInfo.pts =\n        Math.min(track.timelineStartInfo.pts, data.pts);\n    }\n  }\n\n  if (typeof data.dts === 'number') {\n    if (track.timelineStartInfo.dts === undefined) {\n      track.timelineStartInfo.dts = data.dts;\n    } else {\n      track.timelineStartInfo.dts =\n        Math.min(track.timelineStartInfo.dts, data.dts);\n    }\n  }\n};\n\nmetaDataTag = function(track, pts) {\n  var\n    tag = new FlvTag(FlvTag.METADATA_TAG); // :FlvTag\n\n  tag.dts = pts;\n  tag.pts = pts;\n\n  tag.writeMetaDataDouble('videocodecid', 7);\n  tag.writeMetaDataDouble('width', track.width);\n  tag.writeMetaDataDouble('height', track.height);\n\n  return tag;\n};\n\nextraDataTag = function(track, pts) {\n  var\n    i,\n    tag = new FlvTag(FlvTag.VIDEO_TAG, true);\n\n  tag.dts = pts;\n  tag.pts = pts;\n\n  tag.writeByte(0x01);// version\n  tag.writeByte(track.profileIdc);// profile\n  tag.writeByte(track.profileCompatibility);// compatibility\n  tag.writeByte(track.levelIdc);// level\n  tag.writeByte(0xFC | 0x03); // reserved (6 bits), NULA length size - 1 (2 bits)\n  tag.writeByte(0xE0 | 0x01); // reserved (3 bits), num of SPS (5 bits)\n  tag.writeShort(track.sps[0].length); // data of SPS\n  tag.writeBytes(track.sps[0]); // SPS\n\n  tag.writeByte(track.pps.length); // num of PPS (will there ever be more that 1 PPS?)\n  for (i = 0; i < track.pps.length; ++i) {\n    tag.writeShort(track.pps[i].length); // 2 bytes for length of PPS\n    tag.writeBytes(track.pps[i]); // data of PPS\n  }\n\n  return tag;\n};\n\n/**\n * Constructs a single-track, media segment from AAC data\n * events. The output of this stream can be fed to flash.\n */\nAudioSegmentStream = function(track) {\n  var\n    adtsFrames = [],\n    videoKeyFrames = [],\n    oldExtraData;\n\n  AudioSegmentStream.prototype.init.call(this);\n\n  this.push = function(data) {\n    collectTimelineInfo(track, data);\n\n    if (track) {\n      track.audioobjecttype = data.audioobjecttype;\n      track.channelcount = data.channelcount;\n      track.samplerate = data.samplerate;\n      track.samplingfrequencyindex = data.samplingfrequencyindex;\n      track.samplesize = data.samplesize;\n      track.extraData = (track.audioobjecttype << 11) |\n                        (track.samplingfrequencyindex << 7) |\n                        (track.channelcount << 3);\n    }\n\n    data.pts = Math.round(data.pts / 90);\n    data.dts = Math.round(data.dts / 90);\n\n    // buffer audio data until end() is called\n    adtsFrames.push(data);\n  };\n\n  this.flush = function() {\n    var currentFrame, adtsFrame, lastMetaPts, tags = new TagList();\n    // return early if no audio data has been observed\n    if (adtsFrames.length === 0) {\n      this.trigger('done', 'AudioSegmentStream');\n      return;\n    }\n\n    lastMetaPts = -Infinity;\n\n    while (adtsFrames.length) {\n      currentFrame = adtsFrames.shift();\n\n      // write out a metadata frame at every video key frame\n      if (videoKeyFrames.length && currentFrame.pts >= videoKeyFrames[0]) {\n        lastMetaPts = videoKeyFrames.shift();\n        this.writeMetaDataTags(tags, lastMetaPts);\n      }\n\n      // also write out metadata tags every 1 second so that the decoder\n      // is re-initialized quickly after seeking into a different\n      // audio configuration.\n      if (track.extraData !== oldExtraData || currentFrame.pts - lastMetaPts >= 1000) {\n        this.writeMetaDataTags(tags, currentFrame.pts);\n        oldExtraData = track.extraData;\n        lastMetaPts = currentFrame.pts;\n      }\n\n      adtsFrame = new FlvTag(FlvTag.AUDIO_TAG);\n      adtsFrame.pts = currentFrame.pts;\n      adtsFrame.dts = currentFrame.dts;\n\n      adtsFrame.writeBytes(currentFrame.data);\n\n      tags.push(adtsFrame.finalize());\n    }\n\n    videoKeyFrames.length = 0;\n    oldExtraData = null;\n    this.trigger('data', {track: track, tags: tags.list});\n\n    this.trigger('done', 'AudioSegmentStream');\n  };\n\n  this.writeMetaDataTags = function(tags, pts) {\n    var adtsFrame;\n\n    adtsFrame = new FlvTag(FlvTag.METADATA_TAG);\n    // For audio, DTS is always the same as PTS. We want to set the DTS\n    // however so we can compare with video DTS to determine approximate\n    // packet order\n    adtsFrame.pts = pts;\n    adtsFrame.dts = pts;\n\n    // AAC is always 10\n    adtsFrame.writeMetaDataDouble('audiocodecid', 10);\n    adtsFrame.writeMetaDataBoolean('stereo', track.channelcount === 2);\n    adtsFrame.writeMetaDataDouble('audiosamplerate', track.samplerate);\n    // Is AAC always 16 bit?\n    adtsFrame.writeMetaDataDouble('audiosamplesize', 16);\n\n    tags.push(adtsFrame.finalize());\n\n    adtsFrame = new FlvTag(FlvTag.AUDIO_TAG, true);\n    // For audio, DTS is always the same as PTS. We want to set the DTS\n    // however so we can compare with video DTS to determine approximate\n    // packet order\n    adtsFrame.pts = pts;\n    adtsFrame.dts = pts;\n\n    adtsFrame.view.setUint16(adtsFrame.position, track.extraData);\n    adtsFrame.position += 2;\n    adtsFrame.length = Math.max(adtsFrame.length, adtsFrame.position);\n\n    tags.push(adtsFrame.finalize());\n  };\n\n  this.onVideoKeyFrame = function(pts) {\n    videoKeyFrames.push(pts);\n  };\n};\nAudioSegmentStream.prototype = new Stream();\n\n/**\n * Store FlvTags for the h264 stream\n * @param track {object} track metadata configuration\n */\nVideoSegmentStream = function(track) {\n  var\n    nalUnits = [],\n    config,\n    h264Frame;\n  VideoSegmentStream.prototype.init.call(this);\n\n  this.finishFrame = function(tags, frame) {\n    if (!frame) {\n      return;\n    }\n    // Check if keyframe and the length of tags.\n    // This makes sure we write metadata on the first frame of a segment.\n    if (config && track && track.newMetadata &&\n        (frame.keyFrame || tags.length === 0)) {\n      // Push extra data on every IDR frame in case we did a stream change + seek\n      var metaTag = metaDataTag(config, frame.dts).finalize();\n      var extraTag = extraDataTag(track, frame.dts).finalize();\n\n      metaTag.metaDataTag = extraTag.metaDataTag = true;\n\n      tags.push(metaTag);\n      tags.push(extraTag);\n      track.newMetadata = false;\n\n      this.trigger('keyframe', frame.dts);\n    }\n\n    frame.endNalUnit();\n    tags.push(frame.finalize());\n    h264Frame = null;\n  };\n\n  this.push = function(data) {\n    collectTimelineInfo(track, data);\n\n    data.pts = Math.round(data.pts / 90);\n    data.dts = Math.round(data.dts / 90);\n\n    // buffer video until flush() is called\n    nalUnits.push(data);\n  };\n\n  this.flush = function() {\n    var\n      currentNal,\n      tags = new TagList();\n\n    // Throw away nalUnits at the start of the byte stream until we find\n    // the first AUD\n    while (nalUnits.length) {\n      if (nalUnits[0].nalUnitType === 'access_unit_delimiter_rbsp') {\n        break;\n      }\n      nalUnits.shift();\n    }\n\n    // return early if no video data has been observed\n    if (nalUnits.length === 0) {\n      this.trigger('done', 'VideoSegmentStream');\n      return;\n    }\n\n    while (nalUnits.length) {\n      currentNal = nalUnits.shift();\n\n      // record the track config\n      if (currentNal.nalUnitType === 'seq_parameter_set_rbsp') {\n        track.newMetadata = true;\n        config = currentNal.config;\n        track.width = config.width;\n        track.height = config.height;\n        track.sps = [currentNal.data];\n        track.profileIdc = config.profileIdc;\n        track.levelIdc = config.levelIdc;\n        track.profileCompatibility = config.profileCompatibility;\n        h264Frame.endNalUnit();\n      } else if (currentNal.nalUnitType === 'pic_parameter_set_rbsp') {\n        track.newMetadata = true;\n        track.pps = [currentNal.data];\n        h264Frame.endNalUnit();\n      } else if (currentNal.nalUnitType === 'access_unit_delimiter_rbsp') {\n        if (h264Frame) {\n          this.finishFrame(tags, h264Frame);\n        }\n        h264Frame = new FlvTag(FlvTag.VIDEO_TAG);\n        h264Frame.pts = currentNal.pts;\n        h264Frame.dts = currentNal.dts;\n      } else {\n        if (currentNal.nalUnitType === 'slice_layer_without_partitioning_rbsp_idr') {\n          // the current sample is a key frame\n          h264Frame.keyFrame = true;\n        }\n        h264Frame.endNalUnit();\n      }\n      h264Frame.startNalUnit();\n      h264Frame.writeBytes(currentNal.data);\n    }\n    if (h264Frame) {\n      this.finishFrame(tags, h264Frame);\n    }\n\n    this.trigger('data', {track: track, tags: tags.list});\n\n    // Continue with the flush process now\n    this.trigger('done', 'VideoSegmentStream');\n  };\n};\n\nVideoSegmentStream.prototype = new Stream();\n\n/**\n * An object that incrementally transmuxes MPEG2 Trasport Stream\n * chunks into an FLV.\n */\nTransmuxer = function(options) {\n  var\n    self = this,\n\n    packetStream, parseStream, elementaryStream,\n    videoTimestampRolloverStream, audioTimestampRolloverStream,\n    timedMetadataTimestampRolloverStream,\n    adtsStream, h264Stream,\n    videoSegmentStream, audioSegmentStream, captionStream,\n    coalesceStream;\n\n  Transmuxer.prototype.init.call(this);\n\n  options = options || {};\n\n  // expose the metadata stream\n  this.metadataStream = new m2ts.MetadataStream();\n\n  options.metadataStream = this.metadataStream;\n\n  // set up the parsing pipeline\n  packetStream = new m2ts.TransportPacketStream();\n  parseStream = new m2ts.TransportParseStream();\n  elementaryStream = new m2ts.ElementaryStream();\n  videoTimestampRolloverStream = new m2ts.TimestampRolloverStream('video');\n  audioTimestampRolloverStream = new m2ts.TimestampRolloverStream('audio');\n  timedMetadataTimestampRolloverStream = new m2ts.TimestampRolloverStream('timed-metadata');\n\n  adtsStream = new AdtsStream();\n  h264Stream = new H264Stream();\n  coalesceStream = new CoalesceStream(options);\n\n  // disassemble MPEG2-TS packets into elementary streams\n  packetStream\n    .pipe(parseStream)\n    .pipe(elementaryStream);\n\n  // !!THIS ORDER IS IMPORTANT!!\n  // demux the streams\n  elementaryStream\n    .pipe(videoTimestampRolloverStream)\n    .pipe(h264Stream);\n  elementaryStream\n    .pipe(audioTimestampRolloverStream)\n    .pipe(adtsStream);\n\n  elementaryStream\n    .pipe(timedMetadataTimestampRolloverStream)\n    .pipe(this.metadataStream)\n    .pipe(coalesceStream);\n  // if CEA-708 parsing is available, hook up a caption stream\n  captionStream = new m2ts.CaptionStream();\n  h264Stream.pipe(captionStream)\n    .pipe(coalesceStream);\n\n  // hook up the segment streams once track metadata is delivered\n  elementaryStream.on('data', function(data) {\n    var i, videoTrack, audioTrack;\n\n    if (data.type === 'metadata') {\n      i = data.tracks.length;\n\n      // scan the tracks listed in the metadata\n      while (i--) {\n        if (data.tracks[i].type === 'video') {\n          videoTrack = data.tracks[i];\n        } else if (data.tracks[i].type === 'audio') {\n          audioTrack = data.tracks[i];\n        }\n      }\n\n      // hook up the video segment stream to the first track with h264 data\n      if (videoTrack && !videoSegmentStream) {\n        coalesceStream.numberOfTracks++;\n        videoSegmentStream = new VideoSegmentStream(videoTrack);\n\n        // Set up the final part of the video pipeline\n        h264Stream\n          .pipe(videoSegmentStream)\n          .pipe(coalesceStream);\n      }\n\n      if (audioTrack && !audioSegmentStream) {\n        // hook up the audio segment stream to the first track with aac data\n        coalesceStream.numberOfTracks++;\n        audioSegmentStream = new AudioSegmentStream(audioTrack);\n\n        // Set up the final part of the audio pipeline\n        adtsStream\n          .pipe(audioSegmentStream)\n          .pipe(coalesceStream);\n\n        if (videoSegmentStream) {\n          videoSegmentStream.on('keyframe', audioSegmentStream.onVideoKeyFrame);\n        }\n      }\n    }\n  });\n\n  // feed incoming data to the front of the parsing pipeline\n  this.push = function(data) {\n    packetStream.push(data);\n  };\n\n  // flush any buffered data\n  this.flush = function() {\n    // Start at the top of the pipeline and flush all pending work\n    packetStream.flush();\n  };\n\n  // Caption data has to be reset when seeking outside buffered range\n  this.resetCaptions = function() {\n    captionStream.reset();\n  };\n\n  // Re-emit any data coming from the coalesce stream to the outside world\n  coalesceStream.on('data', function(event) {\n    self.trigger('data', event);\n  });\n\n  // Let the consumer know we have finished flushing the entire pipeline\n  coalesceStream.on('done', function() {\n    self.trigger('done');\n  });\n};\nTransmuxer.prototype = new Stream();\n\n// forward compatibility\nmodule.exports = Transmuxer;\n\n},{\"../codecs/adts.js\":40,\"../codecs/h264\":41,\"../m2ts/m2ts.js\":50,\"../utils/stream.js\":62,\"./coalesce-stream.js\":43,\"./flv-tag.js\":45,\"./tag-list.js\":47}],49:[function(require,module,exports){\n/**\n * mux.js\n *\n * Copyright (c) 2015 Brightcove\n * All rights reserved.\n *\n * Reads in-band caption information from a video elementary\n * stream. Captions must follow the CEA-708 standard for injection\n * into an MPEG-2 transport streams.\n * @see https://en.wikipedia.org/wiki/CEA-708\n * @see https://www.gpo.gov/fdsys/pkg/CFR-2007-title47-vol1/pdf/CFR-2007-title47-vol1-sec15-119.pdf\n */\n\n'use strict';\n\n// -----------------\n// Link To Transport\n// -----------------\n\n// Supplemental enhancement information (SEI) NAL units have a\n// payload type field to indicate how they are to be\n// interpreted. CEAS-708 caption content is always transmitted with\n// payload type 0x04.\nvar USER_DATA_REGISTERED_ITU_T_T35 = 4,\n    RBSP_TRAILING_BITS = 128,\n    Stream = require('../utils/stream');\n\n/**\n  * Parse a supplemental enhancement information (SEI) NAL unit.\n  * Stops parsing once a message of type ITU T T35 has been found.\n  *\n  * @param bytes {Uint8Array} the bytes of a SEI NAL unit\n  * @return {object} the parsed SEI payload\n  * @see Rec. ITU-T H.264, 7.3.2.3.1\n  */\nvar parseSei = function(bytes) {\n  var\n    i = 0,\n    result = {\n      payloadType: -1,\n      payloadSize: 0\n    },\n    payloadType = 0,\n    payloadSize = 0;\n\n  // go through the sei_rbsp parsing each each individual sei_message\n  while (i < bytes.byteLength) {\n    // stop once we have hit the end of the sei_rbsp\n    if (bytes[i] === RBSP_TRAILING_BITS) {\n      break;\n    }\n\n    // Parse payload type\n    while (bytes[i] === 0xFF) {\n      payloadType += 255;\n      i++;\n    }\n    payloadType += bytes[i++];\n\n    // Parse payload size\n    while (bytes[i] === 0xFF) {\n      payloadSize += 255;\n      i++;\n    }\n    payloadSize += bytes[i++];\n\n    // this sei_message is a 608/708 caption so save it and break\n    // there can only ever be one caption message in a frame's sei\n    if (!result.payload && payloadType === USER_DATA_REGISTERED_ITU_T_T35) {\n      result.payloadType = payloadType;\n      result.payloadSize = payloadSize;\n      result.payload = bytes.subarray(i, i + payloadSize);\n      break;\n    }\n\n    // skip the payload and parse the next message\n    i += payloadSize;\n    payloadType = 0;\n    payloadSize = 0;\n  }\n\n  return result;\n};\n\n// see ANSI/SCTE 128-1 (2013), section 8.1\nvar parseUserData = function(sei) {\n  // itu_t_t35_contry_code must be 181 (United States) for\n  // captions\n  if (sei.payload[0] !== 181) {\n    return null;\n  }\n\n  // itu_t_t35_provider_code should be 49 (ATSC) for captions\n  if (((sei.payload[1] << 8) | sei.payload[2]) !== 49) {\n    return null;\n  }\n\n  // the user_identifier should be \"GA94\" to indicate ATSC1 data\n  if (String.fromCharCode(sei.payload[3],\n                          sei.payload[4],\n                          sei.payload[5],\n                          sei.payload[6]) !== 'GA94') {\n    return null;\n  }\n\n  // finally, user_data_type_code should be 0x03 for caption data\n  if (sei.payload[7] !== 0x03) {\n    return null;\n  }\n\n  // return the user_data_type_structure and strip the trailing\n  // marker bits\n  return sei.payload.subarray(8, sei.payload.length - 1);\n};\n\n// see CEA-708-D, section 4.4\nvar parseCaptionPackets = function(pts, userData) {\n  var results = [], i, count, offset, data;\n\n  // if this is just filler, return immediately\n  if (!(userData[0] & 0x40)) {\n    return results;\n  }\n\n  // parse out the cc_data_1 and cc_data_2 fields\n  count = userData[0] & 0x1f;\n  for (i = 0; i < count; i++) {\n    offset = i * 3;\n    data = {\n      type: userData[offset + 2] & 0x03,\n      pts: pts\n    };\n\n    // capture cc data when cc_valid is 1\n    if (userData[offset + 2] & 0x04) {\n      data.ccData = (userData[offset + 3] << 8) | userData[offset + 4];\n      results.push(data);\n    }\n  }\n  return results;\n};\n\nvar CaptionStream = function() {\n\n  CaptionStream.prototype.init.call(this);\n\n  this.captionPackets_ = [];\n\n  this.ccStreams_ = [\n    new Cea608Stream(0, 0), // eslint-disable-line no-use-before-define\n    new Cea608Stream(0, 1), // eslint-disable-line no-use-before-define\n    new Cea608Stream(1, 0), // eslint-disable-line no-use-before-define\n    new Cea608Stream(1, 1) // eslint-disable-line no-use-before-define\n  ];\n\n  this.reset();\n\n  // forward data and done events from CCs to this CaptionStream\n  this.ccStreams_.forEach(function(cc) {\n    cc.on('data', this.trigger.bind(this, 'data'));\n    cc.on('done', this.trigger.bind(this, 'done'));\n  }, this);\n\n};\n\nCaptionStream.prototype = new Stream();\nCaptionStream.prototype.push = function(event) {\n  var sei, userData;\n\n  // only examine SEI NALs\n  if (event.nalUnitType !== 'sei_rbsp') {\n    return;\n  }\n\n  // parse the sei\n  sei = parseSei(event.escapedRBSP);\n\n  // ignore everything but user_data_registered_itu_t_t35\n  if (sei.payloadType !== USER_DATA_REGISTERED_ITU_T_T35) {\n    return;\n  }\n\n  // parse out the user data payload\n  userData = parseUserData(sei);\n\n  // ignore unrecognized userData\n  if (!userData) {\n    return;\n  }\n\n  // Sometimes, the same segment # will be downloaded twice. To stop the\n  // caption data from being processed twice, we track the latest dts we've\n  // received and ignore everything with a dts before that. However, since\n  // data for a specific dts can be split across 2 packets on either side of\n  // a segment boundary, we need to make sure we *don't* ignore the second\n  // dts packet we receive that has dts === this.latestDts_. And thus, the\n  // ignoreNextEqualDts_ flag was born.\n  if (event.dts < this.latestDts_) {\n    // We've started getting older data, so set the flag.\n    this.ignoreNextEqualDts_ = true;\n    return;\n  } else if ((event.dts === this.latestDts_) && (this.ignoreNextEqualDts_)) {\n    // We've received the last duplicate packet, time to start processing again\n    this.ignoreNextEqualDts_ = false;\n    return;\n  }\n\n  // parse out CC data packets and save them for later\n  this.captionPackets_ = this.captionPackets_.concat(parseCaptionPackets(event.pts, userData));\n  this.latestDts_ = event.dts;\n};\n\nCaptionStream.prototype.flush = function() {\n  // make sure we actually parsed captions before proceeding\n  if (!this.captionPackets_.length) {\n    this.ccStreams_.forEach(function(cc) {\n      cc.flush();\n    }, this);\n    return;\n  }\n\n  // In Chrome, the Array#sort function is not stable so add a\n  // presortIndex that we can use to ensure we get a stable-sort\n  this.captionPackets_.forEach(function(elem, idx) {\n    elem.presortIndex = idx;\n  });\n\n  // sort caption byte-pairs based on their PTS values\n  this.captionPackets_.sort(function(a, b) {\n    if (a.pts === b.pts) {\n      return a.presortIndex - b.presortIndex;\n    }\n    return a.pts - b.pts;\n  });\n\n  this.captionPackets_.forEach(function(packet) {\n    if (packet.type < 2) {\n      // Dispatch packet to the right Cea608Stream\n      this.dispatchCea608Packet(packet);\n    }\n    // this is where an 'else' would go for a dispatching packets\n    // to a theoretical Cea708Stream that handles SERVICEn data\n  }, this);\n\n  this.captionPackets_.length = 0;\n  this.ccStreams_.forEach(function(cc) {\n    cc.flush();\n  }, this);\n  return;\n};\n\nCaptionStream.prototype.reset = function() {\n  this.latestDts_ = null;\n  this.ignoreNextEqualDts_ = false;\n  this.activeCea608Channel_ = [null, null];\n  this.ccStreams_.forEach(function(ccStream) {\n    ccStream.reset();\n  });\n};\n\nCaptionStream.prototype.dispatchCea608Packet = function(packet) {\n  // NOTE: packet.type is the CEA608 field\n  if (this.setsChannel1Active(packet)) {\n    this.activeCea608Channel_[packet.type] = 0;\n  } else if (this.setsChannel2Active(packet)) {\n    this.activeCea608Channel_[packet.type] = 1;\n  }\n  if (this.activeCea608Channel_[packet.type] === null) {\n    // If we haven't received anything to set the active channel, discard the\n    // data; we don't want jumbled captions\n    return;\n  }\n  this.ccStreams_[(packet.type << 1) + this.activeCea608Channel_[packet.type]].push(packet);\n};\n\nCaptionStream.prototype.setsChannel1Active = function(packet) {\n  return ((packet.ccData & 0x7800) === 0x1000);\n};\nCaptionStream.prototype.setsChannel2Active = function(packet) {\n  return ((packet.ccData & 0x7800) === 0x1800);\n};\n\n// ----------------------\n// Session to Application\n// ----------------------\n\nvar CHARACTER_TRANSLATION = {\n  0x2a: 0xe1,     // á\n  0x5c: 0xe9,     // é\n  0x5e: 0xed,     // í\n  0x5f: 0xf3,     // ó\n  0x60: 0xfa,     // ú\n  0x7b: 0xe7,     // ç\n  0x7c: 0xf7,     // ÷\n  0x7d: 0xd1,     // Ñ\n  0x7e: 0xf1,     // ñ\n  0x7f: 0x2588,   // █\n  0x0130: 0xae,   // ®\n  0x0131: 0xb0,   // °\n  0x0132: 0xbd,   // ½\n  0x0133: 0xbf,   // ¿\n  0x0134: 0x2122, // ™\n  0x0135: 0xa2,   // ¢\n  0x0136: 0xa3,   // £\n  0x0137: 0x266a, // ♪\n  0x0138: 0xe0,   // à\n  0x0139: 0xa0,   //\n  0x013a: 0xe8,   // è\n  0x013b: 0xe2,   // â\n  0x013c: 0xea,   // ê\n  0x013d: 0xee,   // î\n  0x013e: 0xf4,   // ô\n  0x013f: 0xfb,   // û\n  0x0220: 0xc1,   // Á\n  0x0221: 0xc9,   // É\n  0x0222: 0xd3,   // Ó\n  0x0223: 0xda,   // Ú\n  0x0224: 0xdc,   // Ü\n  0x0225: 0xfc,   // ü\n  0x0226: 0x2018, // ‘\n  0x0227: 0xa1,   // ¡\n  0x0228: 0x2a,   // *\n  0x0229: 0x27,   // '\n  0x022a: 0x2014, // —\n  0x022b: 0xa9,   // ©\n  0x022c: 0x2120, // ℠\n  0x022d: 0x2022, // •\n  0x022e: 0x201c, // “\n  0x022f: 0x201d, // ”\n  0x0230: 0xc0,   // À\n  0x0231: 0xc2,   // Â\n  0x0232: 0xc7,   // Ç\n  0x0233: 0xc8,   // È\n  0x0234: 0xca,   // Ê\n  0x0235: 0xcb,   // Ë\n  0x0236: 0xeb,   // ë\n  0x0237: 0xce,   // Î\n  0x0238: 0xcf,   // Ï\n  0x0239: 0xef,   // ï\n  0x023a: 0xd4,   // Ô\n  0x023b: 0xd9,   // Ù\n  0x023c: 0xf9,   // ù\n  0x023d: 0xdb,   // Û\n  0x023e: 0xab,   // «\n  0x023f: 0xbb,   // »\n  0x0320: 0xc3,   // Ã\n  0x0321: 0xe3,   // ã\n  0x0322: 0xcd,   // Í\n  0x0323: 0xcc,   // Ì\n  0x0324: 0xec,   // ì\n  0x0325: 0xd2,   // Ò\n  0x0326: 0xf2,   // ò\n  0x0327: 0xd5,   // Õ\n  0x0328: 0xf5,   // õ\n  0x0329: 0x7b,   // {\n  0x032a: 0x7d,   // }\n  0x032b: 0x5c,   // \\\n  0x032c: 0x5e,   // ^\n  0x032d: 0x5f,   // _\n  0x032e: 0x7c,   // |\n  0x032f: 0x7e,   // ~\n  0x0330: 0xc4,   // Ä\n  0x0331: 0xe4,   // ä\n  0x0332: 0xd6,   // Ö\n  0x0333: 0xf6,   // ö\n  0x0334: 0xdf,   // ß\n  0x0335: 0xa5,   // ¥\n  0x0336: 0xa4,   // ¤\n  0x0337: 0x2502, // │\n  0x0338: 0xc5,   // Å\n  0x0339: 0xe5,   // å\n  0x033a: 0xd8,   // Ø\n  0x033b: 0xf8,   // ø\n  0x033c: 0x250c, // ┌\n  0x033d: 0x2510, // ┐\n  0x033e: 0x2514, // └\n  0x033f: 0x2518  // ┘\n};\n\nvar getCharFromCode = function(code) {\n  if (code === null) {\n    return '';\n  }\n  code = CHARACTER_TRANSLATION[code] || code;\n  return String.fromCharCode(code);\n};\n\n// the index of the last row in a CEA-608 display buffer\nvar BOTTOM_ROW = 14;\n\n// This array is used for mapping PACs -> row #, since there's no way of\n// getting it through bit logic.\nvar ROWS = [0x1100, 0x1120, 0x1200, 0x1220, 0x1500, 0x1520, 0x1600, 0x1620,\n            0x1700, 0x1720, 0x1000, 0x1300, 0x1320, 0x1400, 0x1420];\n\n// CEA-608 captions are rendered onto a 34x15 matrix of character\n// cells. The \"bottom\" row is the last element in the outer array.\nvar createDisplayBuffer = function() {\n  var result = [], i = BOTTOM_ROW + 1;\n  while (i--) {\n    result.push('');\n  }\n  return result;\n};\n\nvar Cea608Stream = function(field, dataChannel) {\n  Cea608Stream.prototype.init.call(this);\n\n  this.field_ = field || 0;\n  this.dataChannel_ = dataChannel || 0;\n\n  this.name_ = 'CC' + (((this.field_ << 1) | this.dataChannel_) + 1);\n\n  this.setConstants();\n  this.reset();\n\n  this.push = function(packet) {\n    var data, swap, char0, char1, text;\n    // remove the parity bits\n    data = packet.ccData & 0x7f7f;\n\n    // ignore duplicate control codes; the spec demands they're sent twice\n    if (data === this.lastControlCode_) {\n      this.lastControlCode_ = null;\n      return;\n    }\n\n    // Store control codes\n    if ((data & 0xf000) === 0x1000) {\n      this.lastControlCode_ = data;\n    } else if (data !== this.PADDING_) {\n      this.lastControlCode_ = null;\n    }\n\n    char0 = data >>> 8;\n    char1 = data & 0xff;\n\n    if (data === this.PADDING_) {\n      return;\n\n    } else if (data === this.RESUME_CAPTION_LOADING_) {\n      this.mode_ = 'popOn';\n\n    } else if (data === this.END_OF_CAPTION_) {\n      this.clearFormatting(packet.pts);\n      // if a caption was being displayed, it's gone now\n      this.flushDisplayed(packet.pts);\n\n      // flip memory\n      swap = this.displayed_;\n      this.displayed_ = this.nonDisplayed_;\n      this.nonDisplayed_ = swap;\n\n      // start measuring the time to display the caption\n      this.startPts_ = packet.pts;\n\n    } else if (data === this.ROLL_UP_2_ROWS_) {\n      this.topRow_ = BOTTOM_ROW - 1;\n      this.mode_ = 'rollUp';\n    } else if (data === this.ROLL_UP_3_ROWS_) {\n      this.topRow_ = BOTTOM_ROW - 2;\n      this.mode_ = 'rollUp';\n    } else if (data === this.ROLL_UP_4_ROWS_) {\n      this.topRow_ = BOTTOM_ROW - 3;\n      this.mode_ = 'rollUp';\n    } else if (data === this.CARRIAGE_RETURN_) {\n      this.clearFormatting(packet.pts);\n      this.flushDisplayed(packet.pts);\n      this.shiftRowsUp_();\n      this.startPts_ = packet.pts;\n\n    } else if (data === this.BACKSPACE_) {\n      if (this.mode_ === 'popOn') {\n        this.nonDisplayed_[BOTTOM_ROW] = this.nonDisplayed_[BOTTOM_ROW].slice(0, -1);\n      } else {\n        this.displayed_[BOTTOM_ROW] = this.displayed_[BOTTOM_ROW].slice(0, -1);\n      }\n    } else if (data === this.ERASE_DISPLAYED_MEMORY_) {\n      this.flushDisplayed(packet.pts);\n      this.displayed_ = createDisplayBuffer();\n    } else if (data === this.ERASE_NON_DISPLAYED_MEMORY_) {\n      this.nonDisplayed_ = createDisplayBuffer();\n\n    } else if (data === this.RESUME_DIRECT_CAPTIONING_) {\n      this.mode_ = 'paintOn';\n\n    // Append special characters to caption text\n    } else if (this.isSpecialCharacter(char0, char1)) {\n      // Bitmask char0 so that we can apply character transformations\n      // regardless of field and data channel.\n      // Then byte-shift to the left and OR with char1 so we can pass the\n      // entire character code to `getCharFromCode`.\n      char0 = (char0 & 0x03) << 8;\n      text = getCharFromCode(char0 | char1);\n      this[this.mode_](packet.pts, text);\n      this.column_++;\n\n    // Append extended characters to caption text\n    } else if (this.isExtCharacter(char0, char1)) {\n      // Extended characters always follow their \"non-extended\" equivalents.\n      // IE if a \"è\" is desired, you'll always receive \"eè\"; non-compliant\n      // decoders are supposed to drop the \"è\", while compliant decoders\n      // backspace the \"e\" and insert \"è\".\n\n      // Delete the previous character\n      if (this.mode_ === 'popOn') {\n        this.nonDisplayed_[this.row_] = this.nonDisplayed_[this.row_].slice(0, -1);\n      } else {\n        this.displayed_[BOTTOM_ROW] = this.displayed_[BOTTOM_ROW].slice(0, -1);\n      }\n\n      // Bitmask char0 so that we can apply character transformations\n      // regardless of field and data channel.\n      // Then byte-shift to the left and OR with char1 so we can pass the\n      // entire character code to `getCharFromCode`.\n      char0 = (char0 & 0x03) << 8;\n      text = getCharFromCode(char0 | char1);\n      this[this.mode_](packet.pts, text);\n      this.column_++;\n\n    // Process mid-row codes\n    } else if (this.isMidRowCode(char0, char1)) {\n      // Attributes are not additive, so clear all formatting\n      this.clearFormatting(packet.pts);\n\n      // According to the standard, mid-row codes\n      // should be replaced with spaces, so add one now\n      this[this.mode_](packet.pts, ' ');\n      this.column_++;\n\n      if ((char1 & 0xe) === 0xe) {\n        this.addFormatting(packet.pts, ['i']);\n      }\n\n      if ((char1 & 0x1) === 0x1) {\n        this.addFormatting(packet.pts, ['u']);\n      }\n\n    // Detect offset control codes and adjust cursor\n    } else if (this.isOffsetControlCode(char0, char1)) {\n      // Cursor position is set by indent PAC (see below) in 4-column\n      // increments, with an additional offset code of 1-3 to reach any\n      // of the 32 columns specified by CEA-608. So all we need to do\n      // here is increment the column cursor by the given offset.\n      this.column_ += (char1 & 0x03);\n\n    // Detect PACs (Preamble Address Codes)\n    } else if (this.isPAC(char0, char1)) {\n\n      // There's no logic for PAC -> row mapping, so we have to just\n      // find the row code in an array and use its index :(\n      var row = ROWS.indexOf(data & 0x1f20);\n\n      if (row !== this.row_) {\n        // formatting is only persistent for current row\n        this.clearFormatting(packet.pts);\n        this.row_ = row;\n      }\n      // All PACs can apply underline, so detect and apply\n      // (All odd-numbered second bytes set underline)\n      if ((char1 & 0x1) && (this.formatting_.indexOf('u') === -1)) {\n          this.addFormatting(packet.pts, ['u']);\n      }\n\n      if ((data & 0x10) === 0x10) {\n        // We've got an indent level code. Each successive even number\n        // increments the column cursor by 4, so we can get the desired\n        // column position by bit-shifting to the right (to get n/2)\n        // and multiplying by 4.\n        this.column_ = ((data & 0xe) >> 1) * 4;\n      }\n\n      if (this.isColorPAC(char1)) {\n        // it's a color code, though we only support white, which\n        // can be either normal or italicized. white italics can be\n        // either 0x4e or 0x6e depending on the row, so we just\n        // bitwise-and with 0xe to see if italics should be turned on\n        if ((char1 & 0xe) === 0xe) {\n          this.addFormatting(packet.pts, ['i']);\n        }\n      }\n\n    // We have a normal character in char0, and possibly one in char1\n    } else if (this.isNormalChar(char0)) {\n      if (char1 === 0x00) {\n        char1 = null;\n      }\n      text = getCharFromCode(char0);\n      text += getCharFromCode(char1);\n      this[this.mode_](packet.pts, text);\n      this.column_ += text.length;\n\n    } // finish data processing\n\n  };\n};\nCea608Stream.prototype = new Stream();\n// Trigger a cue point that captures the current state of the\n// display buffer\nCea608Stream.prototype.flushDisplayed = function(pts) {\n  var content = this.displayed_\n    // remove spaces from the start and end of the string\n    .map(function(row) {\n      return row.trim();\n    })\n    // combine all text rows to display in one cue\n    .join('\\n')\n    // and remove blank rows from the start and end, but not the middle\n    .replace(/^\\n+|\\n+$/g, '');\n\n  if (content.length) {\n    this.trigger('data', {\n      startPts: this.startPts_,\n      endPts: pts,\n      text: content,\n      stream: this.name_\n    });\n  }\n};\n\n/**\n * Zero out the data, used for startup and on seek\n */\nCea608Stream.prototype.reset = function() {\n  this.mode_ = 'popOn';\n  // When in roll-up mode, the index of the last row that will\n  // actually display captions. If a caption is shifted to a row\n  // with a lower index than this, it is cleared from the display\n  // buffer\n  this.topRow_ = 0;\n  this.startPts_ = 0;\n  this.displayed_ = createDisplayBuffer();\n  this.nonDisplayed_ = createDisplayBuffer();\n  this.lastControlCode_ = null;\n\n  // Track row and column for proper line-breaking and spacing\n  this.column_ = 0;\n  this.row_ = BOTTOM_ROW;\n\n  // This variable holds currently-applied formatting\n  this.formatting_ = [];\n};\n\n/**\n * Sets up control code and related constants for this instance\n */\nCea608Stream.prototype.setConstants = function() {\n  // The following attributes have these uses:\n  // ext_ :    char0 for mid-row codes, and the base for extended\n  //           chars (ext_+0, ext_+1, and ext_+2 are char0s for\n  //           extended codes)\n  // control_: char0 for control codes, except byte-shifted to the\n  //           left so that we can do this.control_ | CONTROL_CODE\n  // offset_:  char0 for tab offset codes\n  //\n  // It's also worth noting that control codes, and _only_ control codes,\n  // differ between field 1 and field2. Field 2 control codes are always\n  // their field 1 value plus 1. That's why there's the \"| field\" on the\n  // control value.\n  if (this.dataChannel_ === 0) {\n    this.BASE_     = 0x10;\n    this.EXT_      = 0x11;\n    this.CONTROL_  = (0x14 | this.field_) << 8;\n    this.OFFSET_   = 0x17;\n  } else if (this.dataChannel_ === 1) {\n    this.BASE_     = 0x18;\n    this.EXT_      = 0x19;\n    this.CONTROL_  = (0x1c | this.field_) << 8;\n    this.OFFSET_   = 0x1f;\n  }\n\n  // Constants for the LSByte command codes recognized by Cea608Stream. This\n  // list is not exhaustive. For a more comprehensive listing and semantics see\n  // http://www.gpo.gov/fdsys/pkg/CFR-2010-title47-vol1/pdf/CFR-2010-title47-vol1-sec15-119.pdf\n  // Padding\n  this.PADDING_                    = 0x0000;\n  // Pop-on Mode\n  this.RESUME_CAPTION_LOADING_     = this.CONTROL_ | 0x20;\n  this.END_OF_CAPTION_             = this.CONTROL_ | 0x2f;\n  // Roll-up Mode\n  this.ROLL_UP_2_ROWS_             = this.CONTROL_ | 0x25;\n  this.ROLL_UP_3_ROWS_             = this.CONTROL_ | 0x26;\n  this.ROLL_UP_4_ROWS_             = this.CONTROL_ | 0x27;\n  this.CARRIAGE_RETURN_            = this.CONTROL_ | 0x2d;\n  // paint-on mode (not supported)\n  this.RESUME_DIRECT_CAPTIONING_   = this.CONTROL_ | 0x29;\n  // Erasure\n  this.BACKSPACE_                  = this.CONTROL_ | 0x21;\n  this.ERASE_DISPLAYED_MEMORY_     = this.CONTROL_ | 0x2c;\n  this.ERASE_NON_DISPLAYED_MEMORY_ = this.CONTROL_ | 0x2e;\n};\n\n/**\n * Detects if the 2-byte packet data is a special character\n *\n * Special characters have a second byte in the range 0x30 to 0x3f,\n * with the first byte being 0x11 (for data channel 1) or 0x19 (for\n * data channel 2).\n *\n * @param  {Integer} char0 The first byte\n * @param  {Integer} char1 The second byte\n * @return {Boolean}       Whether the 2 bytes are an special character\n */\nCea608Stream.prototype.isSpecialCharacter = function(char0, char1) {\n  return (char0 === this.EXT_ && char1 >= 0x30 && char1 <= 0x3f);\n};\n\n/**\n * Detects if the 2-byte packet data is an extended character\n *\n * Extended characters have a second byte in the range 0x20 to 0x3f,\n * with the first byte being 0x12 or 0x13 (for data channel 1) or\n * 0x1a or 0x1b (for data channel 2).\n *\n * @param  {Integer} char0 The first byte\n * @param  {Integer} char1 The second byte\n * @return {Boolean}       Whether the 2 bytes are an extended character\n */\nCea608Stream.prototype.isExtCharacter = function(char0, char1) {\n  return ((char0 === (this.EXT_ + 1) || char0 === (this.EXT_ + 2)) &&\n    (char1 >= 0x20 && char1 <= 0x3f));\n};\n\n/**\n * Detects if the 2-byte packet is a mid-row code\n *\n * Mid-row codes have a second byte in the range 0x20 to 0x2f, with\n * the first byte being 0x11 (for data channel 1) or 0x19 (for data\n * channel 2).\n *\n * @param  {Integer} char0 The first byte\n * @param  {Integer} char1 The second byte\n * @return {Boolean}       Whether the 2 bytes are a mid-row code\n */\nCea608Stream.prototype.isMidRowCode = function(char0, char1) {\n  return (char0 === this.EXT_ && (char1 >= 0x20 && char1 <= 0x2f));\n};\n\n/**\n * Detects if the 2-byte packet is an offset control code\n *\n * Offset control codes have a second byte in the range 0x21 to 0x23,\n * with the first byte being 0x17 (for data channel 1) or 0x1f (for\n * data channel 2).\n *\n * @param  {Integer} char0 The first byte\n * @param  {Integer} char1 The second byte\n * @return {Boolean}       Whether the 2 bytes are an offset control code\n */\nCea608Stream.prototype.isOffsetControlCode = function(char0, char1) {\n  return (char0 === this.OFFSET_ && (char1 >= 0x21 && char1 <= 0x23));\n};\n\n/**\n * Detects if the 2-byte packet is a Preamble Address Code\n *\n * PACs have a first byte in the range 0x10 to 0x17 (for data channel 1)\n * or 0x18 to 0x1f (for data channel 2), with the second byte in the\n * range 0x40 to 0x7f.\n *\n * @param  {Integer} char0 The first byte\n * @param  {Integer} char1 The second byte\n * @return {Boolean}       Whether the 2 bytes are a PAC\n */\nCea608Stream.prototype.isPAC = function(char0, char1) {\n  return (char0 >= this.BASE_ && char0 < (this.BASE_ + 8) &&\n    (char1 >= 0x40 && char1 <= 0x7f));\n};\n\n/**\n * Detects if a packet's second byte is in the range of a PAC color code\n *\n * PAC color codes have the second byte be in the range 0x40 to 0x4f, or\n * 0x60 to 0x6f.\n *\n * @param  {Integer} char1 The second byte\n * @return {Boolean}       Whether the byte is a color PAC\n */\nCea608Stream.prototype.isColorPAC = function(char1) {\n  return ((char1 >= 0x40 && char1 <= 0x4f) || (char1 >= 0x60 && char1 <= 0x7f));\n};\n\n/**\n * Detects if a single byte is in the range of a normal character\n *\n * Normal text bytes are in the range 0x20 to 0x7f.\n *\n * @param  {Integer} char  The byte\n * @return {Boolean}       Whether the byte is a normal character\n */\nCea608Stream.prototype.isNormalChar = function(char) {\n  return (char >= 0x20 && char <= 0x7f);\n};\n\n// Adds the opening HTML tag for the passed character to the caption text,\n// and keeps track of it for later closing\nCea608Stream.prototype.addFormatting = function(pts, format) {\n  this.formatting_ = this.formatting_.concat(format);\n  var text = format.reduce(function(text, format) {\n    return text + '<' + format + '>';\n  }, '');\n  this[this.mode_](pts, text);\n};\n\n// Adds HTML closing tags for current formatting to caption text and\n// clears remembered formatting\nCea608Stream.prototype.clearFormatting = function(pts) {\n  if (!this.formatting_.length) {\n    return;\n  }\n  var text = this.formatting_.reverse().reduce(function(text, format) {\n    return text + '</' + format + '>';\n  }, '');\n  this.formatting_ = [];\n  this[this.mode_](pts, text);\n};\n\n// Mode Implementations\nCea608Stream.prototype.popOn = function(pts, text) {\n  var baseRow = this.nonDisplayed_[this.row_];\n\n  // buffer characters\n  baseRow += text;\n  this.nonDisplayed_[this.row_] = baseRow;\n};\n\nCea608Stream.prototype.rollUp = function(pts, text) {\n  var baseRow = this.displayed_[BOTTOM_ROW];\n\n  baseRow += text;\n  this.displayed_[BOTTOM_ROW] = baseRow;\n\n};\n\nCea608Stream.prototype.shiftRowsUp_ = function() {\n  var i;\n  // clear out inactive rows\n  for (i = 0; i < this.topRow_; i++) {\n    this.displayed_[i] = '';\n  }\n  // shift displayed rows up\n  for (i = this.topRow_; i < BOTTOM_ROW; i++) {\n    this.displayed_[i] = this.displayed_[i + 1];\n  }\n  // clear out the bottom row\n  this.displayed_[BOTTOM_ROW] = '';\n};\n\n// paintOn mode is not implemented\nCea608Stream.prototype.paintOn = function() {};\n\n// exports\nmodule.exports = {\n  CaptionStream: CaptionStream,\n  Cea608Stream: Cea608Stream\n};\n\n},{\"../utils/stream\":62}],50:[function(require,module,exports){\n/**\n * mux.js\n *\n * Copyright (c) 2015 Brightcove\n * All rights reserved.\n *\n * A stream-based mp2t to mp4 converter. This utility can be used to\n * deliver mp4s to a SourceBuffer on platforms that support native\n * Media Source Extensions.\n */\n'use strict';\nvar Stream = require('../utils/stream.js'),\n  CaptionStream = require('./caption-stream'),\n  StreamTypes = require('./stream-types'),\n  TimestampRolloverStream = require('./timestamp-rollover-stream').TimestampRolloverStream;\n\nvar m2tsStreamTypes = require('./stream-types.js');\n\n// object types\nvar TransportPacketStream, TransportParseStream, ElementaryStream;\n\n// constants\nvar\n  MP2T_PACKET_LENGTH = 188, // bytes\n  SYNC_BYTE = 0x47;\n\n/**\n * Splits an incoming stream of binary data into MPEG-2 Transport\n * Stream packets.\n */\nTransportPacketStream = function() {\n  var\n    buffer = new Uint8Array(MP2T_PACKET_LENGTH),\n    bytesInBuffer = 0;\n\n  TransportPacketStream.prototype.init.call(this);\n\n   // Deliver new bytes to the stream.\n\n  this.push = function(bytes) {\n    var\n      startIndex = 0,\n      endIndex = MP2T_PACKET_LENGTH,\n      everything;\n\n    // If there are bytes remaining from the last segment, prepend them to the\n    // bytes that were pushed in\n    if (bytesInBuffer) {\n      everything = new Uint8Array(bytes.byteLength + bytesInBuffer);\n      everything.set(buffer.subarray(0, bytesInBuffer));\n      everything.set(bytes, bytesInBuffer);\n      bytesInBuffer = 0;\n    } else {\n      everything = bytes;\n    }\n\n    // While we have enough data for a packet\n    while (endIndex < everything.byteLength) {\n      // Look for a pair of start and end sync bytes in the data..\n      if (everything[startIndex] === SYNC_BYTE && everything[endIndex] === SYNC_BYTE) {\n        // We found a packet so emit it and jump one whole packet forward in\n        // the stream\n        this.trigger('data', everything.subarray(startIndex, endIndex));\n        startIndex += MP2T_PACKET_LENGTH;\n        endIndex += MP2T_PACKET_LENGTH;\n        continue;\n      }\n      // If we get here, we have somehow become de-synchronized and we need to step\n      // forward one byte at a time until we find a pair of sync bytes that denote\n      // a packet\n      startIndex++;\n      endIndex++;\n    }\n\n    // If there was some data left over at the end of the segment that couldn't\n    // possibly be a whole packet, keep it because it might be the start of a packet\n    // that continues in the next segment\n    if (startIndex < everything.byteLength) {\n      buffer.set(everything.subarray(startIndex), 0);\n      bytesInBuffer = everything.byteLength - startIndex;\n    }\n  };\n\n  this.flush = function() {\n    // If the buffer contains a whole packet when we are being flushed, emit it\n    // and empty the buffer. Otherwise hold onto the data because it may be\n    // important for decoding the next segment\n    if (bytesInBuffer === MP2T_PACKET_LENGTH && buffer[0] === SYNC_BYTE) {\n      this.trigger('data', buffer);\n      bytesInBuffer = 0;\n    }\n    this.trigger('done');\n  };\n};\nTransportPacketStream.prototype = new Stream();\n\n/**\n * Accepts an MP2T TransportPacketStream and emits data events with parsed\n * forms of the individual transport stream packets.\n */\nTransportParseStream = function() {\n  var parsePsi, parsePat, parsePmt, self;\n  TransportParseStream.prototype.init.call(this);\n  self = this;\n\n  this.packetsWaitingForPmt = [];\n  this.programMapTable = undefined;\n\n  parsePsi = function(payload, psi) {\n    var offset = 0;\n\n    // PSI packets may be split into multiple sections and those\n    // sections may be split into multiple packets. If a PSI\n    // section starts in this packet, the payload_unit_start_indicator\n    // will be true and the first byte of the payload will indicate\n    // the offset from the current position to the start of the\n    // section.\n    if (psi.payloadUnitStartIndicator) {\n      offset += payload[offset] + 1;\n    }\n\n    if (psi.type === 'pat') {\n      parsePat(payload.subarray(offset), psi);\n    } else {\n      parsePmt(payload.subarray(offset), psi);\n    }\n  };\n\n  parsePat = function(payload, pat) {\n    pat.section_number = payload[7]; // eslint-disable-line camelcase\n    pat.last_section_number = payload[8]; // eslint-disable-line camelcase\n\n    // skip the PSI header and parse the first PMT entry\n    self.pmtPid = (payload[10] & 0x1F) << 8 | payload[11];\n    pat.pmtPid = self.pmtPid;\n  };\n\n  /**\n   * Parse out the relevant fields of a Program Map Table (PMT).\n   * @param payload {Uint8Array} the PMT-specific portion of an MP2T\n   * packet. The first byte in this array should be the table_id\n   * field.\n   * @param pmt {object} the object that should be decorated with\n   * fields parsed from the PMT.\n   */\n  parsePmt = function(payload, pmt) {\n    var sectionLength, tableEnd, programInfoLength, offset;\n\n    // PMTs can be sent ahead of the time when they should actually\n    // take effect. We don't believe this should ever be the case\n    // for HLS but we'll ignore \"forward\" PMT declarations if we see\n    // them. Future PMT declarations have the current_next_indicator\n    // set to zero.\n    if (!(payload[5] & 0x01)) {\n      return;\n    }\n\n    // overwrite any existing program map table\n    self.programMapTable = {\n      video: null,\n      audio: null,\n      'timed-metadata': {}\n    };\n\n    // the mapping table ends at the end of the current section\n    sectionLength = (payload[1] & 0x0f) << 8 | payload[2];\n    tableEnd = 3 + sectionLength - 4;\n\n    // to determine where the table is, we have to figure out how\n    // long the program info descriptors are\n    programInfoLength = (payload[10] & 0x0f) << 8 | payload[11];\n\n    // advance the offset to the first entry in the mapping table\n    offset = 12 + programInfoLength;\n    while (offset < tableEnd) {\n      var streamType = payload[offset];\n      var pid = (payload[offset + 1] & 0x1F) << 8 | payload[offset + 2];\n\n      // only map a single elementary_pid for audio and video stream types\n      // TODO: should this be done for metadata too? for now maintain behavior of\n      //       multiple metadata streams\n      if (streamType === StreamTypes.H264_STREAM_TYPE &&\n          self.programMapTable.video === null) {\n        self.programMapTable.video = pid;\n      } else if (streamType === StreamTypes.ADTS_STREAM_TYPE &&\n                 self.programMapTable.audio === null) {\n        self.programMapTable.audio = pid;\n      } else if (streamType === StreamTypes.METADATA_STREAM_TYPE) {\n        // map pid to stream type for metadata streams\n        self.programMapTable['timed-metadata'][pid] = streamType;\n      }\n\n      // move to the next table entry\n      // skip past the elementary stream descriptors, if present\n      offset += ((payload[offset + 3] & 0x0F) << 8 | payload[offset + 4]) + 5;\n    }\n\n    // record the map on the packet as well\n    pmt.programMapTable = self.programMapTable;\n  };\n\n  /**\n   * Deliver a new MP2T packet to the stream.\n   */\n  this.push = function(packet) {\n    var\n      result = {},\n      offset = 4;\n\n    result.payloadUnitStartIndicator = !!(packet[1] & 0x40);\n\n    // pid is a 13-bit field starting at the last bit of packet[1]\n    result.pid = packet[1] & 0x1f;\n    result.pid <<= 8;\n    result.pid |= packet[2];\n\n    // if an adaption field is present, its length is specified by the\n    // fifth byte of the TS packet header. The adaptation field is\n    // used to add stuffing to PES packets that don't fill a complete\n    // TS packet, and to specify some forms of timing and control data\n    // that we do not currently use.\n    if (((packet[3] & 0x30) >>> 4) > 0x01) {\n      offset += packet[offset] + 1;\n    }\n\n    // parse the rest of the packet based on the type\n    if (result.pid === 0) {\n      result.type = 'pat';\n      parsePsi(packet.subarray(offset), result);\n      this.trigger('data', result);\n    } else if (result.pid === this.pmtPid) {\n      result.type = 'pmt';\n      parsePsi(packet.subarray(offset), result);\n      this.trigger('data', result);\n\n      // if there are any packets waiting for a PMT to be found, process them now\n      while (this.packetsWaitingForPmt.length) {\n        this.processPes_.apply(this, this.packetsWaitingForPmt.shift());\n      }\n    } else if (this.programMapTable === undefined) {\n      // When we have not seen a PMT yet, defer further processing of\n      // PES packets until one has been parsed\n      this.packetsWaitingForPmt.push([packet, offset, result]);\n    } else {\n      this.processPes_(packet, offset, result);\n    }\n  };\n\n  this.processPes_ = function(packet, offset, result) {\n    // set the appropriate stream type\n    if (result.pid === this.programMapTable.video) {\n      result.streamType = StreamTypes.H264_STREAM_TYPE;\n    } else if (result.pid === this.programMapTable.audio) {\n      result.streamType = StreamTypes.ADTS_STREAM_TYPE;\n    } else {\n      // if not video or audio, it is timed-metadata or unknown\n      // if unknown, streamType will be undefined\n      result.streamType = this.programMapTable['timed-metadata'][result.pid];\n    }\n\n    result.type = 'pes';\n    result.data = packet.subarray(offset);\n\n    this.trigger('data', result);\n  };\n\n};\nTransportParseStream.prototype = new Stream();\nTransportParseStream.STREAM_TYPES  = {\n  h264: 0x1b,\n  adts: 0x0f\n};\n\n/**\n * Reconsistutes program elementary stream (PES) packets from parsed\n * transport stream packets. That is, if you pipe an\n * mp2t.TransportParseStream into a mp2t.ElementaryStream, the output\n * events will be events which capture the bytes for individual PES\n * packets plus relevant metadata that has been extracted from the\n * container.\n */\nElementaryStream = function() {\n  var\n    self = this,\n    // PES packet fragments\n    video = {\n      data: [],\n      size: 0\n    },\n    audio = {\n      data: [],\n      size: 0\n    },\n    timedMetadata = {\n      data: [],\n      size: 0\n    },\n    parsePes = function(payload, pes) {\n      var ptsDtsFlags;\n\n      // get the packet length, this will be 0 for video\n      pes.packetLength = 6 + ((payload[4] << 8) | payload[5]);\n\n      // find out if this packets starts a new keyframe\n      pes.dataAlignmentIndicator = (payload[6] & 0x04) !== 0;\n      // PES packets may be annotated with a PTS value, or a PTS value\n      // and a DTS value. Determine what combination of values is\n      // available to work with.\n      ptsDtsFlags = payload[7];\n\n      // PTS and DTS are normally stored as a 33-bit number.  Javascript\n      // performs all bitwise operations on 32-bit integers but javascript\n      // supports a much greater range (52-bits) of integer using standard\n      // mathematical operations.\n      // We construct a 31-bit value using bitwise operators over the 31\n      // most significant bits and then multiply by 4 (equal to a left-shift\n      // of 2) before we add the final 2 least significant bits of the\n      // timestamp (equal to an OR.)\n      if (ptsDtsFlags & 0xC0) {\n        // the PTS and DTS are not written out directly. For information\n        // on how they are encoded, see\n        // http://dvd.sourceforge.net/dvdinfo/pes-hdr.html\n        pes.pts = (payload[9] & 0x0E) << 27 |\n          (payload[10] & 0xFF) << 20 |\n          (payload[11] & 0xFE) << 12 |\n          (payload[12] & 0xFF) <<  5 |\n          (payload[13] & 0xFE) >>>  3;\n        pes.pts *= 4; // Left shift by 2\n        pes.pts += (payload[13] & 0x06) >>> 1; // OR by the two LSBs\n        pes.dts = pes.pts;\n        if (ptsDtsFlags & 0x40) {\n          pes.dts = (payload[14] & 0x0E) << 27 |\n            (payload[15] & 0xFF) << 20 |\n            (payload[16] & 0xFE) << 12 |\n            (payload[17] & 0xFF) << 5 |\n            (payload[18] & 0xFE) >>> 3;\n          pes.dts *= 4; // Left shift by 2\n          pes.dts += (payload[18] & 0x06) >>> 1; // OR by the two LSBs\n        }\n      }\n      // the data section starts immediately after the PES header.\n      // pes_header_data_length specifies the number of header bytes\n      // that follow the last byte of the field.\n      pes.data = payload.subarray(9 + payload[8]);\n    },\n    flushStream = function(stream, type, forceFlush) {\n      var\n        packetData = new Uint8Array(stream.size),\n        event = {\n          type: type\n        },\n        i = 0,\n        offset = 0,\n        packetFlushable = false,\n        fragment;\n\n      // do nothing if there is not enough buffered data for a complete\n      // PES header\n      if (!stream.data.length || stream.size < 9) {\n        return;\n      }\n      event.trackId = stream.data[0].pid;\n\n      // reassemble the packet\n      for (i = 0; i < stream.data.length; i++) {\n        fragment = stream.data[i];\n\n        packetData.set(fragment.data, offset);\n        offset += fragment.data.byteLength;\n      }\n\n      // parse assembled packet's PES header\n      parsePes(packetData, event);\n\n      // non-video PES packets MUST have a non-zero PES_packet_length\n      // check that there is enough stream data to fill the packet\n      packetFlushable = type === 'video' || event.packetLength <= stream.size;\n\n      // flush pending packets if the conditions are right\n      if (forceFlush || packetFlushable) {\n        stream.size = 0;\n        stream.data.length = 0;\n      }\n\n      // only emit packets that are complete. this is to avoid assembling\n      // incomplete PES packets due to poor segmentation\n      if (packetFlushable) {\n        self.trigger('data', event);\n      }\n    };\n\n  ElementaryStream.prototype.init.call(this);\n\n  this.push = function(data) {\n    ({\n      pat: function() {\n        // we have to wait for the PMT to arrive as well before we\n        // have any meaningful metadata\n      },\n      pes: function() {\n        var stream, streamType;\n\n        switch (data.streamType) {\n        case StreamTypes.H264_STREAM_TYPE:\n        case m2tsStreamTypes.H264_STREAM_TYPE:\n          stream = video;\n          streamType = 'video';\n          break;\n        case StreamTypes.ADTS_STREAM_TYPE:\n          stream = audio;\n          streamType = 'audio';\n          break;\n        case StreamTypes.METADATA_STREAM_TYPE:\n          stream = timedMetadata;\n          streamType = 'timed-metadata';\n          break;\n        default:\n          // ignore unknown stream types\n          return;\n        }\n\n        // if a new packet is starting, we can flush the completed\n        // packet\n        if (data.payloadUnitStartIndicator) {\n          flushStream(stream, streamType, true);\n        }\n\n        // buffer this fragment until we are sure we've received the\n        // complete payload\n        stream.data.push(data);\n        stream.size += data.data.byteLength;\n      },\n      pmt: function() {\n        var\n          event = {\n            type: 'metadata',\n            tracks: []\n          },\n          programMapTable = data.programMapTable;\n\n        // translate audio and video streams to tracks\n        if (programMapTable.video !== null) {\n          event.tracks.push({\n            timelineStartInfo: {\n              baseMediaDecodeTime: 0\n            },\n            id: +programMapTable.video,\n            codec: 'avc',\n            type: 'video'\n          });\n        }\n        if (programMapTable.audio !== null) {\n          event.tracks.push({\n            timelineStartInfo: {\n              baseMediaDecodeTime: 0\n            },\n            id: +programMapTable.audio,\n            codec: 'adts',\n            type: 'audio'\n          });\n        }\n\n        self.trigger('data', event);\n      }\n    })[data.type]();\n  };\n\n  /**\n   * Flush any remaining input. Video PES packets may be of variable\n   * length. Normally, the start of a new video packet can trigger the\n   * finalization of the previous packet. That is not possible if no\n   * more video is forthcoming, however. In that case, some other\n   * mechanism (like the end of the file) has to be employed. When it is\n   * clear that no additional data is forthcoming, calling this method\n   * will flush the buffered packets.\n   */\n  this.flush = function() {\n    // !!THIS ORDER IS IMPORTANT!!\n    // video first then audio\n    flushStream(video, 'video');\n    flushStream(audio, 'audio');\n    flushStream(timedMetadata, 'timed-metadata');\n    this.trigger('done');\n  };\n};\nElementaryStream.prototype = new Stream();\n\nvar m2ts = {\n  PAT_PID: 0x0000,\n  MP2T_PACKET_LENGTH: MP2T_PACKET_LENGTH,\n  TransportPacketStream: TransportPacketStream,\n  TransportParseStream: TransportParseStream,\n  ElementaryStream: ElementaryStream,\n  TimestampRolloverStream: TimestampRolloverStream,\n  CaptionStream: CaptionStream.CaptionStream,\n  Cea608Stream: CaptionStream.Cea608Stream,\n  MetadataStream: require('./metadata-stream')\n};\n\nfor (var type in StreamTypes) {\n  if (StreamTypes.hasOwnProperty(type)) {\n    m2ts[type] = StreamTypes[type];\n  }\n}\n\nmodule.exports = m2ts;\n\n},{\"../utils/stream.js\":62,\"./caption-stream\":49,\"./metadata-stream\":51,\"./stream-types\":53,\"./stream-types.js\":53,\"./timestamp-rollover-stream\":54}],51:[function(require,module,exports){\n/**\n * Accepts program elementary stream (PES) data events and parses out\n * ID3 metadata from them, if present.\n * @see http://id3.org/id3v2.3.0\n */\n'use strict';\nvar\n  Stream = require('../utils/stream'),\n  StreamTypes = require('./stream-types'),\n  // return a percent-encoded representation of the specified byte range\n  // @see http://en.wikipedia.org/wiki/Percent-encoding\n  percentEncode = function(bytes, start, end) {\n    var i, result = '';\n    for (i = start; i < end; i++) {\n      result += '%' + ('00' + bytes[i].toString(16)).slice(-2);\n    }\n    return result;\n  },\n  // return the string representation of the specified byte range,\n  // interpreted as UTf-8.\n  parseUtf8 = function(bytes, start, end) {\n    return decodeURIComponent(percentEncode(bytes, start, end));\n  },\n  // return the string representation of the specified byte range,\n  // interpreted as ISO-8859-1.\n  parseIso88591 = function(bytes, start, end) {\n    return unescape(percentEncode(bytes, start, end)); // jshint ignore:line\n  },\n  parseSyncSafeInteger = function(data) {\n    return (data[0] << 21) |\n            (data[1] << 14) |\n            (data[2] << 7) |\n            (data[3]);\n  },\n  tagParsers = {\n    TXXX: function(tag) {\n      var i;\n      if (tag.data[0] !== 3) {\n        // ignore frames with unrecognized character encodings\n        return;\n      }\n\n      for (i = 1; i < tag.data.length; i++) {\n        if (tag.data[i] === 0) {\n          // parse the text fields\n          tag.description = parseUtf8(tag.data, 1, i);\n          // do not include the null terminator in the tag value\n          tag.value = parseUtf8(tag.data, i + 1, tag.data.length).replace(/\\0*$/, '');\n          break;\n        }\n      }\n      tag.data = tag.value;\n    },\n    WXXX: function(tag) {\n      var i;\n      if (tag.data[0] !== 3) {\n        // ignore frames with unrecognized character encodings\n        return;\n      }\n\n      for (i = 1; i < tag.data.length; i++) {\n        if (tag.data[i] === 0) {\n          // parse the description and URL fields\n          tag.description = parseUtf8(tag.data, 1, i);\n          tag.url = parseUtf8(tag.data, i + 1, tag.data.length);\n          break;\n        }\n      }\n    },\n    PRIV: function(tag) {\n      var i;\n\n      for (i = 0; i < tag.data.length; i++) {\n        if (tag.data[i] === 0) {\n          // parse the description and URL fields\n          tag.owner = parseIso88591(tag.data, 0, i);\n          break;\n        }\n      }\n      tag.privateData = tag.data.subarray(i + 1);\n      tag.data = tag.privateData;\n    }\n  },\n  MetadataStream;\n\nMetadataStream = function(options) {\n  var\n    settings = {\n      debug: !!(options && options.debug),\n\n      // the bytes of the program-level descriptor field in MP2T\n      // see ISO/IEC 13818-1:2013 (E), section 2.6 \"Program and\n      // program element descriptors\"\n      descriptor: options && options.descriptor\n    },\n    // the total size in bytes of the ID3 tag being parsed\n    tagSize = 0,\n    // tag data that is not complete enough to be parsed\n    buffer = [],\n    // the total number of bytes currently in the buffer\n    bufferSize = 0,\n    i;\n\n  MetadataStream.prototype.init.call(this);\n\n  // calculate the text track in-band metadata track dispatch type\n  // https://html.spec.whatwg.org/multipage/embedded-content.html#steps-to-expose-a-media-resource-specific-text-track\n  this.dispatchType = StreamTypes.METADATA_STREAM_TYPE.toString(16);\n  if (settings.descriptor) {\n    for (i = 0; i < settings.descriptor.length; i++) {\n      this.dispatchType += ('00' + settings.descriptor[i].toString(16)).slice(-2);\n    }\n  }\n\n  this.push = function(chunk) {\n    var tag, frameStart, frameSize, frame, i, frameHeader;\n    if (chunk.type !== 'timed-metadata') {\n      return;\n    }\n\n    // if data_alignment_indicator is set in the PES header,\n    // we must have the start of a new ID3 tag. Assume anything\n    // remaining in the buffer was malformed and throw it out\n    if (chunk.dataAlignmentIndicator) {\n      bufferSize = 0;\n      buffer.length = 0;\n    }\n\n    // ignore events that don't look like ID3 data\n    if (buffer.length === 0 &&\n        (chunk.data.length < 10 ||\n          chunk.data[0] !== 'I'.charCodeAt(0) ||\n          chunk.data[1] !== 'D'.charCodeAt(0) ||\n          chunk.data[2] !== '3'.charCodeAt(0))) {\n      if (settings.debug) {\n        // eslint-disable-next-line no-console\n        console.log('Skipping unrecognized metadata packet');\n      }\n      return;\n    }\n\n    // add this chunk to the data we've collected so far\n\n    buffer.push(chunk);\n    bufferSize += chunk.data.byteLength;\n\n    // grab the size of the entire frame from the ID3 header\n    if (buffer.length === 1) {\n      // the frame size is transmitted as a 28-bit integer in the\n      // last four bytes of the ID3 header.\n      // The most significant bit of each byte is dropped and the\n      // results concatenated to recover the actual value.\n      tagSize = parseSyncSafeInteger(chunk.data.subarray(6, 10));\n\n      // ID3 reports the tag size excluding the header but it's more\n      // convenient for our comparisons to include it\n      tagSize += 10;\n    }\n\n    // if the entire frame has not arrived, wait for more data\n    if (bufferSize < tagSize) {\n      return;\n    }\n\n    // collect the entire frame so it can be parsed\n    tag = {\n      data: new Uint8Array(tagSize),\n      frames: [],\n      pts: buffer[0].pts,\n      dts: buffer[0].dts\n    };\n    for (i = 0; i < tagSize;) {\n      tag.data.set(buffer[0].data.subarray(0, tagSize - i), i);\n      i += buffer[0].data.byteLength;\n      bufferSize -= buffer[0].data.byteLength;\n      buffer.shift();\n    }\n\n    // find the start of the first frame and the end of the tag\n    frameStart = 10;\n    if (tag.data[5] & 0x40) {\n      // advance the frame start past the extended header\n      frameStart += 4; // header size field\n      frameStart += parseSyncSafeInteger(tag.data.subarray(10, 14));\n\n      // clip any padding off the end\n      tagSize -= parseSyncSafeInteger(tag.data.subarray(16, 20));\n    }\n\n    // parse one or more ID3 frames\n    // http://id3.org/id3v2.3.0#ID3v2_frame_overview\n    do {\n      // determine the number of bytes in this frame\n      frameSize = parseSyncSafeInteger(tag.data.subarray(frameStart + 4, frameStart + 8));\n      if (frameSize < 1) {\n         // eslint-disable-next-line no-console\n        return console.log('Malformed ID3 frame encountered. Skipping metadata parsing.');\n      }\n      frameHeader = String.fromCharCode(tag.data[frameStart],\n                                        tag.data[frameStart + 1],\n                                        tag.data[frameStart + 2],\n                                        tag.data[frameStart + 3]);\n\n\n      frame = {\n        id: frameHeader,\n        data: tag.data.subarray(frameStart + 10, frameStart + frameSize + 10)\n      };\n      frame.key = frame.id;\n      if (tagParsers[frame.id]) {\n        tagParsers[frame.id](frame);\n\n        // handle the special PRIV frame used to indicate the start\n        // time for raw AAC data\n        if (frame.owner === 'com.apple.streaming.transportStreamTimestamp') {\n          var\n            d = frame.data,\n            size = ((d[3] & 0x01)  << 30) |\n                   (d[4]  << 22) |\n                   (d[5] << 14) |\n                   (d[6] << 6) |\n                   (d[7] >>> 2);\n\n          size *= 4;\n          size += d[7] & 0x03;\n          frame.timeStamp = size;\n          // in raw AAC, all subsequent data will be timestamped based\n          // on the value of this frame\n          // we couldn't have known the appropriate pts and dts before\n          // parsing this ID3 tag so set those values now\n          if (tag.pts === undefined && tag.dts === undefined) {\n            tag.pts = frame.timeStamp;\n            tag.dts = frame.timeStamp;\n          }\n          this.trigger('timestamp', frame);\n        }\n      }\n      tag.frames.push(frame);\n\n      frameStart += 10; // advance past the frame header\n      frameStart += frameSize; // advance past the frame body\n    } while (frameStart < tagSize);\n    this.trigger('data', tag);\n  };\n};\nMetadataStream.prototype = new Stream();\n\nmodule.exports = MetadataStream;\n\n},{\"../utils/stream\":62,\"./stream-types\":53}],52:[function(require,module,exports){\n/**\n * mux.js\n *\n * Copyright (c) 2016 Brightcove\n * All rights reserved.\n *\n * Utilities to detect basic properties and metadata about TS Segments.\n */\n'use strict';\n\nvar StreamTypes = require('./stream-types.js');\n\nvar parsePid = function(packet) {\n  var pid = packet[1] & 0x1f;\n  pid <<= 8;\n  pid |= packet[2];\n  return pid;\n};\n\nvar parsePayloadUnitStartIndicator = function(packet) {\n  return !!(packet[1] & 0x40);\n};\n\nvar parseAdaptionField = function(packet) {\n  var offset = 0;\n  // if an adaption field is present, its length is specified by the\n  // fifth byte of the TS packet header. The adaptation field is\n  // used to add stuffing to PES packets that don't fill a complete\n  // TS packet, and to specify some forms of timing and control data\n  // that we do not currently use.\n  if (((packet[3] & 0x30) >>> 4) > 0x01) {\n    offset += packet[4] + 1;\n  }\n  return offset;\n};\n\nvar parseType = function(packet, pmtPid) {\n  var pid = parsePid(packet);\n  if (pid === 0) {\n    return 'pat';\n  } else if (pid === pmtPid) {\n    return 'pmt';\n  } else if (pmtPid) {\n    return 'pes';\n  }\n  return null;\n};\n\nvar parsePat = function(packet) {\n  var pusi = parsePayloadUnitStartIndicator(packet);\n  var offset = 4 + parseAdaptionField(packet);\n\n  if (pusi) {\n    offset += packet[offset] + 1;\n  }\n\n  return (packet[offset + 10] & 0x1f) << 8 | packet[offset + 11];\n};\n\nvar parsePmt = function(packet) {\n  var programMapTable = {};\n  var pusi = parsePayloadUnitStartIndicator(packet);\n  var payloadOffset = 4 + parseAdaptionField(packet);\n\n  if (pusi) {\n    payloadOffset += packet[payloadOffset] + 1;\n  }\n\n  // PMTs can be sent ahead of the time when they should actually\n  // take effect. We don't believe this should ever be the case\n  // for HLS but we'll ignore \"forward\" PMT declarations if we see\n  // them. Future PMT declarations have the current_next_indicator\n  // set to zero.\n  if (!(packet[payloadOffset + 5] & 0x01)) {\n    return;\n  }\n\n  var sectionLength, tableEnd, programInfoLength;\n  // the mapping table ends at the end of the current section\n  sectionLength = (packet[payloadOffset + 1] & 0x0f) << 8 | packet[payloadOffset + 2];\n  tableEnd = 3 + sectionLength - 4;\n\n  // to determine where the table is, we have to figure out how\n  // long the program info descriptors are\n  programInfoLength = (packet[payloadOffset + 10] & 0x0f) << 8 | packet[payloadOffset + 11];\n\n  // advance the offset to the first entry in the mapping table\n  var offset = 12 + programInfoLength;\n  while (offset < tableEnd) {\n    var i = payloadOffset + offset;\n    // add an entry that maps the elementary_pid to the stream_type\n    programMapTable[(packet[i + 1] & 0x1F) << 8 | packet[i + 2]] = packet[i];\n\n    // move to the next table entry\n    // skip past the elementary stream descriptors, if present\n    offset += ((packet[i + 3] & 0x0F) << 8 | packet[i + 4]) + 5;\n  }\n  return programMapTable;\n};\n\nvar parsePesType = function(packet, programMapTable) {\n  var pid = parsePid(packet);\n  var type = programMapTable[pid];\n  switch (type) {\n    case StreamTypes.H264_STREAM_TYPE:\n      return 'video';\n    case StreamTypes.ADTS_STREAM_TYPE:\n      return 'audio';\n    case StreamTypes.METADATA_STREAM_TYPE:\n      return 'timed-metadata';\n    default:\n      return null;\n  }\n};\n\nvar parsePesTime = function(packet) {\n  var pusi = parsePayloadUnitStartIndicator(packet);\n  if (!pusi) {\n    return null;\n  }\n\n  var offset = 4 + parseAdaptionField(packet);\n\n  if (offset >= packet.byteLength) {\n    // From the H 222.0 MPEG-TS spec\n    // \"For transport stream packets carrying PES packets, stuffing is needed when there\n    //  is insufficient PES packet data to completely fill the transport stream packet\n    //  payload bytes. Stuffing is accomplished by defining an adaptation field longer than\n    //  the sum of the lengths of the data elements in it, so that the payload bytes\n    //  remaining after the adaptation field exactly accommodates the available PES packet\n    //  data.\"\n    //\n    // If the offset is >= the length of the packet, then the packet contains no data\n    // and instead is just adaption field stuffing bytes\n    return null;\n  }\n\n  var pes = null;\n  var ptsDtsFlags;\n\n  // PES packets may be annotated with a PTS value, or a PTS value\n  // and a DTS value. Determine what combination of values is\n  // available to work with.\n  ptsDtsFlags = packet[offset + 7];\n\n  // PTS and DTS are normally stored as a 33-bit number.  Javascript\n  // performs all bitwise operations on 32-bit integers but javascript\n  // supports a much greater range (52-bits) of integer using standard\n  // mathematical operations.\n  // We construct a 31-bit value using bitwise operators over the 31\n  // most significant bits and then multiply by 4 (equal to a left-shift\n  // of 2) before we add the final 2 least significant bits of the\n  // timestamp (equal to an OR.)\n  if (ptsDtsFlags & 0xC0) {\n    pes = {};\n    // the PTS and DTS are not written out directly. For information\n    // on how they are encoded, see\n    // http://dvd.sourceforge.net/dvdinfo/pes-hdr.html\n    pes.pts = (packet[offset + 9] & 0x0E) << 27 |\n      (packet[offset + 10] & 0xFF) << 20 |\n      (packet[offset + 11] & 0xFE) << 12 |\n      (packet[offset + 12] & 0xFF) <<  5 |\n      (packet[offset + 13] & 0xFE) >>>  3;\n    pes.pts *= 4; // Left shift by 2\n    pes.pts += (packet[offset + 13] & 0x06) >>> 1; // OR by the two LSBs\n    pes.dts = pes.pts;\n    if (ptsDtsFlags & 0x40) {\n      pes.dts = (packet[offset + 14] & 0x0E) << 27 |\n        (packet[offset + 15] & 0xFF) << 20 |\n        (packet[offset + 16] & 0xFE) << 12 |\n        (packet[offset + 17] & 0xFF) << 5 |\n        (packet[offset + 18] & 0xFE) >>> 3;\n      pes.dts *= 4; // Left shift by 2\n      pes.dts += (packet[offset + 18] & 0x06) >>> 1; // OR by the two LSBs\n    }\n  }\n  return pes;\n};\n\nvar parseNalUnitType = function(type) {\n  switch (type) {\n    case 0x05:\n      return 'slice_layer_without_partitioning_rbsp_idr';\n    case 0x06:\n      return 'sei_rbsp';\n    case 0x07:\n      return 'seq_parameter_set_rbsp';\n    case 0x08:\n      return 'pic_parameter_set_rbsp';\n    case 0x09:\n      return 'access_unit_delimiter_rbsp';\n    default:\n      return null;\n  }\n};\n\nvar videoPacketContainsKeyFrame = function(packet) {\n  var offset = 4 + parseAdaptionField(packet);\n  var frameBuffer = packet.subarray(offset);\n  var frameI = 0;\n  var frameSyncPoint = 0;\n  var foundKeyFrame = false;\n  var nalType;\n\n  // advance the sync point to a NAL start, if necessary\n  for (; frameSyncPoint < frameBuffer.byteLength - 3; frameSyncPoint++) {\n    if (frameBuffer[frameSyncPoint + 2] === 1) {\n      // the sync point is properly aligned\n      frameI = frameSyncPoint + 5;\n      break;\n    }\n  }\n\n  while (frameI < frameBuffer.byteLength) {\n    // look at the current byte to determine if we've hit the end of\n    // a NAL unit boundary\n    switch (frameBuffer[frameI]) {\n    case 0:\n      // skip past non-sync sequences\n      if (frameBuffer[frameI - 1] !== 0) {\n        frameI += 2;\n        break;\n      } else if (frameBuffer[frameI - 2] !== 0) {\n        frameI++;\n        break;\n      }\n\n      if (frameSyncPoint + 3 !== frameI - 2) {\n        nalType = parseNalUnitType(frameBuffer[frameSyncPoint + 3] & 0x1f);\n        if (nalType === 'slice_layer_without_partitioning_rbsp_idr') {\n          foundKeyFrame = true;\n        }\n      }\n\n      // drop trailing zeroes\n      do {\n        frameI++;\n      } while (frameBuffer[frameI] !== 1 && frameI < frameBuffer.length);\n      frameSyncPoint = frameI - 2;\n      frameI += 3;\n      break;\n    case 1:\n      // skip past non-sync sequences\n      if (frameBuffer[frameI - 1] !== 0 ||\n          frameBuffer[frameI - 2] !== 0) {\n        frameI += 3;\n        break;\n      }\n\n      nalType = parseNalUnitType(frameBuffer[frameSyncPoint + 3] & 0x1f);\n      if (nalType === 'slice_layer_without_partitioning_rbsp_idr') {\n        foundKeyFrame = true;\n      }\n      frameSyncPoint = frameI - 2;\n      frameI += 3;\n      break;\n    default:\n      // the current byte isn't a one or zero, so it cannot be part\n      // of a sync sequence\n      frameI += 3;\n      break;\n    }\n  }\n  frameBuffer = frameBuffer.subarray(frameSyncPoint);\n  frameI -= frameSyncPoint;\n  frameSyncPoint = 0;\n  // parse the final nal\n  if (frameBuffer && frameBuffer.byteLength > 3) {\n    nalType = parseNalUnitType(frameBuffer[frameSyncPoint + 3] & 0x1f);\n    if (nalType === 'slice_layer_without_partitioning_rbsp_idr') {\n      foundKeyFrame = true;\n    }\n  }\n\n  return foundKeyFrame;\n};\n\n\nmodule.exports = {\n  parseType: parseType,\n  parsePat: parsePat,\n  parsePmt: parsePmt,\n  parsePayloadUnitStartIndicator: parsePayloadUnitStartIndicator,\n  parsePesType: parsePesType,\n  parsePesTime: parsePesTime,\n  videoPacketContainsKeyFrame: videoPacketContainsKeyFrame\n};\n\n},{\"./stream-types.js\":53}],53:[function(require,module,exports){\n'use strict';\n\nmodule.exports = {\n  H264_STREAM_TYPE: 0x1B,\n  ADTS_STREAM_TYPE: 0x0F,\n  METADATA_STREAM_TYPE: 0x15\n};\n\n},{}],54:[function(require,module,exports){\n/**\n * mux.js\n *\n * Copyright (c) 2016 Brightcove\n * All rights reserved.\n *\n * Accepts program elementary stream (PES) data events and corrects\n * decode and presentation time stamps to account for a rollover\n * of the 33 bit value.\n */\n\n'use strict';\n\nvar Stream = require('../utils/stream');\n\nvar MAX_TS = 8589934592;\n\nvar RO_THRESH = 4294967296;\n\nvar handleRollover = function(value, reference) {\n  var direction = 1;\n\n  if (value > reference) {\n    // If the current timestamp value is greater than our reference timestamp and we detect a\n    // timestamp rollover, this means the roll over is happening in the opposite direction.\n    // Example scenario: Enter a long stream/video just after a rollover occurred. The reference\n    // point will be set to a small number, e.g. 1. The user then seeks backwards over the\n    // rollover point. In loading this segment, the timestamp values will be very large,\n    // e.g. 2^33 - 1. Since this comes before the data we loaded previously, we want to adjust\n    // the time stamp to be `value - 2^33`.\n    direction = -1;\n  }\n\n  // Note: A seek forwards or back that is greater than the RO_THRESH (2^32, ~13 hours) will\n  // cause an incorrect adjustment.\n  while (Math.abs(reference - value) > RO_THRESH) {\n    value += (direction * MAX_TS);\n  }\n\n  return value;\n};\n\nvar TimestampRolloverStream = function(type) {\n  var lastDTS, referenceDTS;\n\n  TimestampRolloverStream.prototype.init.call(this);\n\n  this.type_ = type;\n\n  this.push = function(data) {\n    if (data.type !== this.type_) {\n      return;\n    }\n\n    if (referenceDTS === undefined) {\n      referenceDTS = data.dts;\n    }\n\n    data.dts = handleRollover(data.dts, referenceDTS);\n    data.pts = handleRollover(data.pts, referenceDTS);\n\n    lastDTS = data.dts;\n\n    this.trigger('data', data);\n  };\n\n  this.flush = function() {\n    referenceDTS = lastDTS;\n    this.trigger('done');\n  };\n\n  this.discontinuity = function() {\n    referenceDTS = void 0;\n    lastDTS = void 0;\n  };\n\n};\n\nTimestampRolloverStream.prototype = new Stream();\n\nmodule.exports = {\n  TimestampRolloverStream: TimestampRolloverStream,\n  handleRollover: handleRollover\n};\n\n},{\"../utils/stream\":62}],55:[function(require,module,exports){\nmodule.exports = {\n  generator: require('./mp4-generator'),\n  Transmuxer: require('./transmuxer').Transmuxer,\n  AudioSegmentStream: require('./transmuxer').AudioSegmentStream,\n  VideoSegmentStream: require('./transmuxer').VideoSegmentStream\n};\n\n},{\"./mp4-generator\":56,\"./transmuxer\":58}],56:[function(require,module,exports){\n/**\n * mux.js\n *\n * Copyright (c) 2015 Brightcove\n * All rights reserved.\n *\n * Functions that generate fragmented MP4s suitable for use with Media\n * Source Extensions.\n */\n'use strict';\n\nvar UINT32_MAX = Math.pow(2, 32) - 1;\n\nvar box, dinf, esds, ftyp, mdat, mfhd, minf, moof, moov, mvex, mvhd,\n    trak, tkhd, mdia, mdhd, hdlr, sdtp, stbl, stsd, traf, trex,\n    trun, types, MAJOR_BRAND, MINOR_VERSION, AVC1_BRAND, VIDEO_HDLR,\n    AUDIO_HDLR, HDLR_TYPES, VMHD, SMHD, DREF, STCO, STSC, STSZ, STTS;\n\n// pre-calculate constants\n(function() {\n  var i;\n  types = {\n    avc1: [], // codingname\n    avcC: [],\n    btrt: [],\n    dinf: [],\n    dref: [],\n    esds: [],\n    ftyp: [],\n    hdlr: [],\n    mdat: [],\n    mdhd: [],\n    mdia: [],\n    mfhd: [],\n    minf: [],\n    moof: [],\n    moov: [],\n    mp4a: [], // codingname\n    mvex: [],\n    mvhd: [],\n    sdtp: [],\n    smhd: [],\n    stbl: [],\n    stco: [],\n    stsc: [],\n    stsd: [],\n    stsz: [],\n    stts: [],\n    styp: [],\n    tfdt: [],\n    tfhd: [],\n    traf: [],\n    trak: [],\n    trun: [],\n    trex: [],\n    tkhd: [],\n    vmhd: []\n  };\n\n  // In environments where Uint8Array is undefined (e.g., IE8), skip set up so that we\n  // don't throw an error\n  if (typeof Uint8Array === 'undefined') {\n    return;\n  }\n\n  for (i in types) {\n    if (types.hasOwnProperty(i)) {\n      types[i] = [\n        i.charCodeAt(0),\n        i.charCodeAt(1),\n        i.charCodeAt(2),\n        i.charCodeAt(3)\n      ];\n    }\n  }\n\n  MAJOR_BRAND = new Uint8Array([\n    'i'.charCodeAt(0),\n    's'.charCodeAt(0),\n    'o'.charCodeAt(0),\n    'm'.charCodeAt(0)\n  ]);\n  AVC1_BRAND = new Uint8Array([\n    'a'.charCodeAt(0),\n    'v'.charCodeAt(0),\n    'c'.charCodeAt(0),\n    '1'.charCodeAt(0)\n  ]);\n  MINOR_VERSION = new Uint8Array([0, 0, 0, 1]);\n  VIDEO_HDLR = new Uint8Array([\n    0x00, // version 0\n    0x00, 0x00, 0x00, // flags\n    0x00, 0x00, 0x00, 0x00, // pre_defined\n    0x76, 0x69, 0x64, 0x65, // handler_type: 'vide'\n    0x00, 0x00, 0x00, 0x00, // reserved\n    0x00, 0x00, 0x00, 0x00, // reserved\n    0x00, 0x00, 0x00, 0x00, // reserved\n    0x56, 0x69, 0x64, 0x65,\n    0x6f, 0x48, 0x61, 0x6e,\n    0x64, 0x6c, 0x65, 0x72, 0x00 // name: 'VideoHandler'\n  ]);\n  AUDIO_HDLR = new Uint8Array([\n    0x00, // version 0\n    0x00, 0x00, 0x00, // flags\n    0x00, 0x00, 0x00, 0x00, // pre_defined\n    0x73, 0x6f, 0x75, 0x6e, // handler_type: 'soun'\n    0x00, 0x00, 0x00, 0x00, // reserved\n    0x00, 0x00, 0x00, 0x00, // reserved\n    0x00, 0x00, 0x00, 0x00, // reserved\n    0x53, 0x6f, 0x75, 0x6e,\n    0x64, 0x48, 0x61, 0x6e,\n    0x64, 0x6c, 0x65, 0x72, 0x00 // name: 'SoundHandler'\n  ]);\n  HDLR_TYPES = {\n    video: VIDEO_HDLR,\n    audio: AUDIO_HDLR\n  };\n  DREF = new Uint8Array([\n    0x00, // version 0\n    0x00, 0x00, 0x00, // flags\n    0x00, 0x00, 0x00, 0x01, // entry_count\n    0x00, 0x00, 0x00, 0x0c, // entry_size\n    0x75, 0x72, 0x6c, 0x20, // 'url' type\n    0x00, // version 0\n    0x00, 0x00, 0x01 // entry_flags\n  ]);\n  SMHD = new Uint8Array([\n    0x00,             // version\n    0x00, 0x00, 0x00, // flags\n    0x00, 0x00,       // balance, 0 means centered\n    0x00, 0x00        // reserved\n  ]);\n  STCO = new Uint8Array([\n    0x00, // version\n    0x00, 0x00, 0x00, // flags\n    0x00, 0x00, 0x00, 0x00 // entry_count\n  ]);\n  STSC = STCO;\n  STSZ = new Uint8Array([\n    0x00, // version\n    0x00, 0x00, 0x00, // flags\n    0x00, 0x00, 0x00, 0x00, // sample_size\n    0x00, 0x00, 0x00, 0x00 // sample_count\n  ]);\n  STTS = STCO;\n  VMHD = new Uint8Array([\n    0x00, // version\n    0x00, 0x00, 0x01, // flags\n    0x00, 0x00, // graphicsmode\n    0x00, 0x00,\n    0x00, 0x00,\n    0x00, 0x00 // opcolor\n  ]);\n}());\n\nbox = function(type) {\n  var\n    payload = [],\n    size = 0,\n    i,\n    result,\n    view;\n\n  for (i = 1; i < arguments.length; i++) {\n    payload.push(arguments[i]);\n  }\n\n  i = payload.length;\n\n  // calculate the total size we need to allocate\n  while (i--) {\n    size += payload[i].byteLength;\n  }\n  result = new Uint8Array(size + 8);\n  view = new DataView(result.buffer, result.byteOffset, result.byteLength);\n  view.setUint32(0, result.byteLength);\n  result.set(type, 4);\n\n  // copy the payload into the result\n  for (i = 0, size = 8; i < payload.length; i++) {\n    result.set(payload[i], size);\n    size += payload[i].byteLength;\n  }\n  return result;\n};\n\ndinf = function() {\n  return box(types.dinf, box(types.dref, DREF));\n};\n\nesds = function(track) {\n  return box(types.esds, new Uint8Array([\n    0x00, // version\n    0x00, 0x00, 0x00, // flags\n\n    // ES_Descriptor\n    0x03, // tag, ES_DescrTag\n    0x19, // length\n    0x00, 0x00, // ES_ID\n    0x00, // streamDependenceFlag, URL_flag, reserved, streamPriority\n\n    // DecoderConfigDescriptor\n    0x04, // tag, DecoderConfigDescrTag\n    0x11, // length\n    0x40, // object type\n    0x15,  // streamType\n    0x00, 0x06, 0x00, // bufferSizeDB\n    0x00, 0x00, 0xda, 0xc0, // maxBitrate\n    0x00, 0x00, 0xda, 0xc0, // avgBitrate\n\n    // DecoderSpecificInfo\n    0x05, // tag, DecoderSpecificInfoTag\n    0x02, // length\n    // ISO/IEC 14496-3, AudioSpecificConfig\n    // for samplingFrequencyIndex see ISO/IEC 13818-7:2006, 8.1.3.2.2, Table 35\n    (track.audioobjecttype << 3) | (track.samplingfrequencyindex >>> 1),\n    (track.samplingfrequencyindex << 7) | (track.channelcount << 3),\n    0x06, 0x01, 0x02 // GASpecificConfig\n  ]));\n};\n\nftyp = function() {\n  return box(types.ftyp, MAJOR_BRAND, MINOR_VERSION, MAJOR_BRAND, AVC1_BRAND);\n};\n\nhdlr = function(type) {\n  return box(types.hdlr, HDLR_TYPES[type]);\n};\nmdat = function(data) {\n  return box(types.mdat, data);\n};\nmdhd = function(track) {\n  var result = new Uint8Array([\n    0x00,                   // version 0\n    0x00, 0x00, 0x00,       // flags\n    0x00, 0x00, 0x00, 0x02, // creation_time\n    0x00, 0x00, 0x00, 0x03, // modification_time\n    0x00, 0x01, 0x5f, 0x90, // timescale, 90,000 \"ticks\" per second\n\n    (track.duration >>> 24) & 0xFF,\n    (track.duration >>> 16) & 0xFF,\n    (track.duration >>>  8) & 0xFF,\n    track.duration & 0xFF,  // duration\n    0x55, 0xc4,             // 'und' language (undetermined)\n    0x00, 0x00\n  ]);\n\n  // Use the sample rate from the track metadata, when it is\n  // defined. The sample rate can be parsed out of an ADTS header, for\n  // instance.\n  if (track.samplerate) {\n    result[12] = (track.samplerate >>> 24) & 0xFF;\n    result[13] = (track.samplerate >>> 16) & 0xFF;\n    result[14] = (track.samplerate >>>  8) & 0xFF;\n    result[15] = (track.samplerate)        & 0xFF;\n  }\n\n  return box(types.mdhd, result);\n};\nmdia = function(track) {\n  return box(types.mdia, mdhd(track), hdlr(track.type), minf(track));\n};\nmfhd = function(sequenceNumber) {\n  return box(types.mfhd, new Uint8Array([\n    0x00,\n    0x00, 0x00, 0x00, // flags\n    (sequenceNumber & 0xFF000000) >> 24,\n    (sequenceNumber & 0xFF0000) >> 16,\n    (sequenceNumber & 0xFF00) >> 8,\n    sequenceNumber & 0xFF // sequence_number\n  ]));\n};\nminf = function(track) {\n  return box(types.minf,\n             track.type === 'video' ? box(types.vmhd, VMHD) : box(types.smhd, SMHD),\n             dinf(),\n             stbl(track));\n};\nmoof = function(sequenceNumber, tracks) {\n  var\n    trackFragments = [],\n    i = tracks.length;\n  // build traf boxes for each track fragment\n  while (i--) {\n    trackFragments[i] = traf(tracks[i]);\n  }\n  return box.apply(null, [\n    types.moof,\n    mfhd(sequenceNumber)\n  ].concat(trackFragments));\n};\n/**\n * Returns a movie box.\n * @param tracks {array} the tracks associated with this movie\n * @see ISO/IEC 14496-12:2012(E), section 8.2.1\n */\nmoov = function(tracks) {\n  var\n    i = tracks.length,\n    boxes = [];\n\n  while (i--) {\n    boxes[i] = trak(tracks[i]);\n  }\n\n  return box.apply(null, [types.moov, mvhd(0xffffffff)].concat(boxes).concat(mvex(tracks)));\n};\nmvex = function(tracks) {\n  var\n    i = tracks.length,\n    boxes = [];\n\n  while (i--) {\n    boxes[i] = trex(tracks[i]);\n  }\n  return box.apply(null, [types.mvex].concat(boxes));\n};\nmvhd = function(duration) {\n  var\n    bytes = new Uint8Array([\n      0x00, // version 0\n      0x00, 0x00, 0x00, // flags\n      0x00, 0x00, 0x00, 0x01, // creation_time\n      0x00, 0x00, 0x00, 0x02, // modification_time\n      0x00, 0x01, 0x5f, 0x90, // timescale, 90,000 \"ticks\" per second\n      (duration & 0xFF000000) >> 24,\n      (duration & 0xFF0000) >> 16,\n      (duration & 0xFF00) >> 8,\n      duration & 0xFF, // duration\n      0x00, 0x01, 0x00, 0x00, // 1.0 rate\n      0x01, 0x00, // 1.0 volume\n      0x00, 0x00, // reserved\n      0x00, 0x00, 0x00, 0x00, // reserved\n      0x00, 0x00, 0x00, 0x00, // reserved\n      0x00, 0x01, 0x00, 0x00,\n      0x00, 0x00, 0x00, 0x00,\n      0x00, 0x00, 0x00, 0x00,\n      0x00, 0x00, 0x00, 0x00,\n      0x00, 0x01, 0x00, 0x00,\n      0x00, 0x00, 0x00, 0x00,\n      0x00, 0x00, 0x00, 0x00,\n      0x00, 0x00, 0x00, 0x00,\n      0x40, 0x00, 0x00, 0x00, // transformation: unity matrix\n      0x00, 0x00, 0x00, 0x00,\n      0x00, 0x00, 0x00, 0x00,\n      0x00, 0x00, 0x00, 0x00,\n      0x00, 0x00, 0x00, 0x00,\n      0x00, 0x00, 0x00, 0x00,\n      0x00, 0x00, 0x00, 0x00, // pre_defined\n      0xff, 0xff, 0xff, 0xff // next_track_ID\n    ]);\n  return box(types.mvhd, bytes);\n};\n\nsdtp = function(track) {\n  var\n    samples = track.samples || [],\n    bytes = new Uint8Array(4 + samples.length),\n    flags,\n    i;\n\n  // leave the full box header (4 bytes) all zero\n\n  // write the sample table\n  for (i = 0; i < samples.length; i++) {\n    flags = samples[i].flags;\n\n    bytes[i + 4] = (flags.dependsOn << 4) |\n      (flags.isDependedOn << 2) |\n      (flags.hasRedundancy);\n  }\n\n  return box(types.sdtp,\n             bytes);\n};\n\nstbl = function(track) {\n  return box(types.stbl,\n             stsd(track),\n             box(types.stts, STTS),\n             box(types.stsc, STSC),\n             box(types.stsz, STSZ),\n             box(types.stco, STCO));\n};\n\n(function() {\n  var videoSample, audioSample;\n\n  stsd = function(track) {\n\n    return box(types.stsd, new Uint8Array([\n      0x00, // version 0\n      0x00, 0x00, 0x00, // flags\n      0x00, 0x00, 0x00, 0x01\n    ]), track.type === 'video' ? videoSample(track) : audioSample(track));\n  };\n\n  videoSample = function(track) {\n    var\n      sps = track.sps || [],\n      pps = track.pps || [],\n      sequenceParameterSets = [],\n      pictureParameterSets = [],\n      i;\n\n    // assemble the SPSs\n    for (i = 0; i < sps.length; i++) {\n      sequenceParameterSets.push((sps[i].byteLength & 0xFF00) >>> 8);\n      sequenceParameterSets.push((sps[i].byteLength & 0xFF)); // sequenceParameterSetLength\n      sequenceParameterSets = sequenceParameterSets.concat(Array.prototype.slice.call(sps[i])); // SPS\n    }\n\n    // assemble the PPSs\n    for (i = 0; i < pps.length; i++) {\n      pictureParameterSets.push((pps[i].byteLength & 0xFF00) >>> 8);\n      pictureParameterSets.push((pps[i].byteLength & 0xFF));\n      pictureParameterSets = pictureParameterSets.concat(Array.prototype.slice.call(pps[i]));\n    }\n\n    return box(types.avc1, new Uint8Array([\n      0x00, 0x00, 0x00,\n      0x00, 0x00, 0x00, // reserved\n      0x00, 0x01, // data_reference_index\n      0x00, 0x00, // pre_defined\n      0x00, 0x00, // reserved\n      0x00, 0x00, 0x00, 0x00,\n      0x00, 0x00, 0x00, 0x00,\n      0x00, 0x00, 0x00, 0x00, // pre_defined\n      (track.width & 0xff00) >> 8,\n      track.width & 0xff, // width\n      (track.height & 0xff00) >> 8,\n      track.height & 0xff, // height\n      0x00, 0x48, 0x00, 0x00, // horizresolution\n      0x00, 0x48, 0x00, 0x00, // vertresolution\n      0x00, 0x00, 0x00, 0x00, // reserved\n      0x00, 0x01, // frame_count\n      0x13,\n      0x76, 0x69, 0x64, 0x65,\n      0x6f, 0x6a, 0x73, 0x2d,\n      0x63, 0x6f, 0x6e, 0x74,\n      0x72, 0x69, 0x62, 0x2d,\n      0x68, 0x6c, 0x73, 0x00,\n      0x00, 0x00, 0x00, 0x00,\n      0x00, 0x00, 0x00, 0x00,\n      0x00, 0x00, 0x00, // compressorname\n      0x00, 0x18, // depth = 24\n      0x11, 0x11 // pre_defined = -1\n    ]), box(types.avcC, new Uint8Array([\n      0x01, // configurationVersion\n      track.profileIdc, // AVCProfileIndication\n      track.profileCompatibility, // profile_compatibility\n      track.levelIdc, // AVCLevelIndication\n      0xff // lengthSizeMinusOne, hard-coded to 4 bytes\n    ].concat([\n      sps.length // numOfSequenceParameterSets\n    ]).concat(sequenceParameterSets).concat([\n      pps.length // numOfPictureParameterSets\n    ]).concat(pictureParameterSets))), // \"PPS\"\n            box(types.btrt, new Uint8Array([\n              0x00, 0x1c, 0x9c, 0x80, // bufferSizeDB\n              0x00, 0x2d, 0xc6, 0xc0, // maxBitrate\n              0x00, 0x2d, 0xc6, 0xc0\n            ])) // avgBitrate\n              );\n  };\n\n  audioSample = function(track) {\n    return box(types.mp4a, new Uint8Array([\n\n      // SampleEntry, ISO/IEC 14496-12\n      0x00, 0x00, 0x00,\n      0x00, 0x00, 0x00, // reserved\n      0x00, 0x01, // data_reference_index\n\n      // AudioSampleEntry, ISO/IEC 14496-12\n      0x00, 0x00, 0x00, 0x00, // reserved\n      0x00, 0x00, 0x00, 0x00, // reserved\n      (track.channelcount & 0xff00) >> 8,\n      (track.channelcount & 0xff), // channelcount\n\n      (track.samplesize & 0xff00) >> 8,\n      (track.samplesize & 0xff), // samplesize\n      0x00, 0x00, // pre_defined\n      0x00, 0x00, // reserved\n\n      (track.samplerate & 0xff00) >> 8,\n      (track.samplerate & 0xff),\n      0x00, 0x00 // samplerate, 16.16\n\n      // MP4AudioSampleEntry, ISO/IEC 14496-14\n    ]), esds(track));\n  };\n}());\n\ntkhd = function(track) {\n  var result = new Uint8Array([\n    0x00, // version 0\n    0x00, 0x00, 0x07, // flags\n    0x00, 0x00, 0x00, 0x00, // creation_time\n    0x00, 0x00, 0x00, 0x00, // modification_time\n    (track.id & 0xFF000000) >> 24,\n    (track.id & 0xFF0000) >> 16,\n    (track.id & 0xFF00) >> 8,\n    track.id & 0xFF, // track_ID\n    0x00, 0x00, 0x00, 0x00, // reserved\n    (track.duration & 0xFF000000) >> 24,\n    (track.duration & 0xFF0000) >> 16,\n    (track.duration & 0xFF00) >> 8,\n    track.duration & 0xFF, // duration\n    0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00, // reserved\n    0x00, 0x00, // layer\n    0x00, 0x00, // alternate_group\n    0x01, 0x00, // non-audio track volume\n    0x00, 0x00, // reserved\n    0x00, 0x01, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00,\n    0x00, 0x01, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00,\n    0x40, 0x00, 0x00, 0x00, // transformation: unity matrix\n    (track.width & 0xFF00) >> 8,\n    track.width & 0xFF,\n    0x00, 0x00, // width\n    (track.height & 0xFF00) >> 8,\n    track.height & 0xFF,\n    0x00, 0x00 // height\n  ]);\n\n  return box(types.tkhd, result);\n};\n\n/**\n * Generate a track fragment (traf) box. A traf box collects metadata\n * about tracks in a movie fragment (moof) box.\n */\ntraf = function(track) {\n  var trackFragmentHeader, trackFragmentDecodeTime, trackFragmentRun,\n      sampleDependencyTable, dataOffset,\n      upperWordBaseMediaDecodeTime, lowerWordBaseMediaDecodeTime;\n\n  trackFragmentHeader = box(types.tfhd, new Uint8Array([\n    0x00, // version 0\n    0x00, 0x00, 0x3a, // flags\n    (track.id & 0xFF000000) >> 24,\n    (track.id & 0xFF0000) >> 16,\n    (track.id & 0xFF00) >> 8,\n    (track.id & 0xFF), // track_ID\n    0x00, 0x00, 0x00, 0x01, // sample_description_index\n    0x00, 0x00, 0x00, 0x00, // default_sample_duration\n    0x00, 0x00, 0x00, 0x00, // default_sample_size\n    0x00, 0x00, 0x00, 0x00  // default_sample_flags\n  ]));\n\n  upperWordBaseMediaDecodeTime = Math.floor(track.baseMediaDecodeTime / (UINT32_MAX + 1));\n  lowerWordBaseMediaDecodeTime = Math.floor(track.baseMediaDecodeTime % (UINT32_MAX + 1));\n\n  trackFragmentDecodeTime = box(types.tfdt, new Uint8Array([\n    0x01, // version 1\n    0x00, 0x00, 0x00, // flags\n    // baseMediaDecodeTime\n    (upperWordBaseMediaDecodeTime >>> 24) & 0xFF,\n    (upperWordBaseMediaDecodeTime >>> 16) & 0xFF,\n    (upperWordBaseMediaDecodeTime >>>  8) & 0xFF,\n    upperWordBaseMediaDecodeTime & 0xFF,\n    (lowerWordBaseMediaDecodeTime >>> 24) & 0xFF,\n    (lowerWordBaseMediaDecodeTime >>> 16) & 0xFF,\n    (lowerWordBaseMediaDecodeTime >>>  8) & 0xFF,\n    lowerWordBaseMediaDecodeTime & 0xFF\n  ]));\n\n  // the data offset specifies the number of bytes from the start of\n  // the containing moof to the first payload byte of the associated\n  // mdat\n  dataOffset = (32 + // tfhd\n                20 + // tfdt\n                8 +  // traf header\n                16 + // mfhd\n                8 +  // moof header\n                8);  // mdat header\n\n  // audio tracks require less metadata\n  if (track.type === 'audio') {\n    trackFragmentRun = trun(track, dataOffset);\n    return box(types.traf,\n               trackFragmentHeader,\n               trackFragmentDecodeTime,\n               trackFragmentRun);\n  }\n\n  // video tracks should contain an independent and disposable samples\n  // box (sdtp)\n  // generate one and adjust offsets to match\n  sampleDependencyTable = sdtp(track);\n  trackFragmentRun = trun(track,\n                          sampleDependencyTable.length + dataOffset);\n  return box(types.traf,\n             trackFragmentHeader,\n             trackFragmentDecodeTime,\n             trackFragmentRun,\n             sampleDependencyTable);\n};\n\n/**\n * Generate a track box.\n * @param track {object} a track definition\n * @return {Uint8Array} the track box\n */\ntrak = function(track) {\n  track.duration = track.duration || 0xffffffff;\n  return box(types.trak,\n             tkhd(track),\n             mdia(track));\n};\n\ntrex = function(track) {\n  var result = new Uint8Array([\n    0x00, // version 0\n    0x00, 0x00, 0x00, // flags\n    (track.id & 0xFF000000) >> 24,\n    (track.id & 0xFF0000) >> 16,\n    (track.id & 0xFF00) >> 8,\n    (track.id & 0xFF), // track_ID\n    0x00, 0x00, 0x00, 0x01, // default_sample_description_index\n    0x00, 0x00, 0x00, 0x00, // default_sample_duration\n    0x00, 0x00, 0x00, 0x00, // default_sample_size\n    0x00, 0x01, 0x00, 0x01 // default_sample_flags\n  ]);\n  // the last two bytes of default_sample_flags is the sample\n  // degradation priority, a hint about the importance of this sample\n  // relative to others. Lower the degradation priority for all sample\n  // types other than video.\n  if (track.type !== 'video') {\n    result[result.length - 1] = 0x00;\n  }\n\n  return box(types.trex, result);\n};\n\n(function() {\n  var audioTrun, videoTrun, trunHeader;\n\n  // This method assumes all samples are uniform. That is, if a\n  // duration is present for the first sample, it will be present for\n  // all subsequent samples.\n  // see ISO/IEC 14496-12:2012, Section 8.8.8.1\n  trunHeader = function(samples, offset) {\n    var durationPresent = 0, sizePresent = 0,\n        flagsPresent = 0, compositionTimeOffset = 0;\n\n    // trun flag constants\n    if (samples.length) {\n      if (samples[0].duration !== undefined) {\n        durationPresent = 0x1;\n      }\n      if (samples[0].size !== undefined) {\n        sizePresent = 0x2;\n      }\n      if (samples[0].flags !== undefined) {\n        flagsPresent = 0x4;\n      }\n      if (samples[0].compositionTimeOffset !== undefined) {\n        compositionTimeOffset = 0x8;\n      }\n    }\n\n    return [\n      0x00, // version 0\n      0x00,\n      durationPresent | sizePresent | flagsPresent | compositionTimeOffset,\n      0x01, // flags\n      (samples.length & 0xFF000000) >>> 24,\n      (samples.length & 0xFF0000) >>> 16,\n      (samples.length & 0xFF00) >>> 8,\n      samples.length & 0xFF, // sample_count\n      (offset & 0xFF000000) >>> 24,\n      (offset & 0xFF0000) >>> 16,\n      (offset & 0xFF00) >>> 8,\n      offset & 0xFF // data_offset\n    ];\n  };\n\n  videoTrun = function(track, offset) {\n    var bytes, samples, sample, i;\n\n    samples = track.samples || [];\n    offset += 8 + 12 + (16 * samples.length);\n\n    bytes = trunHeader(samples, offset);\n\n    for (i = 0; i < samples.length; i++) {\n      sample = samples[i];\n      bytes = bytes.concat([\n        (sample.duration & 0xFF000000) >>> 24,\n        (sample.duration & 0xFF0000) >>> 16,\n        (sample.duration & 0xFF00) >>> 8,\n        sample.duration & 0xFF, // sample_duration\n        (sample.size & 0xFF000000) >>> 24,\n        (sample.size & 0xFF0000) >>> 16,\n        (sample.size & 0xFF00) >>> 8,\n        sample.size & 0xFF, // sample_size\n        (sample.flags.isLeading << 2) | sample.flags.dependsOn,\n        (sample.flags.isDependedOn << 6) |\n          (sample.flags.hasRedundancy << 4) |\n          (sample.flags.paddingValue << 1) |\n          sample.flags.isNonSyncSample,\n        sample.flags.degradationPriority & 0xF0 << 8,\n        sample.flags.degradationPriority & 0x0F, // sample_flags\n        (sample.compositionTimeOffset & 0xFF000000) >>> 24,\n        (sample.compositionTimeOffset & 0xFF0000) >>> 16,\n        (sample.compositionTimeOffset & 0xFF00) >>> 8,\n        sample.compositionTimeOffset & 0xFF // sample_composition_time_offset\n      ]);\n    }\n    return box(types.trun, new Uint8Array(bytes));\n  };\n\n  audioTrun = function(track, offset) {\n    var bytes, samples, sample, i;\n\n    samples = track.samples || [];\n    offset += 8 + 12 + (8 * samples.length);\n\n    bytes = trunHeader(samples, offset);\n\n    for (i = 0; i < samples.length; i++) {\n      sample = samples[i];\n      bytes = bytes.concat([\n        (sample.duration & 0xFF000000) >>> 24,\n        (sample.duration & 0xFF0000) >>> 16,\n        (sample.duration & 0xFF00) >>> 8,\n        sample.duration & 0xFF, // sample_duration\n        (sample.size & 0xFF000000) >>> 24,\n        (sample.size & 0xFF0000) >>> 16,\n        (sample.size & 0xFF00) >>> 8,\n        sample.size & 0xFF]); // sample_size\n    }\n\n    return box(types.trun, new Uint8Array(bytes));\n  };\n\n  trun = function(track, offset) {\n    if (track.type === 'audio') {\n      return audioTrun(track, offset);\n    }\n\n    return videoTrun(track, offset);\n  };\n}());\n\nmodule.exports = {\n  ftyp: ftyp,\n  mdat: mdat,\n  moof: moof,\n  moov: moov,\n  initSegment: function(tracks) {\n    var\n      fileType = ftyp(),\n      movie = moov(tracks),\n      result;\n\n    result = new Uint8Array(fileType.byteLength + movie.byteLength);\n    result.set(fileType);\n    result.set(movie, fileType.byteLength);\n    return result;\n  }\n};\n\n},{}],57:[function(require,module,exports){\n/**\n * mux.js\n *\n * Copyright (c) 2015 Brightcove\n * All rights reserved.\n *\n * Utilities to detect basic properties and metadata about MP4s.\n */\n'use strict';\n\nvar findBox, parseType, timescale, startTime;\n\n// Find the data for a box specified by its path\nfindBox = function(data, path) {\n  var results = [],\n      i, size, type, end, subresults;\n\n  if (!path.length) {\n    // short-circuit the search for empty paths\n    return null;\n  }\n\n  for (i = 0; i < data.byteLength;) {\n    size  = data[i]     << 24;\n    size |= data[i + 1] << 16;\n    size |= data[i + 2] << 8;\n    size |= data[i + 3];\n\n    type = parseType(data.subarray(i + 4, i + 8));\n\n    end = size > 1 ? i + size : data.byteLength;\n\n    if (type === path[0]) {\n      if (path.length === 1) {\n        // this is the end of the path and we've found the box we were\n        // looking for\n        results.push(data.subarray(i + 8, end));\n      } else {\n        // recursively search for the next box along the path\n        subresults = findBox(data.subarray(i + 8, end), path.slice(1));\n        if (subresults.length) {\n          results = results.concat(subresults);\n        }\n      }\n    }\n    i = end;\n  }\n\n  // we've finished searching all of data\n  return results;\n};\n\n/**\n * Returns the string representation of an ASCII encoded four byte buffer.\n * @param buffer {Uint8Array} a four-byte buffer to translate\n * @return {string} the corresponding string\n */\nparseType = function(buffer) {\n  var result = '';\n  result += String.fromCharCode(buffer[0]);\n  result += String.fromCharCode(buffer[1]);\n  result += String.fromCharCode(buffer[2]);\n  result += String.fromCharCode(buffer[3]);\n  return result;\n};\n\n/**\n * Parses an MP4 initialization segment and extracts the timescale\n * values for any declared tracks. Timescale values indicate the\n * number of clock ticks per second to assume for time-based values\n * elsewhere in the MP4.\n *\n * To determine the start time of an MP4, you need two pieces of\n * information: the timescale unit and the earliest base media decode\n * time. Multiple timescales can be specified within an MP4 but the\n * base media decode time is always expressed in the timescale from\n * the media header box for the track:\n * ```\n * moov > trak > mdia > mdhd.timescale\n * ```\n * @param init {Uint8Array} the bytes of the init segment\n * @return {object} a hash of track ids to timescale values or null if\n * the init segment is malformed.\n */\ntimescale = function(init) {\n  var\n    result = {},\n    traks = findBox(init, ['moov', 'trak']);\n\n  // mdhd timescale\n  return traks.reduce(function(result, trak) {\n    var tkhd, version, index, id, mdhd;\n\n    tkhd = findBox(trak, ['tkhd'])[0];\n    if (!tkhd) {\n      return null;\n    }\n    version = tkhd[0];\n    index = version === 0 ? 12 : 20;\n    id = tkhd[index]     << 24 |\n         tkhd[index + 1] << 16 |\n         tkhd[index + 2] <<  8 |\n         tkhd[index + 3];\n\n    mdhd = findBox(trak, ['mdia', 'mdhd'])[0];\n    if (!mdhd) {\n      return null;\n    }\n    version = mdhd[0];\n    index = version === 0 ? 12 : 20;\n    result[id] = mdhd[index]     << 24 |\n                 mdhd[index + 1] << 16 |\n                 mdhd[index + 2] <<  8 |\n                 mdhd[index + 3];\n    return result;\n  }, result);\n};\n\n/**\n * Determine the base media decode start time, in seconds, for an MP4\n * fragment. If multiple fragments are specified, the earliest time is\n * returned.\n *\n * The base media decode time can be parsed from track fragment\n * metadata:\n * ```\n * moof > traf > tfdt.baseMediaDecodeTime\n * ```\n * It requires the timescale value from the mdhd to interpret.\n *\n * @param timescale {object} a hash of track ids to timescale values.\n * @return {number} the earliest base media decode start time for the\n * fragment, in seconds\n */\nstartTime = function(timescale, fragment) {\n  var trafs, baseTimes, result;\n\n  // we need info from two childrend of each track fragment box\n  trafs = findBox(fragment, ['moof', 'traf']);\n\n  // determine the start times for each track\n  baseTimes = [].concat.apply([], trafs.map(function(traf) {\n    return findBox(traf, ['tfhd']).map(function(tfhd) {\n      var id, scale, baseTime;\n\n      // get the track id from the tfhd\n      id = tfhd[4] << 24 |\n           tfhd[5] << 16 |\n           tfhd[6] << 8 |\n           tfhd[7];\n      // assume a 90kHz clock if no timescale was specified\n      scale = timescale[id] || 90e3;\n\n      // get the base media decode time from the tfdt\n      baseTime = findBox(traf, ['tfdt']).map(function(tfdt) {\n        var version, result;\n\n        version = tfdt[0];\n        result = tfdt[4] << 24 |\n                 tfdt[5] << 16 |\n                 tfdt[6] <<  8 |\n                 tfdt[7];\n        if (version ===  1) {\n          result *= Math.pow(2, 32);\n          result += tfdt[8]  << 24 |\n                    tfdt[9]  << 16 |\n                    tfdt[10] <<  8 |\n                    tfdt[11];\n        }\n        return result;\n      })[0];\n      baseTime = baseTime || Infinity;\n\n      // convert base time to seconds\n      return baseTime / scale;\n    });\n  }));\n\n  // return the minimum\n  result = Math.min.apply(null, baseTimes);\n  return isFinite(result) ? result : 0;\n};\n\nmodule.exports = {\n  parseType: parseType,\n  timescale: timescale,\n  startTime: startTime\n};\n\n},{}],58:[function(require,module,exports){\n/**\n * mux.js\n *\n * Copyright (c) 2015 Brightcove\n * All rights reserved.\n *\n * A stream-based mp2t to mp4 converter. This utility can be used to\n * deliver mp4s to a SourceBuffer on platforms that support native\n * Media Source Extensions.\n */\n'use strict';\n\nvar Stream = require('../utils/stream.js');\nvar mp4 = require('./mp4-generator.js');\nvar m2ts = require('../m2ts/m2ts.js');\nvar AdtsStream = require('../codecs/adts.js');\nvar H264Stream = require('../codecs/h264').H264Stream;\nvar AacStream = require('../aac');\nvar coneOfSilence = require('../data/silence');\nvar clock = require('../utils/clock');\n\n// constants\nvar AUDIO_PROPERTIES = [\n  'audioobjecttype',\n  'channelcount',\n  'samplerate',\n  'samplingfrequencyindex',\n  'samplesize'\n];\n\nvar VIDEO_PROPERTIES = [\n  'width',\n  'height',\n  'profileIdc',\n  'levelIdc',\n  'profileCompatibility'\n];\n\nvar ONE_SECOND_IN_TS = 90000; // 90kHz clock\n\n// object types\nvar VideoSegmentStream, AudioSegmentStream, Transmuxer, CoalesceStream;\n\n// Helper functions\nvar\n  createDefaultSample,\n  isLikelyAacData,\n  collectDtsInfo,\n  clearDtsInfo,\n  calculateTrackBaseMediaDecodeTime,\n  arrayEquals,\n  sumFrameByteLengths;\n\n/**\n * Default sample object\n * see ISO/IEC 14496-12:2012, section 8.6.4.3\n */\ncreateDefaultSample = function() {\n  return {\n    size: 0,\n    flags: {\n      isLeading: 0,\n      dependsOn: 1,\n      isDependedOn: 0,\n      hasRedundancy: 0,\n      degradationPriority: 0\n    }\n  };\n};\n\nisLikelyAacData = function(data) {\n  if ((data[0] === 'I'.charCodeAt(0)) &&\n      (data[1] === 'D'.charCodeAt(0)) &&\n      (data[2] === '3'.charCodeAt(0))) {\n    return true;\n  }\n  return false;\n};\n\n/**\n * Compare two arrays (even typed) for same-ness\n */\narrayEquals = function(a, b) {\n  var\n    i;\n\n  if (a.length !== b.length) {\n    return false;\n  }\n\n  // compare the value of each element in the array\n  for (i = 0; i < a.length; i++) {\n    if (a[i] !== b[i]) {\n      return false;\n    }\n  }\n\n  return true;\n};\n\n/**\n * Sum the `byteLength` properties of the data in each AAC frame\n */\nsumFrameByteLengths = function(array) {\n  var\n    i,\n    currentObj,\n    sum = 0;\n\n  // sum the byteLength's all each nal unit in the frame\n  for (i = 0; i < array.length; i++) {\n    currentObj = array[i];\n    sum += currentObj.data.byteLength;\n  }\n\n  return sum;\n};\n\n/**\n * Constructs a single-track, ISO BMFF media segment from AAC data\n * events. The output of this stream can be fed to a SourceBuffer\n * configured with a suitable initialization segment.\n */\nAudioSegmentStream = function(track) {\n  var\n    adtsFrames = [],\n    sequenceNumber = 0,\n    earliestAllowedDts = 0,\n    audioAppendStartTs = 0,\n    videoBaseMediaDecodeTime = Infinity;\n\n  AudioSegmentStream.prototype.init.call(this);\n\n  this.push = function(data) {\n    collectDtsInfo(track, data);\n\n    if (track) {\n      AUDIO_PROPERTIES.forEach(function(prop) {\n        track[prop] = data[prop];\n      });\n    }\n\n    // buffer audio data until end() is called\n    adtsFrames.push(data);\n  };\n\n  this.setEarliestDts = function(earliestDts) {\n    earliestAllowedDts = earliestDts - track.timelineStartInfo.baseMediaDecodeTime;\n  };\n\n  this.setVideoBaseMediaDecodeTime = function(baseMediaDecodeTime) {\n    videoBaseMediaDecodeTime = baseMediaDecodeTime;\n  };\n\n  this.setAudioAppendStart = function(timestamp) {\n    audioAppendStartTs = timestamp;\n  };\n\n  this.flush = function() {\n    var\n      frames,\n      moof,\n      mdat,\n      boxes;\n\n    // return early if no audio data has been observed\n    if (adtsFrames.length === 0) {\n      this.trigger('done', 'AudioSegmentStream');\n      return;\n    }\n\n    frames = this.trimAdtsFramesByEarliestDts_(adtsFrames);\n    track.baseMediaDecodeTime = calculateTrackBaseMediaDecodeTime(track);\n\n    this.prefixWithSilence_(track, frames);\n\n    // we have to build the index from byte locations to\n    // samples (that is, adts frames) in the audio data\n    track.samples = this.generateSampleTable_(frames);\n\n    // concatenate the audio data to constuct the mdat\n    mdat = mp4.mdat(this.concatenateFrameData_(frames));\n\n    adtsFrames = [];\n\n    moof = mp4.moof(sequenceNumber, [track]);\n    boxes = new Uint8Array(moof.byteLength + mdat.byteLength);\n\n    // bump the sequence number for next time\n    sequenceNumber++;\n\n    boxes.set(moof);\n    boxes.set(mdat, moof.byteLength);\n\n    clearDtsInfo(track);\n\n    this.trigger('data', {track: track, boxes: boxes});\n    this.trigger('done', 'AudioSegmentStream');\n  };\n\n  // Possibly pad (prefix) the audio track with silence if appending this track\n  // would lead to the introduction of a gap in the audio buffer\n  this.prefixWithSilence_ = function(track, frames) {\n    var\n      baseMediaDecodeTimeTs,\n      frameDuration = 0,\n      audioGapDuration = 0,\n      audioFillFrameCount = 0,\n      audioFillDuration = 0,\n      silentFrame,\n      i;\n\n    if (!frames.length) {\n      return;\n    }\n\n    baseMediaDecodeTimeTs = clock.audioTsToVideoTs(track.baseMediaDecodeTime, track.samplerate);\n    // determine frame clock duration based on sample rate, round up to avoid overfills\n    frameDuration = Math.ceil(ONE_SECOND_IN_TS / (track.samplerate / 1024));\n\n    if (audioAppendStartTs && videoBaseMediaDecodeTime) {\n      // insert the shortest possible amount (audio gap or audio to video gap)\n      audioGapDuration =\n        baseMediaDecodeTimeTs - Math.max(audioAppendStartTs, videoBaseMediaDecodeTime);\n      // number of full frames in the audio gap\n      audioFillFrameCount = Math.floor(audioGapDuration / frameDuration);\n      audioFillDuration = audioFillFrameCount * frameDuration;\n    }\n\n    // don't attempt to fill gaps smaller than a single frame or larger\n    // than a half second\n    if (audioFillFrameCount < 1 || audioFillDuration > ONE_SECOND_IN_TS / 2) {\n      return;\n    }\n\n    silentFrame = coneOfSilence[track.samplerate];\n\n    if (!silentFrame) {\n      // we don't have a silent frame pregenerated for the sample rate, so use a frame\n      // from the content instead\n      silentFrame = frames[0].data;\n    }\n\n    for (i = 0; i < audioFillFrameCount; i++) {\n      frames.splice(i, 0, {\n        data: silentFrame\n      });\n    }\n\n    track.baseMediaDecodeTime -=\n      Math.floor(clock.videoTsToAudioTs(audioFillDuration, track.samplerate));\n  };\n\n  // If the audio segment extends before the earliest allowed dts\n  // value, remove AAC frames until starts at or after the earliest\n  // allowed DTS so that we don't end up with a negative baseMedia-\n  // DecodeTime for the audio track\n  this.trimAdtsFramesByEarliestDts_ = function(adtsFrames) {\n    if (track.minSegmentDts >= earliestAllowedDts) {\n      return adtsFrames;\n    }\n\n    // We will need to recalculate the earliest segment Dts\n    track.minSegmentDts = Infinity;\n\n    return adtsFrames.filter(function(currentFrame) {\n      // If this is an allowed frame, keep it and record it's Dts\n      if (currentFrame.dts >= earliestAllowedDts) {\n        track.minSegmentDts = Math.min(track.minSegmentDts, currentFrame.dts);\n        track.minSegmentPts = track.minSegmentDts;\n        return true;\n      }\n      // Otherwise, discard it\n      return false;\n    });\n  };\n\n  // generate the track's raw mdat data from an array of frames\n  this.generateSampleTable_ = function(frames) {\n    var\n      i,\n      currentFrame,\n      samples = [];\n\n    for (i = 0; i < frames.length; i++) {\n      currentFrame = frames[i];\n      samples.push({\n        size: currentFrame.data.byteLength,\n        duration: 1024 // For AAC audio, all samples contain 1024 samples\n      });\n    }\n    return samples;\n  };\n\n  // generate the track's sample table from an array of frames\n  this.concatenateFrameData_ = function(frames) {\n    var\n      i,\n      currentFrame,\n      dataOffset = 0,\n      data = new Uint8Array(sumFrameByteLengths(frames));\n\n    for (i = 0; i < frames.length; i++) {\n      currentFrame = frames[i];\n\n      data.set(currentFrame.data, dataOffset);\n      dataOffset += currentFrame.data.byteLength;\n    }\n    return data;\n  };\n};\n\nAudioSegmentStream.prototype = new Stream();\n\n/**\n * Constructs a single-track, ISO BMFF media segment from H264 data\n * events. The output of this stream can be fed to a SourceBuffer\n * configured with a suitable initialization segment.\n * @param track {object} track metadata configuration\n * @param options {object} transmuxer options object\n * @param options.alignGopsAtEnd {boolean} If true, start from the end of the\n *        gopsToAlignWith list when attempting to align gop pts\n */\nVideoSegmentStream = function(track, options) {\n  var\n    sequenceNumber = 0,\n    nalUnits = [],\n    gopsToAlignWith = [],\n    config,\n    pps;\n\n  options = options || {};\n\n  VideoSegmentStream.prototype.init.call(this);\n\n  delete track.minPTS;\n\n  this.gopCache_ = [];\n\n  this.push = function(nalUnit) {\n    collectDtsInfo(track, nalUnit);\n\n    // record the track config\n    if (nalUnit.nalUnitType === 'seq_parameter_set_rbsp' && !config) {\n      config = nalUnit.config;\n      track.sps = [nalUnit.data];\n\n      VIDEO_PROPERTIES.forEach(function(prop) {\n        track[prop] = config[prop];\n      }, this);\n    }\n\n    if (nalUnit.nalUnitType === 'pic_parameter_set_rbsp' &&\n        !pps) {\n      pps = nalUnit.data;\n      track.pps = [nalUnit.data];\n    }\n\n    // buffer video until flush() is called\n    nalUnits.push(nalUnit);\n  };\n\n  this.flush = function() {\n    var\n      frames,\n      gopForFusion,\n      gops,\n      moof,\n      mdat,\n      boxes;\n\n    // Throw away nalUnits at the start of the byte stream until\n    // we find the first AUD\n    while (nalUnits.length) {\n      if (nalUnits[0].nalUnitType === 'access_unit_delimiter_rbsp') {\n        break;\n      }\n      nalUnits.shift();\n    }\n\n    // Return early if no video data has been observed\n    if (nalUnits.length === 0) {\n      this.resetStream_();\n      this.trigger('done', 'VideoSegmentStream');\n      return;\n    }\n\n    // Organize the raw nal-units into arrays that represent\n    // higher-level constructs such as frames and gops\n    // (group-of-pictures)\n    frames = this.groupNalsIntoFrames_(nalUnits);\n    gops = this.groupFramesIntoGops_(frames);\n\n    // If the first frame of this fragment is not a keyframe we have\n    // a problem since MSE (on Chrome) requires a leading keyframe.\n    //\n    // We have two approaches to repairing this situation:\n    // 1) GOP-FUSION:\n    //    This is where we keep track of the GOPS (group-of-pictures)\n    //    from previous fragments and attempt to find one that we can\n    //    prepend to the current fragment in order to create a valid\n    //    fragment.\n    // 2) KEYFRAME-PULLING:\n    //    Here we search for the first keyframe in the fragment and\n    //    throw away all the frames between the start of the fragment\n    //    and that keyframe. We then extend the duration and pull the\n    //    PTS of the keyframe forward so that it covers the time range\n    //    of the frames that were disposed of.\n    //\n    // #1 is far prefereable over #2 which can cause \"stuttering\" but\n    // requires more things to be just right.\n    if (!gops[0][0].keyFrame) {\n      // Search for a gop for fusion from our gopCache\n      gopForFusion = this.getGopForFusion_(nalUnits[0], track);\n\n      if (gopForFusion) {\n        gops.unshift(gopForFusion);\n        // Adjust Gops' metadata to account for the inclusion of the\n        // new gop at the beginning\n        gops.byteLength += gopForFusion.byteLength;\n        gops.nalCount += gopForFusion.nalCount;\n        gops.pts = gopForFusion.pts;\n        gops.dts = gopForFusion.dts;\n        gops.duration += gopForFusion.duration;\n      } else {\n        // If we didn't find a candidate gop fall back to keyrame-pulling\n        gops = this.extendFirstKeyFrame_(gops);\n      }\n    }\n\n    // Trim gops to align with gopsToAlignWith\n    if (gopsToAlignWith.length) {\n      var alignedGops;\n\n      if (options.alignGopsAtEnd) {\n        alignedGops = this.alignGopsAtEnd_(gops);\n      } else {\n        alignedGops = this.alignGopsAtStart_(gops);\n      }\n\n      if (!alignedGops) {\n        // save all the nals in the last GOP into the gop cache\n        this.gopCache_.unshift({\n          gop: gops.pop(),\n          pps: track.pps,\n          sps: track.sps\n        });\n\n        // Keep a maximum of 6 GOPs in the cache\n        this.gopCache_.length = Math.min(6, this.gopCache_.length);\n\n        // Clear nalUnits\n        nalUnits = [];\n\n        // return early no gops can be aligned with desired gopsToAlignWith\n        this.resetStream_();\n        this.trigger('done', 'VideoSegmentStream');\n        return;\n      }\n\n      // Some gops were trimmed. clear dts info so minSegmentDts and pts are correct\n      // when recalculated before sending off to CoalesceStream\n      clearDtsInfo(track);\n\n      gops = alignedGops;\n    }\n\n    collectDtsInfo(track, gops);\n\n    // First, we have to build the index from byte locations to\n    // samples (that is, frames) in the video data\n    track.samples = this.generateSampleTable_(gops);\n\n    // Concatenate the video data and construct the mdat\n    mdat = mp4.mdat(this.concatenateNalData_(gops));\n\n    track.baseMediaDecodeTime = calculateTrackBaseMediaDecodeTime(track);\n\n    this.trigger('processedGopsInfo', gops.map(function(gop) {\n      return {\n        pts: gop.pts,\n        dts: gop.dts,\n        byteLength: gop.byteLength\n      };\n    }));\n\n    // save all the nals in the last GOP into the gop cache\n    this.gopCache_.unshift({\n      gop: gops.pop(),\n      pps: track.pps,\n      sps: track.sps\n    });\n\n    // Keep a maximum of 6 GOPs in the cache\n    this.gopCache_.length = Math.min(6, this.gopCache_.length);\n\n    // Clear nalUnits\n    nalUnits = [];\n\n    this.trigger('baseMediaDecodeTime', track.baseMediaDecodeTime);\n    this.trigger('timelineStartInfo', track.timelineStartInfo);\n\n    moof = mp4.moof(sequenceNumber, [track]);\n\n    // it would be great to allocate this array up front instead of\n    // throwing away hundreds of media segment fragments\n    boxes = new Uint8Array(moof.byteLength + mdat.byteLength);\n\n    // Bump the sequence number for next time\n    sequenceNumber++;\n\n    boxes.set(moof);\n    boxes.set(mdat, moof.byteLength);\n\n    this.trigger('data', {track: track, boxes: boxes});\n\n    this.resetStream_();\n\n    // Continue with the flush process now\n    this.trigger('done', 'VideoSegmentStream');\n  };\n\n  this.resetStream_ = function() {\n    clearDtsInfo(track);\n\n    // reset config and pps because they may differ across segments\n    // for instance, when we are rendition switching\n    config = undefined;\n    pps = undefined;\n  };\n\n  // Search for a candidate Gop for gop-fusion from the gop cache and\n  // return it or return null if no good candidate was found\n  this.getGopForFusion_ = function(nalUnit) {\n    var\n      halfSecond = 45000, // Half-a-second in a 90khz clock\n      allowableOverlap = 10000, // About 3 frames @ 30fps\n      nearestDistance = Infinity,\n      dtsDistance,\n      nearestGopObj,\n      currentGop,\n      currentGopObj,\n      i;\n\n    // Search for the GOP nearest to the beginning of this nal unit\n    for (i = 0; i < this.gopCache_.length; i++) {\n      currentGopObj = this.gopCache_[i];\n      currentGop = currentGopObj.gop;\n\n      // Reject Gops with different SPS or PPS\n      if (!(track.pps && arrayEquals(track.pps[0], currentGopObj.pps[0])) ||\n          !(track.sps && arrayEquals(track.sps[0], currentGopObj.sps[0]))) {\n        continue;\n      }\n\n      // Reject Gops that would require a negative baseMediaDecodeTime\n      if (currentGop.dts < track.timelineStartInfo.dts) {\n        continue;\n      }\n\n      // The distance between the end of the gop and the start of the nalUnit\n      dtsDistance = (nalUnit.dts - currentGop.dts) - currentGop.duration;\n\n      // Only consider GOPS that start before the nal unit and end within\n      // a half-second of the nal unit\n      if (dtsDistance >= -allowableOverlap &&\n          dtsDistance <= halfSecond) {\n\n        // Always use the closest GOP we found if there is more than\n        // one candidate\n        if (!nearestGopObj ||\n            nearestDistance > dtsDistance) {\n          nearestGopObj = currentGopObj;\n          nearestDistance = dtsDistance;\n        }\n      }\n    }\n\n    if (nearestGopObj) {\n      return nearestGopObj.gop;\n    }\n    return null;\n  };\n\n  this.extendFirstKeyFrame_ = function(gops) {\n    var currentGop;\n\n    if (!gops[0][0].keyFrame && gops.length > 1) {\n      // Remove the first GOP\n      currentGop = gops.shift();\n\n      gops.byteLength -=  currentGop.byteLength;\n      gops.nalCount -= currentGop.nalCount;\n\n      // Extend the first frame of what is now the\n      // first gop to cover the time period of the\n      // frames we just removed\n      gops[0][0].dts = currentGop.dts;\n      gops[0][0].pts = currentGop.pts;\n      gops[0][0].duration += currentGop.duration;\n    }\n\n    return gops;\n  };\n\n  // Convert an array of nal units into an array of frames with each frame being\n  // composed of the nal units that make up that frame\n  // Also keep track of cummulative data about the frame from the nal units such\n  // as the frame duration, starting pts, etc.\n  this.groupNalsIntoFrames_ = function(nalUnits) {\n    var\n      i,\n      currentNal,\n      currentFrame = [],\n      frames = [];\n\n    currentFrame.byteLength = 0;\n\n    for (i = 0; i < nalUnits.length; i++) {\n      currentNal = nalUnits[i];\n\n      // Split on 'aud'-type nal units\n      if (currentNal.nalUnitType === 'access_unit_delimiter_rbsp') {\n        // Since the very first nal unit is expected to be an AUD\n        // only push to the frames array when currentFrame is not empty\n        if (currentFrame.length) {\n          currentFrame.duration = currentNal.dts - currentFrame.dts;\n          frames.push(currentFrame);\n        }\n        currentFrame = [currentNal];\n        currentFrame.byteLength = currentNal.data.byteLength;\n        currentFrame.pts = currentNal.pts;\n        currentFrame.dts = currentNal.dts;\n      } else {\n        // Specifically flag key frames for ease of use later\n        if (currentNal.nalUnitType === 'slice_layer_without_partitioning_rbsp_idr') {\n          currentFrame.keyFrame = true;\n        }\n        currentFrame.duration = currentNal.dts - currentFrame.dts;\n        currentFrame.byteLength += currentNal.data.byteLength;\n        currentFrame.push(currentNal);\n      }\n    }\n\n    // For the last frame, use the duration of the previous frame if we\n    // have nothing better to go on\n    if (frames.length &&\n        (!currentFrame.duration ||\n         currentFrame.duration <= 0)) {\n      currentFrame.duration = frames[frames.length - 1].duration;\n    }\n\n    // Push the final frame\n    frames.push(currentFrame);\n    return frames;\n  };\n\n  // Convert an array of frames into an array of Gop with each Gop being composed\n  // of the frames that make up that Gop\n  // Also keep track of cummulative data about the Gop from the frames such as the\n  // Gop duration, starting pts, etc.\n  this.groupFramesIntoGops_ = function(frames) {\n    var\n      i,\n      currentFrame,\n      currentGop = [],\n      gops = [];\n\n    // We must pre-set some of the values on the Gop since we\n    // keep running totals of these values\n    currentGop.byteLength = 0;\n    currentGop.nalCount = 0;\n    currentGop.duration = 0;\n    currentGop.pts = frames[0].pts;\n    currentGop.dts = frames[0].dts;\n\n    // store some metadata about all the Gops\n    gops.byteLength = 0;\n    gops.nalCount = 0;\n    gops.duration = 0;\n    gops.pts = frames[0].pts;\n    gops.dts = frames[0].dts;\n\n    for (i = 0; i < frames.length; i++) {\n      currentFrame = frames[i];\n\n      if (currentFrame.keyFrame) {\n        // Since the very first frame is expected to be an keyframe\n        // only push to the gops array when currentGop is not empty\n        if (currentGop.length) {\n          gops.push(currentGop);\n          gops.byteLength += currentGop.byteLength;\n          gops.nalCount += currentGop.nalCount;\n          gops.duration += currentGop.duration;\n        }\n\n        currentGop = [currentFrame];\n        currentGop.nalCount = currentFrame.length;\n        currentGop.byteLength = currentFrame.byteLength;\n        currentGop.pts = currentFrame.pts;\n        currentGop.dts = currentFrame.dts;\n        currentGop.duration = currentFrame.duration;\n      } else {\n        currentGop.duration += currentFrame.duration;\n        currentGop.nalCount += currentFrame.length;\n        currentGop.byteLength += currentFrame.byteLength;\n        currentGop.push(currentFrame);\n      }\n    }\n\n    if (gops.length && currentGop.duration <= 0) {\n      currentGop.duration = gops[gops.length - 1].duration;\n    }\n    gops.byteLength += currentGop.byteLength;\n    gops.nalCount += currentGop.nalCount;\n    gops.duration += currentGop.duration;\n\n    // push the final Gop\n    gops.push(currentGop);\n    return gops;\n  };\n\n  // generate the track's sample table from an array of gops\n  this.generateSampleTable_ = function(gops, baseDataOffset) {\n    var\n      h, i,\n      sample,\n      currentGop,\n      currentFrame,\n      dataOffset = baseDataOffset || 0,\n      samples = [];\n\n    for (h = 0; h < gops.length; h++) {\n      currentGop = gops[h];\n\n      for (i = 0; i < currentGop.length; i++) {\n        currentFrame = currentGop[i];\n\n        sample = createDefaultSample();\n\n        sample.dataOffset = dataOffset;\n        sample.compositionTimeOffset = currentFrame.pts - currentFrame.dts;\n        sample.duration = currentFrame.duration;\n        sample.size = 4 * currentFrame.length; // Space for nal unit size\n        sample.size += currentFrame.byteLength;\n\n        if (currentFrame.keyFrame) {\n          sample.flags.dependsOn = 2;\n        }\n\n        dataOffset += sample.size;\n\n        samples.push(sample);\n      }\n    }\n    return samples;\n  };\n\n  // generate the track's raw mdat data from an array of gops\n  this.concatenateNalData_ = function(gops) {\n    var\n      h, i, j,\n      currentGop,\n      currentFrame,\n      currentNal,\n      dataOffset = 0,\n      nalsByteLength = gops.byteLength,\n      numberOfNals = gops.nalCount,\n      totalByteLength = nalsByteLength + 4 * numberOfNals,\n      data = new Uint8Array(totalByteLength),\n      view = new DataView(data.buffer);\n\n    // For each Gop..\n    for (h = 0; h < gops.length; h++) {\n      currentGop = gops[h];\n\n      // For each Frame..\n      for (i = 0; i < currentGop.length; i++) {\n        currentFrame = currentGop[i];\n\n        // For each NAL..\n        for (j = 0; j < currentFrame.length; j++) {\n          currentNal = currentFrame[j];\n\n          view.setUint32(dataOffset, currentNal.data.byteLength);\n          dataOffset += 4;\n          data.set(currentNal.data, dataOffset);\n          dataOffset += currentNal.data.byteLength;\n        }\n      }\n    }\n    return data;\n  };\n\n  // trim gop list to the first gop found that has a matching pts with a gop in the list\n  // of gopsToAlignWith starting from the START of the list\n  this.alignGopsAtStart_ = function(gops) {\n    var alignIndex, gopIndex, align, gop, byteLength, nalCount, duration, alignedGops;\n\n    byteLength = gops.byteLength;\n    nalCount = gops.nalCount;\n    duration = gops.duration;\n    alignIndex = gopIndex = 0;\n\n    while (alignIndex < gopsToAlignWith.length && gopIndex < gops.length) {\n      align = gopsToAlignWith[alignIndex];\n      gop = gops[gopIndex];\n\n      if (align.pts === gop.pts) {\n        break;\n      }\n\n      if (gop.pts > align.pts) {\n        // this current gop starts after the current gop we want to align on, so increment\n        // align index\n        alignIndex++;\n        continue;\n      }\n\n      // current gop starts before the current gop we want to align on. so increment gop\n      // index\n      gopIndex++;\n      byteLength -= gop.byteLength;\n      nalCount -= gop.nalCount;\n      duration -= gop.duration;\n    }\n\n    if (gopIndex === 0) {\n      // no gops to trim\n      return gops;\n    }\n\n    if (gopIndex === gops.length) {\n      // all gops trimmed, skip appending all gops\n      return null;\n    }\n\n    alignedGops = gops.slice(gopIndex);\n    alignedGops.byteLength = byteLength;\n    alignedGops.duration = duration;\n    alignedGops.nalCount = nalCount;\n    alignedGops.pts = alignedGops[0].pts;\n    alignedGops.dts = alignedGops[0].dts;\n\n    return alignedGops;\n  };\n\n  // trim gop list to the first gop found that has a matching pts with a gop in the list\n  // of gopsToAlignWith starting from the END of the list\n  this.alignGopsAtEnd_ = function(gops) {\n    var alignIndex, gopIndex, align, gop, alignEndIndex, matchFound;\n\n    alignIndex = gopsToAlignWith.length - 1;\n    gopIndex = gops.length - 1;\n    alignEndIndex = null;\n    matchFound = false;\n\n    while (alignIndex >= 0 && gopIndex >= 0) {\n      align = gopsToAlignWith[alignIndex];\n      gop = gops[gopIndex];\n\n      if (align.pts === gop.pts) {\n        matchFound = true;\n        break;\n      }\n\n      if (align.pts > gop.pts) {\n        alignIndex--;\n        continue;\n      }\n\n      if (alignIndex === gopsToAlignWith.length - 1) {\n        // gop.pts is greater than the last alignment candidate. If no match is found\n        // by the end of this loop, we still want to append gops that come after this\n        // point\n        alignEndIndex = gopIndex;\n      }\n\n      gopIndex--;\n    }\n\n    if (!matchFound && alignEndIndex === null) {\n      return null;\n    }\n\n    var trimIndex;\n\n    if (matchFound) {\n      trimIndex = gopIndex;\n    } else {\n      trimIndex = alignEndIndex;\n    }\n\n    if (trimIndex === 0) {\n      return gops;\n    }\n\n    var alignedGops = gops.slice(trimIndex);\n    var metadata = alignedGops.reduce(function(total, gop) {\n      total.byteLength += gop.byteLength;\n      total.duration += gop.duration;\n      total.nalCount += gop.nalCount;\n      return total;\n    }, { byteLength: 0, duration: 0, nalCount: 0 });\n\n    alignedGops.byteLength = metadata.byteLength;\n    alignedGops.duration = metadata.duration;\n    alignedGops.nalCount = metadata.nalCount;\n    alignedGops.pts = alignedGops[0].pts;\n    alignedGops.dts = alignedGops[0].dts;\n\n    return alignedGops;\n  };\n\n  this.alignGopsWith = function(newGopsToAlignWith) {\n    gopsToAlignWith = newGopsToAlignWith;\n  };\n};\n\nVideoSegmentStream.prototype = new Stream();\n\n/**\n * Store information about the start and end of the track and the\n * duration for each frame/sample we process in order to calculate\n * the baseMediaDecodeTime\n */\ncollectDtsInfo = function(track, data) {\n  if (typeof data.pts === 'number') {\n    if (track.timelineStartInfo.pts === undefined) {\n      track.timelineStartInfo.pts = data.pts;\n    }\n\n    if (track.minSegmentPts === undefined) {\n      track.minSegmentPts = data.pts;\n    } else {\n      track.minSegmentPts = Math.min(track.minSegmentPts, data.pts);\n    }\n\n    if (track.maxSegmentPts === undefined) {\n      track.maxSegmentPts = data.pts;\n    } else {\n      track.maxSegmentPts = Math.max(track.maxSegmentPts, data.pts);\n    }\n  }\n\n  if (typeof data.dts === 'number') {\n    if (track.timelineStartInfo.dts === undefined) {\n      track.timelineStartInfo.dts = data.dts;\n    }\n\n    if (track.minSegmentDts === undefined) {\n      track.minSegmentDts = data.dts;\n    } else {\n      track.minSegmentDts = Math.min(track.minSegmentDts, data.dts);\n    }\n\n    if (track.maxSegmentDts === undefined) {\n      track.maxSegmentDts = data.dts;\n    } else {\n      track.maxSegmentDts = Math.max(track.maxSegmentDts, data.dts);\n    }\n  }\n};\n\n/**\n * Clear values used to calculate the baseMediaDecodeTime between\n * tracks\n */\nclearDtsInfo = function(track) {\n  delete track.minSegmentDts;\n  delete track.maxSegmentDts;\n  delete track.minSegmentPts;\n  delete track.maxSegmentPts;\n};\n\n/**\n * Calculate the track's baseMediaDecodeTime based on the earliest\n * DTS the transmuxer has ever seen and the minimum DTS for the\n * current track\n */\ncalculateTrackBaseMediaDecodeTime = function(track) {\n  var\n    baseMediaDecodeTime,\n    scale,\n    // Calculate the distance, in time, that this segment starts from the start\n    // of the timeline (earliest time seen since the transmuxer initialized)\n    timeSinceStartOfTimeline = track.minSegmentDts - track.timelineStartInfo.dts;\n\n  // track.timelineStartInfo.baseMediaDecodeTime is the location, in time, where\n  // we want the start of the first segment to be placed\n  baseMediaDecodeTime = track.timelineStartInfo.baseMediaDecodeTime;\n\n  // Add to that the distance this segment is from the very first\n  baseMediaDecodeTime += timeSinceStartOfTimeline;\n\n  // baseMediaDecodeTime must not become negative\n  baseMediaDecodeTime = Math.max(0, baseMediaDecodeTime);\n\n  if (track.type === 'audio') {\n    // Audio has a different clock equal to the sampling_rate so we need to\n    // scale the PTS values into the clock rate of the track\n    scale = track.samplerate / ONE_SECOND_IN_TS;\n    baseMediaDecodeTime *= scale;\n    baseMediaDecodeTime = Math.floor(baseMediaDecodeTime);\n  }\n\n  return baseMediaDecodeTime;\n};\n\n/**\n * A Stream that can combine multiple streams (ie. audio & video)\n * into a single output segment for MSE. Also supports audio-only\n * and video-only streams.\n */\nCoalesceStream = function(options, metadataStream) {\n  // Number of Tracks per output segment\n  // If greater than 1, we combine multiple\n  // tracks into a single segment\n  this.numberOfTracks = 0;\n  this.metadataStream = metadataStream;\n\n  if (typeof options.remux !== 'undefined') {\n    this.remuxTracks = !!options.remux;\n  } else {\n    this.remuxTracks = true;\n  }\n\n  this.pendingTracks = [];\n  this.videoTrack = null;\n  this.pendingBoxes = [];\n  this.pendingCaptions = [];\n  this.pendingMetadata = [];\n  this.pendingBytes = 0;\n  this.emittedTracks = 0;\n\n  CoalesceStream.prototype.init.call(this);\n\n  // Take output from multiple\n  this.push = function(output) {\n    // buffer incoming captions until the associated video segment\n    // finishes\n    if (output.text) {\n      return this.pendingCaptions.push(output);\n    }\n    // buffer incoming id3 tags until the final flush\n    if (output.frames) {\n      return this.pendingMetadata.push(output);\n    }\n\n    // Add this track to the list of pending tracks and store\n    // important information required for the construction of\n    // the final segment\n    this.pendingTracks.push(output.track);\n    this.pendingBoxes.push(output.boxes);\n    this.pendingBytes += output.boxes.byteLength;\n\n    if (output.track.type === 'video') {\n      this.videoTrack = output.track;\n    }\n    if (output.track.type === 'audio') {\n      this.audioTrack = output.track;\n    }\n  };\n};\n\nCoalesceStream.prototype = new Stream();\nCoalesceStream.prototype.flush = function(flushSource) {\n  var\n    offset = 0,\n    event = {\n      captions: [],\n      captionStreams: {},\n      metadata: [],\n      info: {}\n    },\n    caption,\n    id3,\n    initSegment,\n    timelineStartPts = 0,\n    i;\n\n  if (this.pendingTracks.length < this.numberOfTracks) {\n    if (flushSource !== 'VideoSegmentStream' &&\n        flushSource !== 'AudioSegmentStream') {\n      // Return because we haven't received a flush from a data-generating\n      // portion of the segment (meaning that we have only recieved meta-data\n      // or captions.)\n      return;\n    } else if (this.remuxTracks) {\n      // Return until we have enough tracks from the pipeline to remux (if we\n      // are remuxing audio and video into a single MP4)\n      return;\n    } else if (this.pendingTracks.length === 0) {\n      // In the case where we receive a flush without any data having been\n      // received we consider it an emitted track for the purposes of coalescing\n      // `done` events.\n      // We do this for the case where there is an audio and video track in the\n      // segment but no audio data. (seen in several playlists with alternate\n      // audio tracks and no audio present in the main TS segments.)\n      this.emittedTracks++;\n\n      if (this.emittedTracks >= this.numberOfTracks) {\n        this.trigger('done');\n        this.emittedTracks = 0;\n      }\n      return;\n    }\n  }\n\n  if (this.videoTrack) {\n    timelineStartPts = this.videoTrack.timelineStartInfo.pts;\n    VIDEO_PROPERTIES.forEach(function(prop) {\n      event.info[prop] = this.videoTrack[prop];\n    }, this);\n  } else if (this.audioTrack) {\n    timelineStartPts = this.audioTrack.timelineStartInfo.pts;\n    AUDIO_PROPERTIES.forEach(function(prop) {\n      event.info[prop] = this.audioTrack[prop];\n    }, this);\n  }\n\n  if (this.pendingTracks.length === 1) {\n    event.type = this.pendingTracks[0].type;\n  } else {\n    event.type = 'combined';\n  }\n\n  this.emittedTracks += this.pendingTracks.length;\n\n  initSegment = mp4.initSegment(this.pendingTracks);\n\n  // Create a new typed array to hold the init segment\n  event.initSegment = new Uint8Array(initSegment.byteLength);\n\n  // Create an init segment containing a moov\n  // and track definitions\n  event.initSegment.set(initSegment);\n\n  // Create a new typed array to hold the moof+mdats\n  event.data = new Uint8Array(this.pendingBytes);\n\n  // Append each moof+mdat (one per track) together\n  for (i = 0; i < this.pendingBoxes.length; i++) {\n    event.data.set(this.pendingBoxes[i], offset);\n    offset += this.pendingBoxes[i].byteLength;\n  }\n\n  // Translate caption PTS times into second offsets into the\n  // video timeline for the segment, and add track info\n  for (i = 0; i < this.pendingCaptions.length; i++) {\n    caption = this.pendingCaptions[i];\n    caption.startTime = (caption.startPts - timelineStartPts);\n    caption.startTime /= 90e3;\n    caption.endTime = (caption.endPts - timelineStartPts);\n    caption.endTime /= 90e3;\n    event.captionStreams[caption.stream] = true;\n    event.captions.push(caption);\n  }\n\n  // Translate ID3 frame PTS times into second offsets into the\n  // video timeline for the segment\n  for (i = 0; i < this.pendingMetadata.length; i++) {\n    id3 = this.pendingMetadata[i];\n    id3.cueTime = (id3.pts - timelineStartPts);\n    id3.cueTime /= 90e3;\n    event.metadata.push(id3);\n  }\n  // We add this to every single emitted segment even though we only need\n  // it for the first\n  event.metadata.dispatchType = this.metadataStream.dispatchType;\n\n  // Reset stream state\n  this.pendingTracks.length = 0;\n  this.videoTrack = null;\n  this.pendingBoxes.length = 0;\n  this.pendingCaptions.length = 0;\n  this.pendingBytes = 0;\n  this.pendingMetadata.length = 0;\n\n  // Emit the built segment\n  this.trigger('data', event);\n\n  // Only emit `done` if all tracks have been flushed and emitted\n  if (this.emittedTracks >= this.numberOfTracks) {\n    this.trigger('done');\n    this.emittedTracks = 0;\n  }\n};\n/**\n * A Stream that expects MP2T binary data as input and produces\n * corresponding media segments, suitable for use with Media Source\n * Extension (MSE) implementations that support the ISO BMFF byte\n * stream format, like Chrome.\n */\nTransmuxer = function(options) {\n  var\n    self = this,\n    hasFlushed = true,\n    videoTrack,\n    audioTrack;\n\n  Transmuxer.prototype.init.call(this);\n\n  options = options || {};\n  this.baseMediaDecodeTime = options.baseMediaDecodeTime || 0;\n  this.transmuxPipeline_ = {};\n\n  this.setupAacPipeline = function() {\n    var pipeline = {};\n    this.transmuxPipeline_ = pipeline;\n\n    pipeline.type = 'aac';\n    pipeline.metadataStream = new m2ts.MetadataStream();\n\n    // set up the parsing pipeline\n    pipeline.aacStream = new AacStream();\n    pipeline.audioTimestampRolloverStream = new m2ts.TimestampRolloverStream('audio');\n    pipeline.timedMetadataTimestampRolloverStream = new m2ts.TimestampRolloverStream('timed-metadata');\n    pipeline.adtsStream = new AdtsStream();\n    pipeline.coalesceStream = new CoalesceStream(options, pipeline.metadataStream);\n    pipeline.headOfPipeline = pipeline.aacStream;\n\n    pipeline.aacStream\n      .pipe(pipeline.audioTimestampRolloverStream)\n      .pipe(pipeline.adtsStream);\n    pipeline.aacStream\n      .pipe(pipeline.timedMetadataTimestampRolloverStream)\n      .pipe(pipeline.metadataStream)\n      .pipe(pipeline.coalesceStream);\n\n    pipeline.metadataStream.on('timestamp', function(frame) {\n      pipeline.aacStream.setTimestamp(frame.timeStamp);\n    });\n\n    pipeline.aacStream.on('data', function(data) {\n      if (data.type === 'timed-metadata' && !pipeline.audioSegmentStream) {\n        audioTrack = audioTrack || {\n          timelineStartInfo: {\n            baseMediaDecodeTime: self.baseMediaDecodeTime\n          },\n          codec: 'adts',\n          type: 'audio'\n        };\n        // hook up the audio segment stream to the first track with aac data\n        pipeline.coalesceStream.numberOfTracks++;\n        pipeline.audioSegmentStream = new AudioSegmentStream(audioTrack);\n        // Set up the final part of the audio pipeline\n        pipeline.adtsStream\n          .pipe(pipeline.audioSegmentStream)\n          .pipe(pipeline.coalesceStream);\n      }\n    });\n\n    // Re-emit any data coming from the coalesce stream to the outside world\n    pipeline.coalesceStream.on('data', this.trigger.bind(this, 'data'));\n    // Let the consumer know we have finished flushing the entire pipeline\n    pipeline.coalesceStream.on('done', this.trigger.bind(this, 'done'));\n  };\n\n  this.setupTsPipeline = function() {\n    var pipeline = {};\n    this.transmuxPipeline_ = pipeline;\n\n    pipeline.type = 'ts';\n    pipeline.metadataStream = new m2ts.MetadataStream();\n\n    // set up the parsing pipeline\n    pipeline.packetStream = new m2ts.TransportPacketStream();\n    pipeline.parseStream = new m2ts.TransportParseStream();\n    pipeline.elementaryStream = new m2ts.ElementaryStream();\n    pipeline.videoTimestampRolloverStream = new m2ts.TimestampRolloverStream('video');\n    pipeline.audioTimestampRolloverStream = new m2ts.TimestampRolloverStream('audio');\n    pipeline.timedMetadataTimestampRolloverStream = new m2ts.TimestampRolloverStream('timed-metadata');\n    pipeline.adtsStream = new AdtsStream();\n    pipeline.h264Stream = new H264Stream();\n    pipeline.captionStream = new m2ts.CaptionStream();\n    pipeline.coalesceStream = new CoalesceStream(options, pipeline.metadataStream);\n    pipeline.headOfPipeline = pipeline.packetStream;\n\n    // disassemble MPEG2-TS packets into elementary streams\n    pipeline.packetStream\n      .pipe(pipeline.parseStream)\n      .pipe(pipeline.elementaryStream);\n\n    // !!THIS ORDER IS IMPORTANT!!\n    // demux the streams\n    pipeline.elementaryStream\n      .pipe(pipeline.videoTimestampRolloverStream)\n      .pipe(pipeline.h264Stream);\n    pipeline.elementaryStream\n      .pipe(pipeline.audioTimestampRolloverStream)\n      .pipe(pipeline.adtsStream);\n\n    pipeline.elementaryStream\n      .pipe(pipeline.timedMetadataTimestampRolloverStream)\n      .pipe(pipeline.metadataStream)\n      .pipe(pipeline.coalesceStream);\n\n    // Hook up CEA-608/708 caption stream\n    pipeline.h264Stream.pipe(pipeline.captionStream)\n      .pipe(pipeline.coalesceStream);\n\n    pipeline.elementaryStream.on('data', function(data) {\n      var i;\n\n      if (data.type === 'metadata') {\n        i = data.tracks.length;\n\n        // scan the tracks listed in the metadata\n        while (i--) {\n          if (!videoTrack && data.tracks[i].type === 'video') {\n            videoTrack = data.tracks[i];\n            videoTrack.timelineStartInfo.baseMediaDecodeTime = self.baseMediaDecodeTime;\n          } else if (!audioTrack && data.tracks[i].type === 'audio') {\n            audioTrack = data.tracks[i];\n            audioTrack.timelineStartInfo.baseMediaDecodeTime = self.baseMediaDecodeTime;\n          }\n        }\n\n        // hook up the video segment stream to the first track with h264 data\n        if (videoTrack && !pipeline.videoSegmentStream) {\n          pipeline.coalesceStream.numberOfTracks++;\n          pipeline.videoSegmentStream = new VideoSegmentStream(videoTrack, options);\n\n          pipeline.videoSegmentStream.on('timelineStartInfo', function(timelineStartInfo) {\n          // When video emits timelineStartInfo data after a flush, we forward that\n          // info to the AudioSegmentStream, if it exists, because video timeline\n          // data takes precedence.\n            if (audioTrack) {\n              audioTrack.timelineStartInfo = timelineStartInfo;\n              // On the first segment we trim AAC frames that exist before the\n              // very earliest DTS we have seen in video because Chrome will\n              // interpret any video track with a baseMediaDecodeTime that is\n              // non-zero as a gap.\n              pipeline.audioSegmentStream.setEarliestDts(timelineStartInfo.dts);\n            }\n          });\n\n          pipeline.videoSegmentStream.on('processedGopsInfo',\n            self.trigger.bind(self, 'gopInfo'));\n\n          pipeline.videoSegmentStream.on('baseMediaDecodeTime', function(baseMediaDecodeTime) {\n            if (audioTrack) {\n              pipeline.audioSegmentStream.setVideoBaseMediaDecodeTime(baseMediaDecodeTime);\n            }\n          });\n\n          // Set up the final part of the video pipeline\n          pipeline.h264Stream\n            .pipe(pipeline.videoSegmentStream)\n            .pipe(pipeline.coalesceStream);\n        }\n\n        if (audioTrack && !pipeline.audioSegmentStream) {\n          // hook up the audio segment stream to the first track with aac data\n          pipeline.coalesceStream.numberOfTracks++;\n          pipeline.audioSegmentStream = new AudioSegmentStream(audioTrack);\n\n          // Set up the final part of the audio pipeline\n          pipeline.adtsStream\n            .pipe(pipeline.audioSegmentStream)\n            .pipe(pipeline.coalesceStream);\n        }\n      }\n    });\n\n    // Re-emit any data coming from the coalesce stream to the outside world\n    pipeline.coalesceStream.on('data', this.trigger.bind(this, 'data'));\n    // Let the consumer know we have finished flushing the entire pipeline\n    pipeline.coalesceStream.on('done', this.trigger.bind(this, 'done'));\n  };\n\n  // hook up the segment streams once track metadata is delivered\n  this.setBaseMediaDecodeTime = function(baseMediaDecodeTime) {\n    var pipeline = this.transmuxPipeline_;\n\n    this.baseMediaDecodeTime = baseMediaDecodeTime;\n    if (audioTrack) {\n      audioTrack.timelineStartInfo.dts = undefined;\n      audioTrack.timelineStartInfo.pts = undefined;\n      clearDtsInfo(audioTrack);\n      audioTrack.timelineStartInfo.baseMediaDecodeTime = baseMediaDecodeTime;\n      if (pipeline.audioTimestampRolloverStream) {\n        pipeline.audioTimestampRolloverStream.discontinuity();\n      }\n    }\n    if (videoTrack) {\n      if (pipeline.videoSegmentStream) {\n        pipeline.videoSegmentStream.gopCache_ = [];\n        pipeline.videoTimestampRolloverStream.discontinuity();\n      }\n      videoTrack.timelineStartInfo.dts = undefined;\n      videoTrack.timelineStartInfo.pts = undefined;\n      clearDtsInfo(videoTrack);\n      pipeline.captionStream.reset();\n      videoTrack.timelineStartInfo.baseMediaDecodeTime = baseMediaDecodeTime;\n    }\n\n    if (pipeline.timedMetadataTimestampRolloverStream) {\n      pipeline.timedMetadataTimestampRolloverStream.discontinuity();\n    }\n  };\n\n  this.setAudioAppendStart = function(timestamp) {\n    if (audioTrack) {\n      this.transmuxPipeline_.audioSegmentStream.setAudioAppendStart(timestamp);\n    }\n  };\n\n  this.alignGopsWith = function(gopsToAlignWith) {\n    if (videoTrack && this.transmuxPipeline_.videoSegmentStream) {\n      this.transmuxPipeline_.videoSegmentStream.alignGopsWith(gopsToAlignWith);\n    }\n  };\n\n  // feed incoming data to the front of the parsing pipeline\n  this.push = function(data) {\n    if (hasFlushed) {\n      var isAac = isLikelyAacData(data);\n\n      if (isAac && this.transmuxPipeline_.type !== 'aac') {\n        this.setupAacPipeline();\n      } else if (!isAac && this.transmuxPipeline_.type !== 'ts') {\n        this.setupTsPipeline();\n      }\n      hasFlushed = false;\n    }\n    this.transmuxPipeline_.headOfPipeline.push(data);\n  };\n\n  // flush any buffered data\n  this.flush = function() {\n      hasFlushed = true;\n    // Start at the top of the pipeline and flush all pending work\n    this.transmuxPipeline_.headOfPipeline.flush();\n  };\n\n  // Caption data has to be reset when seeking outside buffered range\n  this.resetCaptions = function() {\n    if (this.transmuxPipeline_.captionStream) {\n      this.transmuxPipeline_.captionStream.reset();\n    }\n  };\n\n};\nTransmuxer.prototype = new Stream();\n\nmodule.exports = {\n  Transmuxer: Transmuxer,\n  VideoSegmentStream: VideoSegmentStream,\n  AudioSegmentStream: AudioSegmentStream,\n  AUDIO_PROPERTIES: AUDIO_PROPERTIES,\n  VIDEO_PROPERTIES: VIDEO_PROPERTIES\n};\n\n},{\"../aac\":38,\"../codecs/adts.js\":40,\"../codecs/h264\":41,\"../data/silence\":42,\"../m2ts/m2ts.js\":50,\"../utils/clock\":60,\"../utils/stream.js\":62,\"./mp4-generator.js\":56}],59:[function(require,module,exports){\n/**\n * mux.js\n *\n * Copyright (c) 2016 Brightcove\n * All rights reserved.\n *\n * Parse mpeg2 transport stream packets to extract basic timing information\n */\n'use strict';\n\nvar StreamTypes = require('../m2ts/stream-types.js');\nvar handleRollover = require('../m2ts/timestamp-rollover-stream.js').handleRollover;\nvar probe = {};\nprobe.ts = require('../m2ts/probe.js');\nprobe.aac = require('../aac/probe.js');\n\n\nvar\n  PES_TIMESCALE = 90000,\n  MP2T_PACKET_LENGTH = 188, // bytes\n  SYNC_BYTE = 0x47;\n\nvar isLikelyAacData = function(data) {\n  if ((data[0] === 'I'.charCodeAt(0)) &&\n      (data[1] === 'D'.charCodeAt(0)) &&\n      (data[2] === '3'.charCodeAt(0))) {\n    return true;\n  }\n  return false;\n};\n\n/**\n * walks through segment data looking for pat and pmt packets to parse out\n * program map table information\n */\nvar parsePsi_ = function(bytes, pmt) {\n  var\n    startIndex = 0,\n    endIndex = MP2T_PACKET_LENGTH,\n    packet, type;\n\n  while (endIndex < bytes.byteLength) {\n    // Look for a pair of start and end sync bytes in the data..\n    if (bytes[startIndex] === SYNC_BYTE && bytes[endIndex] === SYNC_BYTE) {\n      // We found a packet\n      packet = bytes.subarray(startIndex, endIndex);\n      type = probe.ts.parseType(packet, pmt.pid);\n\n      switch (type) {\n        case 'pat':\n          if (!pmt.pid) {\n            pmt.pid = probe.ts.parsePat(packet);\n          }\n          break;\n        case 'pmt':\n          if (!pmt.table) {\n            pmt.table = probe.ts.parsePmt(packet);\n          }\n          break;\n        default:\n          break;\n      }\n\n      // Found the pat and pmt, we can stop walking the segment\n      if (pmt.pid && pmt.table) {\n        return;\n      }\n\n      startIndex += MP2T_PACKET_LENGTH;\n      endIndex += MP2T_PACKET_LENGTH;\n      continue;\n    }\n\n    // If we get here, we have somehow become de-synchronized and we need to step\n    // forward one byte at a time until we find a pair of sync bytes that denote\n    // a packet\n    startIndex++;\n    endIndex++;\n  }\n};\n\n/**\n * walks through the segment data from the start and end to get timing information\n * for the first and last audio pes packets\n */\nvar parseAudioPes_ = function(bytes, pmt, result) {\n  var\n    startIndex = 0,\n    endIndex = MP2T_PACKET_LENGTH,\n    packet, type, pesType, pusi, parsed;\n\n  var endLoop = false;\n\n  // Start walking from start of segment to get first audio packet\n  while (endIndex < bytes.byteLength) {\n    // Look for a pair of start and end sync bytes in the data..\n    if (bytes[startIndex] === SYNC_BYTE && bytes[endIndex] === SYNC_BYTE) {\n      // We found a packet\n      packet = bytes.subarray(startIndex, endIndex);\n      type = probe.ts.parseType(packet, pmt.pid);\n\n      switch (type) {\n        case 'pes':\n          pesType = probe.ts.parsePesType(packet, pmt.table);\n          pusi = probe.ts.parsePayloadUnitStartIndicator(packet);\n          if (pesType === 'audio' && pusi) {\n            parsed = probe.ts.parsePesTime(packet);\n            if (parsed) {\n              parsed.type = 'audio';\n              result.audio.push(parsed);\n              endLoop = true;\n            }\n          }\n          break;\n        default:\n          break;\n      }\n\n      if (endLoop) {\n        break;\n      }\n\n      startIndex += MP2T_PACKET_LENGTH;\n      endIndex += MP2T_PACKET_LENGTH;\n      continue;\n    }\n\n    // If we get here, we have somehow become de-synchronized and we need to step\n    // forward one byte at a time until we find a pair of sync bytes that denote\n    // a packet\n    startIndex++;\n    endIndex++;\n  }\n\n  // Start walking from end of segment to get last audio packet\n  endIndex = bytes.byteLength;\n  startIndex = endIndex - MP2T_PACKET_LENGTH;\n  endLoop = false;\n  while (startIndex >= 0) {\n    // Look for a pair of start and end sync bytes in the data..\n    if (bytes[startIndex] === SYNC_BYTE && bytes[endIndex] === SYNC_BYTE) {\n      // We found a packet\n      packet = bytes.subarray(startIndex, endIndex);\n      type = probe.ts.parseType(packet, pmt.pid);\n\n      switch (type) {\n        case 'pes':\n          pesType = probe.ts.parsePesType(packet, pmt.table);\n          pusi = probe.ts.parsePayloadUnitStartIndicator(packet);\n          if (pesType === 'audio' && pusi) {\n            parsed = probe.ts.parsePesTime(packet);\n            if (parsed) {\n              parsed.type = 'audio';\n              result.audio.push(parsed);\n              endLoop = true;\n            }\n          }\n          break;\n        default:\n          break;\n      }\n\n      if (endLoop) {\n        break;\n      }\n\n      startIndex -= MP2T_PACKET_LENGTH;\n      endIndex -= MP2T_PACKET_LENGTH;\n      continue;\n    }\n\n    // If we get here, we have somehow become de-synchronized and we need to step\n    // forward one byte at a time until we find a pair of sync bytes that denote\n    // a packet\n    startIndex--;\n    endIndex--;\n  }\n};\n\n/**\n * walks through the segment data from the start and end to get timing information\n * for the first and last video pes packets as well as timing information for the first\n * key frame.\n */\nvar parseVideoPes_ = function(bytes, pmt, result) {\n  var\n    startIndex = 0,\n    endIndex = MP2T_PACKET_LENGTH,\n    packet, type, pesType, pusi, parsed, frame, i, pes;\n\n  var endLoop = false;\n\n  var currentFrame = {\n    data: [],\n    size: 0\n  };\n\n  // Start walking from start of segment to get first video packet\n  while (endIndex < bytes.byteLength) {\n    // Look for a pair of start and end sync bytes in the data..\n    if (bytes[startIndex] === SYNC_BYTE && bytes[endIndex] === SYNC_BYTE) {\n      // We found a packet\n      packet = bytes.subarray(startIndex, endIndex);\n      type = probe.ts.parseType(packet, pmt.pid);\n\n      switch (type) {\n        case 'pes':\n          pesType = probe.ts.parsePesType(packet, pmt.table);\n          pusi = probe.ts.parsePayloadUnitStartIndicator(packet);\n          if (pesType === 'video') {\n            if (pusi && !endLoop) {\n              parsed = probe.ts.parsePesTime(packet);\n              if (parsed) {\n                parsed.type = 'video';\n                result.video.push(parsed);\n                endLoop = true;\n              }\n            }\n            if (!result.firstKeyFrame) {\n              if (pusi) {\n                if (currentFrame.size !== 0) {\n                  frame = new Uint8Array(currentFrame.size);\n                  i = 0;\n                  while (currentFrame.data.length) {\n                    pes = currentFrame.data.shift();\n                    frame.set(pes, i);\n                    i += pes.byteLength;\n                  }\n                  if (probe.ts.videoPacketContainsKeyFrame(frame)) {\n                    result.firstKeyFrame = probe.ts.parsePesTime(frame);\n                    result.firstKeyFrame.type = 'video';\n                  }\n                  currentFrame.size = 0;\n                }\n              }\n              currentFrame.data.push(packet);\n              currentFrame.size += packet.byteLength;\n            }\n          }\n          break;\n        default:\n          break;\n      }\n\n      if (endLoop && result.firstKeyFrame) {\n        break;\n      }\n\n      startIndex += MP2T_PACKET_LENGTH;\n      endIndex += MP2T_PACKET_LENGTH;\n      continue;\n    }\n\n    // If we get here, we have somehow become de-synchronized and we need to step\n    // forward one byte at a time until we find a pair of sync bytes that denote\n    // a packet\n    startIndex++;\n    endIndex++;\n  }\n\n  // Start walking from end of segment to get last video packet\n  endIndex = bytes.byteLength;\n  startIndex = endIndex - MP2T_PACKET_LENGTH;\n  endLoop = false;\n  while (startIndex >= 0) {\n    // Look for a pair of start and end sync bytes in the data..\n    if (bytes[startIndex] === SYNC_BYTE && bytes[endIndex] === SYNC_BYTE) {\n      // We found a packet\n      packet = bytes.subarray(startIndex, endIndex);\n      type = probe.ts.parseType(packet, pmt.pid);\n\n      switch (type) {\n        case 'pes':\n          pesType = probe.ts.parsePesType(packet, pmt.table);\n          pusi = probe.ts.parsePayloadUnitStartIndicator(packet);\n          if (pesType === 'video' && pusi) {\n              parsed = probe.ts.parsePesTime(packet);\n              if (parsed) {\n                parsed.type = 'video';\n                result.video.push(parsed);\n                endLoop = true;\n              }\n          }\n          break;\n        default:\n          break;\n      }\n\n      if (endLoop) {\n        break;\n      }\n\n      startIndex -= MP2T_PACKET_LENGTH;\n      endIndex -= MP2T_PACKET_LENGTH;\n      continue;\n    }\n\n    // If we get here, we have somehow become de-synchronized and we need to step\n    // forward one byte at a time until we find a pair of sync bytes that denote\n    // a packet\n    startIndex--;\n    endIndex--;\n  }\n};\n\n/**\n * Adjusts the timestamp information for the segment to account for\n * rollover and convert to seconds based on pes packet timescale (90khz clock)\n */\nvar adjustTimestamp_ = function(segmentInfo, baseTimestamp) {\n  if (segmentInfo.audio && segmentInfo.audio.length) {\n    var audioBaseTimestamp = baseTimestamp;\n    if (typeof audioBaseTimestamp === 'undefined') {\n      audioBaseTimestamp = segmentInfo.audio[0].dts;\n    }\n    segmentInfo.audio.forEach(function(info) {\n      info.dts = handleRollover(info.dts, audioBaseTimestamp);\n      info.pts = handleRollover(info.pts, audioBaseTimestamp);\n      // time in seconds\n      info.dtsTime = info.dts / PES_TIMESCALE;\n      info.ptsTime = info.pts / PES_TIMESCALE;\n    });\n  }\n\n  if (segmentInfo.video && segmentInfo.video.length) {\n    var videoBaseTimestamp = baseTimestamp;\n    if (typeof videoBaseTimestamp === 'undefined') {\n      videoBaseTimestamp = segmentInfo.video[0].dts;\n    }\n    segmentInfo.video.forEach(function(info) {\n      info.dts = handleRollover(info.dts, videoBaseTimestamp);\n      info.pts = handleRollover(info.pts, videoBaseTimestamp);\n      // time in seconds\n      info.dtsTime = info.dts / PES_TIMESCALE;\n      info.ptsTime = info.pts / PES_TIMESCALE;\n    });\n    if (segmentInfo.firstKeyFrame) {\n      var frame = segmentInfo.firstKeyFrame;\n      frame.dts = handleRollover(frame.dts, videoBaseTimestamp);\n      frame.pts = handleRollover(frame.pts, videoBaseTimestamp);\n      // time in seconds\n      frame.dtsTime = frame.dts / PES_TIMESCALE;\n      frame.ptsTime = frame.dts / PES_TIMESCALE;\n    }\n  }\n};\n\n/**\n * inspects the aac data stream for start and end time information\n */\nvar inspectAac_ = function(bytes) {\n  var\n    endLoop = false,\n    audioCount = 0,\n    sampleRate = null,\n    timestamp = null,\n    frameSize = 0,\n    byteIndex = 0,\n    packet;\n\n  while (bytes.length - byteIndex >= 3) {\n    var type = probe.aac.parseType(bytes, byteIndex);\n    switch (type) {\n      case 'timed-metadata':\n        // Exit early because we don't have enough to parse\n        // the ID3 tag header\n        if (bytes.length - byteIndex < 10) {\n          endLoop = true;\n          break;\n        }\n\n        frameSize = probe.aac.parseId3TagSize(bytes, byteIndex);\n\n        // Exit early if we don't have enough in the buffer\n        // to emit a full packet\n        if (frameSize > bytes.length) {\n          endLoop = true;\n          break;\n        }\n        if (timestamp === null) {\n          packet = bytes.subarray(byteIndex, byteIndex + frameSize);\n          timestamp = probe.aac.parseAacTimestamp(packet);\n        }\n        byteIndex += frameSize;\n        break;\n      case 'audio':\n        // Exit early because we don't have enough to parse\n        // the ADTS frame header\n        if (bytes.length - byteIndex < 7) {\n          endLoop = true;\n          break;\n        }\n\n        frameSize = probe.aac.parseAdtsSize(bytes, byteIndex);\n\n        // Exit early if we don't have enough in the buffer\n        // to emit a full packet\n        if (frameSize > bytes.length) {\n          endLoop = true;\n          break;\n        }\n        if (sampleRate === null) {\n          packet = bytes.subarray(byteIndex, byteIndex + frameSize);\n          sampleRate = probe.aac.parseSampleRate(packet);\n        }\n        audioCount++;\n        byteIndex += frameSize;\n        break;\n      default:\n        byteIndex++;\n        break;\n    }\n    if (endLoop) {\n      return null;\n    }\n  }\n  if (sampleRate === null || timestamp === null) {\n    return null;\n  }\n\n  var audioTimescale = PES_TIMESCALE / sampleRate;\n\n  var result = {\n    audio: [\n      {\n        type: 'audio',\n        dts: timestamp,\n        pts: timestamp\n      },\n      {\n        type: 'audio',\n        dts: timestamp + (audioCount * 1024 * audioTimescale),\n        pts: timestamp + (audioCount * 1024 * audioTimescale)\n      }\n    ]\n  };\n\n  return result;\n};\n\n/**\n * inspects the transport stream segment data for start and end time information\n * of the audio and video tracks (when present) as well as the first key frame's\n * start time.\n */\nvar inspectTs_ = function(bytes) {\n  var pmt = {\n    pid: null,\n    table: null\n  };\n\n  var result = {};\n\n  parsePsi_(bytes, pmt);\n\n  for (var pid in pmt.table) {\n    if (pmt.table.hasOwnProperty(pid)) {\n      var type = pmt.table[pid];\n      switch (type) {\n        case StreamTypes.H264_STREAM_TYPE:\n          result.video = [];\n          parseVideoPes_(bytes, pmt, result);\n          if (result.video.length === 0) {\n            delete result.video;\n          }\n          break;\n        case StreamTypes.ADTS_STREAM_TYPE:\n          result.audio = [];\n          parseAudioPes_(bytes, pmt, result);\n          if (result.audio.length === 0) {\n            delete result.audio;\n          }\n          break;\n        default:\n          break;\n      }\n    }\n  }\n  return result;\n};\n\n/**\n * Inspects segment byte data and returns an object with start and end timing information\n *\n * @param {Uint8Array} bytes The segment byte data\n * @param {Number} baseTimestamp Relative reference timestamp used when adjusting frame\n *  timestamps for rollover. This value must be in 90khz clock.\n * @return {Object} Object containing start and end frame timing info of segment.\n */\nvar inspect = function(bytes, baseTimestamp) {\n  var isAacData = isLikelyAacData(bytes);\n\n  var result;\n\n  if (isAacData) {\n    result = inspectAac_(bytes);\n  } else {\n    result = inspectTs_(bytes);\n  }\n\n  if (!result || (!result.audio && !result.video)) {\n    return null;\n  }\n\n  adjustTimestamp_(result, baseTimestamp);\n\n  return result;\n};\n\nmodule.exports = {\n  inspect: inspect\n};\n\n},{\"../aac/probe.js\":39,\"../m2ts/probe.js\":52,\"../m2ts/stream-types.js\":53,\"../m2ts/timestamp-rollover-stream.js\":54}],60:[function(require,module,exports){\nvar\n  ONE_SECOND_IN_TS = 90000, // 90kHz clock\n  secondsToVideoTs,\n  secondsToAudioTs,\n  videoTsToSeconds,\n  audioTsToSeconds,\n  audioTsToVideoTs,\n  videoTsToAudioTs;\n\nsecondsToVideoTs = function(seconds) {\n  return seconds * ONE_SECOND_IN_TS;\n};\n\nsecondsToAudioTs = function(seconds, sampleRate) {\n  return seconds * sampleRate;\n};\n\nvideoTsToSeconds = function(timestamp) {\n  return timestamp / ONE_SECOND_IN_TS;\n};\n\naudioTsToSeconds = function(timestamp, sampleRate) {\n  return timestamp / sampleRate;\n};\n\naudioTsToVideoTs = function(timestamp, sampleRate) {\n  return secondsToVideoTs(audioTsToSeconds(timestamp, sampleRate));\n};\n\nvideoTsToAudioTs = function(timestamp, sampleRate) {\n  return secondsToAudioTs(videoTsToSeconds(timestamp), sampleRate);\n};\n\nmodule.exports = {\n  secondsToVideoTs: secondsToVideoTs,\n  secondsToAudioTs: secondsToAudioTs,\n  videoTsToSeconds: videoTsToSeconds,\n  audioTsToSeconds: audioTsToSeconds,\n  audioTsToVideoTs: audioTsToVideoTs,\n  videoTsToAudioTs: videoTsToAudioTs\n};\n\n},{}],61:[function(require,module,exports){\n'use strict';\n\nvar ExpGolomb;\n\n/**\n * Parser for exponential Golomb codes, a variable-bitwidth number encoding\n * scheme used by h264.\n */\nExpGolomb = function(workingData) {\n  var\n    // the number of bytes left to examine in workingData\n    workingBytesAvailable = workingData.byteLength,\n\n    // the current word being examined\n    workingWord = 0, // :uint\n\n    // the number of bits left to examine in the current word\n    workingBitsAvailable = 0; // :uint;\n\n  // ():uint\n  this.length = function() {\n    return (8 * workingBytesAvailable);\n  };\n\n  // ():uint\n  this.bitsAvailable = function() {\n    return (8 * workingBytesAvailable) + workingBitsAvailable;\n  };\n\n  // ():void\n  this.loadWord = function() {\n    var\n      position = workingData.byteLength - workingBytesAvailable,\n      workingBytes = new Uint8Array(4),\n      availableBytes = Math.min(4, workingBytesAvailable);\n\n    if (availableBytes === 0) {\n      throw new Error('no bytes available');\n    }\n\n    workingBytes.set(workingData.subarray(position,\n                                          position + availableBytes));\n    workingWord = new DataView(workingBytes.buffer).getUint32(0);\n\n    // track the amount of workingData that has been processed\n    workingBitsAvailable = availableBytes * 8;\n    workingBytesAvailable -= availableBytes;\n  };\n\n  // (count:int):void\n  this.skipBits = function(count) {\n    var skipBytes; // :int\n    if (workingBitsAvailable > count) {\n      workingWord          <<= count;\n      workingBitsAvailable -= count;\n    } else {\n      count -= workingBitsAvailable;\n      skipBytes = Math.floor(count / 8);\n\n      count -= (skipBytes * 8);\n      workingBytesAvailable -= skipBytes;\n\n      this.loadWord();\n\n      workingWord <<= count;\n      workingBitsAvailable -= count;\n    }\n  };\n\n  // (size:int):uint\n  this.readBits = function(size) {\n    var\n      bits = Math.min(workingBitsAvailable, size), // :uint\n      valu = workingWord >>> (32 - bits); // :uint\n    // if size > 31, handle error\n    workingBitsAvailable -= bits;\n    if (workingBitsAvailable > 0) {\n      workingWord <<= bits;\n    } else if (workingBytesAvailable > 0) {\n      this.loadWord();\n    }\n\n    bits = size - bits;\n    if (bits > 0) {\n      return valu << bits | this.readBits(bits);\n    }\n    return valu;\n  };\n\n  // ():uint\n  this.skipLeadingZeros = function() {\n    var leadingZeroCount; // :uint\n    for (leadingZeroCount = 0; leadingZeroCount < workingBitsAvailable; ++leadingZeroCount) {\n      if ((workingWord & (0x80000000 >>> leadingZeroCount)) !== 0) {\n        // the first bit of working word is 1\n        workingWord <<= leadingZeroCount;\n        workingBitsAvailable -= leadingZeroCount;\n        return leadingZeroCount;\n      }\n    }\n\n    // we exhausted workingWord and still have not found a 1\n    this.loadWord();\n    return leadingZeroCount + this.skipLeadingZeros();\n  };\n\n  // ():void\n  this.skipUnsignedExpGolomb = function() {\n    this.skipBits(1 + this.skipLeadingZeros());\n  };\n\n  // ():void\n  this.skipExpGolomb = function() {\n    this.skipBits(1 + this.skipLeadingZeros());\n  };\n\n  // ():uint\n  this.readUnsignedExpGolomb = function() {\n    var clz = this.skipLeadingZeros(); // :uint\n    return this.readBits(clz + 1) - 1;\n  };\n\n  // ():int\n  this.readExpGolomb = function() {\n    var valu = this.readUnsignedExpGolomb(); // :int\n    if (0x01 & valu) {\n      // the number is odd if the low order bit is set\n      return (1 + valu) >>> 1; // add 1 to make it even, and divide by 2\n    }\n    return -1 * (valu >>> 1); // divide by two then make it negative\n  };\n\n  // Some convenience functions\n  // :Boolean\n  this.readBoolean = function() {\n    return this.readBits(1) === 1;\n  };\n\n  // ():int\n  this.readUnsignedByte = function() {\n    return this.readBits(8);\n  };\n\n  this.loadWord();\n};\n\nmodule.exports = ExpGolomb;\n\n},{}],62:[function(require,module,exports){\n/**\n * mux.js\n *\n * Copyright (c) 2014 Brightcove\n * All rights reserved.\n *\n * A lightweight readable stream implemention that handles event dispatching.\n * Objects that inherit from streams should call init in their constructors.\n */\n'use strict';\n\nvar Stream = function() {\n  this.init = function() {\n    var listeners = {};\n    /**\n     * Add a listener for a specified event type.\n     * @param type {string} the event name\n     * @param listener {function} the callback to be invoked when an event of\n     * the specified type occurs\n     */\n    this.on = function(type, listener) {\n      if (!listeners[type]) {\n        listeners[type] = [];\n      }\n      listeners[type] = listeners[type].concat(listener);\n    };\n    /**\n     * Remove a listener for a specified event type.\n     * @param type {string} the event name\n     * @param listener {function} a function previously registered for this\n     * type of event through `on`\n     */\n    this.off = function(type, listener) {\n      var index;\n      if (!listeners[type]) {\n        return false;\n      }\n      index = listeners[type].indexOf(listener);\n      listeners[type] = listeners[type].slice();\n      listeners[type].splice(index, 1);\n      return index > -1;\n    };\n    /**\n     * Trigger an event of the specified type on this stream. Any additional\n     * arguments to this function are passed as parameters to event listeners.\n     * @param type {string} the event name\n     */\n    this.trigger = function(type) {\n      var callbacks, i, length, args;\n      callbacks = listeners[type];\n      if (!callbacks) {\n        return;\n      }\n      // Slicing the arguments on every invocation of this method\n      // can add a significant amount of overhead. Avoid the\n      // intermediate object creation for the common case of a\n      // single callback argument\n      if (arguments.length === 2) {\n        length = callbacks.length;\n        for (i = 0; i < length; ++i) {\n          callbacks[i].call(this, arguments[1]);\n        }\n      } else {\n        args = [];\n        i = arguments.length;\n        for (i = 1; i < arguments.length; ++i) {\n          args.push(arguments[i]);\n        }\n        length = callbacks.length;\n        for (i = 0; i < length; ++i) {\n          callbacks[i].apply(this, args);\n        }\n      }\n    };\n    /**\n     * Destroys the stream and cleans up.\n     */\n    this.dispose = function() {\n      listeners = {};\n    };\n  };\n};\n\n/**\n * Forwards all `data` events on this stream to the destination stream. The\n * destination stream should provide a method `push` to receive the data\n * events as they arrive.\n * @param destination {stream} the stream that will receive all `data` events\n * @param autoFlush {boolean} if false, we will not call `flush` on the destination\n *                            when the current stream emits a 'done' event\n * @see http://nodejs.org/api/stream.html#stream_readable_pipe_destination_options\n */\nStream.prototype.pipe = function(destination) {\n  this.on('data', function(data) {\n    destination.push(data);\n  });\n\n  this.on('done', function(flushSource) {\n    destination.flush(flushSource);\n  });\n\n  return destination;\n};\n\n// Default stream functions that are expected to be overridden to perform\n// actual work. These are provided by the prototype as a sort of no-op\n// implementation so that we don't have to check for their existence in the\n// `pipe` function above.\nStream.prototype.push = function(data) {\n  this.trigger('data', data);\n};\n\nStream.prototype.flush = function(flushSource) {\n  this.trigger('done', flushSource);\n};\n\nmodule.exports = Stream;\n\n},{}],63:[function(require,module,exports){\n// see https://tools.ietf.org/html/rfc1808\r\n\r\n/* jshint ignore:start */\r\n(function(root) { \r\n/* jshint ignore:end */\r\n\r\n  var URL_REGEX = /^((?:[a-zA-Z0-9+\\-.]+:)?)(\\/\\/[^\\/\\;?#]*)?(.*?)??(;.*?)?(\\?.*?)?(#.*?)?$/;\r\n  var FIRST_SEGMENT_REGEX = /^([^\\/;?#]*)(.*)$/;\r\n  var SLASH_DOT_REGEX = /(?:\\/|^)\\.(?=\\/)/g;\r\n  var SLASH_DOT_DOT_REGEX = /(?:\\/|^)\\.\\.\\/(?!\\.\\.\\/).*?(?=\\/)/g;\r\n\r\n  var URLToolkit = { // jshint ignore:line\r\n    // If opts.alwaysNormalize is true then the path will always be normalized even when it starts with / or //\r\n    // E.g\r\n    // With opts.alwaysNormalize = false (default, spec compliant)\r\n    // http://a.com/b/cd + /e/f/../g => http://a.com/e/f/../g\r\n    // With opts.alwaysNormalize = true (not spec compliant)\r\n    // http://a.com/b/cd + /e/f/../g => http://a.com/e/g\r\n    buildAbsoluteURL: function(baseURL, relativeURL, opts) {\r\n      opts = opts || {};\r\n      // remove any remaining space and CRLF\r\n      baseURL = baseURL.trim();\r\n      relativeURL = relativeURL.trim();\r\n      if (!relativeURL) {\r\n        // 2a) If the embedded URL is entirely empty, it inherits the\r\n        // entire base URL (i.e., is set equal to the base URL)\r\n        // and we are done.\r\n        if (!opts.alwaysNormalize) {\r\n          return baseURL;\r\n        }\r\n        var basePartsForNormalise = this.parseURL(baseURL);\r\n        if (!basePartsForNormalise) {\r\n          throw new Error('Error trying to parse base URL.');\r\n        }\r\n        basePartsForNormalise.path = URLToolkit.normalizePath(basePartsForNormalise.path);\r\n        return URLToolkit.buildURLFromParts(basePartsForNormalise);\r\n      }\r\n      var relativeParts = this.parseURL(relativeURL);\r\n      if (!relativeParts) {\r\n        throw new Error('Error trying to parse relative URL.');\r\n      }\r\n      if (relativeParts.scheme) {\r\n        // 2b) If the embedded URL starts with a scheme name, it is\r\n        // interpreted as an absolute URL and we are done.\r\n        if (!opts.alwaysNormalize) {\r\n          return relativeURL;\r\n        }\r\n        relativeParts.path = URLToolkit.normalizePath(relativeParts.path);\r\n        return URLToolkit.buildURLFromParts(relativeParts);\r\n      }\r\n      var baseParts = this.parseURL(baseURL);\r\n      if (!baseParts) {\r\n        throw new Error('Error trying to parse base URL.');\r\n      }\r\n      if (!baseParts.netLoc && baseParts.path && baseParts.path[0] !== '/') {\r\n        // If netLoc missing and path doesn't start with '/', assume everthing before the first '/' is the netLoc\r\n        // This causes 'example.com/a' to be handled as '//example.com/a' instead of '/example.com/a'\r\n        var pathParts = FIRST_SEGMENT_REGEX.exec(baseParts.path);\r\n        baseParts.netLoc = pathParts[1];\r\n        baseParts.path = pathParts[2];\r\n      }\r\n      if (baseParts.netLoc && !baseParts.path) {\r\n        baseParts.path = '/';\r\n      }\r\n      var builtParts = {\r\n        // 2c) Otherwise, the embedded URL inherits the scheme of\r\n        // the base URL.\r\n        scheme: baseParts.scheme,\r\n        netLoc: relativeParts.netLoc,\r\n        path: null,\r\n        params: relativeParts.params,\r\n        query: relativeParts.query,\r\n        fragment: relativeParts.fragment\r\n      };\r\n      if (!relativeParts.netLoc) {\r\n        // 3) If the embedded URL's <net_loc> is non-empty, we skip to\r\n        // Step 7.  Otherwise, the embedded URL inherits the <net_loc>\r\n        // (if any) of the base URL.\r\n        builtParts.netLoc = baseParts.netLoc;\r\n        // 4) If the embedded URL path is preceded by a slash \"/\", the\r\n        // path is not relative and we skip to Step 7.\r\n        if (relativeParts.path[0] !== '/') {\r\n          if (!relativeParts.path) {\r\n            // 5) If the embedded URL path is empty (and not preceded by a\r\n            // slash), then the embedded URL inherits the base URL path\r\n            builtParts.path = baseParts.path;\r\n            // 5a) if the embedded URL's <params> is non-empty, we skip to\r\n            // step 7; otherwise, it inherits the <params> of the base\r\n            // URL (if any) and\r\n            if (!relativeParts.params) {\r\n              builtParts.params = baseParts.params;\r\n              // 5b) if the embedded URL's <query> is non-empty, we skip to\r\n              // step 7; otherwise, it inherits the <query> of the base\r\n              // URL (if any) and we skip to step 7.\r\n              if (!relativeParts.query) {\r\n                builtParts.query = baseParts.query;\r\n              }\r\n            }\r\n          } else {\r\n            // 6) The last segment of the base URL's path (anything\r\n            // following the rightmost slash \"/\", or the entire path if no\r\n            // slash is present) is removed and the embedded URL's path is\r\n            // appended in its place.\r\n            var baseURLPath = baseParts.path;\r\n            var newPath = baseURLPath.substring(0, baseURLPath.lastIndexOf('/') + 1) + relativeParts.path;\r\n            builtParts.path = URLToolkit.normalizePath(newPath);\r\n          }\r\n        }\r\n      }\r\n      if (builtParts.path === null) {\r\n        builtParts.path = opts.alwaysNormalize ? URLToolkit.normalizePath(relativeParts.path) : relativeParts.path;\r\n      }\r\n      return URLToolkit.buildURLFromParts(builtParts);\r\n    },\r\n    parseURL: function(url) {\r\n      var parts = URL_REGEX.exec(url);\r\n      if (!parts) {\r\n        return null;\r\n      }\r\n      return {\r\n        scheme: parts[1] || '',\r\n        netLoc: parts[2] || '',\r\n        path: parts[3] || '',\r\n        params: parts[4] || '',\r\n        query: parts[5] || '',\r\n        fragment: parts[6] || ''\r\n      };\r\n    },\r\n    normalizePath: function(path) {\r\n      // The following operations are\r\n      // then applied, in order, to the new path:\r\n      // 6a) All occurrences of \"./\", where \".\" is a complete path\r\n      // segment, are removed.\r\n      // 6b) If the path ends with \".\" as a complete path segment,\r\n      // that \".\" is removed.\r\n      path = path.split('').reverse().join('').replace(SLASH_DOT_REGEX, '');\r\n      // 6c) All occurrences of \"<segment>/../\", where <segment> is a\r\n      // complete path segment not equal to \"..\", are removed.\r\n      // Removal of these path segments is performed iteratively,\r\n      // removing the leftmost matching pattern on each iteration,\r\n      // until no matching pattern remains.\r\n      // 6d) If the path ends with \"<segment>/..\", where <segment> is a\r\n      // complete path segment not equal to \"..\", that\r\n      // \"<segment>/..\" is removed.\r\n      while (path.length !== (path = path.replace(SLASH_DOT_DOT_REGEX, '')).length) {} // jshint ignore:line\r\n      return path.split('').reverse().join('');\r\n    },\r\n    buildURLFromParts: function(parts) {\r\n      return parts.scheme + parts.netLoc + parts.path + parts.params + parts.query + parts.fragment;\r\n    }\r\n  };\r\n\r\n/* jshint ignore:start */\r\n  if(typeof exports === 'object' && typeof module === 'object')\r\n    module.exports = URLToolkit;\r\n  else if(typeof define === 'function' && define.amd)\r\n    define([], function() { return URLToolkit; });\r\n  else if(typeof exports === 'object')\r\n    exports[\"URLToolkit\"] = URLToolkit;\r\n  else\r\n    root[\"URLToolkit\"] = URLToolkit;\r\n})(this);\r\n/* jshint ignore:end */\r\n\n},{}],64:[function(require,module,exports){\n(function (global){\n/**\n * @file add-text-track-data.js\n */\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nvar _globalWindow = require('global/window');\n\nvar _globalWindow2 = _interopRequireDefault(_globalWindow);\n\nvar _videoJs = (typeof window !== \"undefined\" ? window['videojs'] : typeof global !== \"undefined\" ? global['videojs'] : null);\n\nvar _videoJs2 = _interopRequireDefault(_videoJs);\n\n/**\n * Define properties on a cue for backwards compatability,\n * but warn the user that the way that they are using it\n * is depricated and will be removed at a later date.\n *\n * @param {Cue} cue the cue to add the properties on\n * @private\n */\nvar deprecateOldCue = function deprecateOldCue(cue) {\n  Object.defineProperties(cue.frame, {\n    id: {\n      get: function get() {\n        _videoJs2['default'].log.warn('cue.frame.id is deprecated. Use cue.value.key instead.');\n        return cue.value.key;\n      }\n    },\n    value: {\n      get: function get() {\n        _videoJs2['default'].log.warn('cue.frame.value is deprecated. Use cue.value.data instead.');\n        return cue.value.data;\n      }\n    },\n    privateData: {\n      get: function get() {\n        _videoJs2['default'].log.warn('cue.frame.privateData is deprecated. Use cue.value.data instead.');\n        return cue.value.data;\n      }\n    }\n  });\n};\n\nvar durationOfVideo = function durationOfVideo(duration) {\n  var dur = undefined;\n\n  if (isNaN(duration) || Math.abs(duration) === Infinity) {\n    dur = Number.MAX_VALUE;\n  } else {\n    dur = duration;\n  }\n  return dur;\n};\n/**\n * Add text track data to a source handler given the captions and\n * metadata from the buffer.\n *\n * @param {Object} sourceHandler the flash or virtual source buffer\n * @param {Array} captionArray an array of caption data\n * @param {Array} metadataArray an array of meta data\n * @private\n */\nvar addTextTrackData = function addTextTrackData(sourceHandler, captionArray, metadataArray) {\n  var Cue = _globalWindow2['default'].WebKitDataCue || _globalWindow2['default'].VTTCue;\n\n  if (captionArray) {\n    captionArray.forEach(function (caption) {\n      var track = caption.stream;\n\n      this.inbandTextTracks_[track].addCue(new Cue(caption.startTime + this.timestampOffset, caption.endTime + this.timestampOffset, caption.text));\n    }, sourceHandler);\n  }\n\n  if (metadataArray) {\n    (function () {\n      var videoDuration = durationOfVideo(sourceHandler.mediaSource_.duration);\n\n      metadataArray.forEach(function (metadata) {\n        var time = metadata.cueTime + this.timestampOffset;\n\n        metadata.frames.forEach(function (frame) {\n          var cue = new Cue(time, time, frame.value || frame.url || frame.data || '');\n\n          cue.frame = frame;\n          cue.value = frame;\n          deprecateOldCue(cue);\n\n          this.metadataTrack_.addCue(cue);\n        }, this);\n      }, sourceHandler);\n\n      // Updating the metadeta cues so that\n      // the endTime of each cue is the startTime of the next cue\n      // the endTime of last cue is the duration of the video\n      if (sourceHandler.metadataTrack_ && sourceHandler.metadataTrack_.cues && sourceHandler.metadataTrack_.cues.length) {\n        (function () {\n          var cues = sourceHandler.metadataTrack_.cues;\n          var cuesArray = [];\n\n          // Create a copy of the TextTrackCueList...\n          // ...disregarding cues with a falsey value\n          for (var i = 0; i < cues.length; i++) {\n            if (cues[i]) {\n              cuesArray.push(cues[i]);\n            }\n          }\n\n          // Group cues by their startTime value\n          var cuesGroupedByStartTime = cuesArray.reduce(function (obj, cue) {\n            var timeSlot = obj[cue.startTime] || [];\n\n            timeSlot.push(cue);\n            obj[cue.startTime] = timeSlot;\n\n            return obj;\n          }, {});\n\n          // Sort startTimes by ascending order\n          var sortedStartTimes = Object.keys(cuesGroupedByStartTime).sort(function (a, b) {\n            return Number(a) - Number(b);\n          });\n\n          // Map each cue group's endTime to the next group's startTime\n          sortedStartTimes.forEach(function (startTime, idx) {\n            var cueGroup = cuesGroupedByStartTime[startTime];\n            var nextTime = Number(sortedStartTimes[idx + 1]) || videoDuration;\n\n            // Map each cue's endTime the next group's startTime\n            cueGroup.forEach(function (cue) {\n              cue.endTime = nextTime;\n            });\n          });\n        })();\n      }\n    })();\n  }\n};\n\nexports['default'] = {\n  addTextTrackData: addTextTrackData,\n  durationOfVideo: durationOfVideo\n};\nmodule.exports = exports['default'];\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{\"global/window\":32}],65:[function(require,module,exports){\n/**\n * @file codec-utils.js\n */\n\n/**\n * Check if a codec string refers to an audio codec.\n *\n * @param {String} codec codec string to check\n * @return {Boolean} if this is an audio codec\n * @private\n */\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar isAudioCodec = function isAudioCodec(codec) {\n  return (/mp4a\\.\\d+.\\d+/i.test(codec)\n  );\n};\n\n/**\n * Check if a codec string refers to a video codec.\n *\n * @param {String} codec codec string to check\n * @return {Boolean} if this is a video codec\n * @private\n */\nvar isVideoCodec = function isVideoCodec(codec) {\n  return (/avc1\\.[\\da-f]+/i.test(codec)\n  );\n};\n\n/**\n * Parse a content type header into a type and parameters\n * object\n *\n * @param {String} type the content type header\n * @return {Object} the parsed content-type\n * @private\n */\nvar parseContentType = function parseContentType(type) {\n  var object = { type: '', parameters: {} };\n  var parameters = type.trim().split(';');\n\n  // first parameter should always be content-type\n  object.type = parameters.shift().trim();\n  parameters.forEach(function (parameter) {\n    var pair = parameter.trim().split('=');\n\n    if (pair.length > 1) {\n      var _name = pair[0].replace(/\"/g, '').trim();\n      var value = pair[1].replace(/\"/g, '').trim();\n\n      object.parameters[_name] = value;\n    }\n  });\n\n  return object;\n};\n\n/**\n * Replace the old apple-style `avc1.<dd>.<dd>` codec string with the standard\n * `avc1.<hhhhhh>`\n *\n * @param {Array} codecs an array of codec strings to fix\n * @return {Array} the translated codec array\n * @private\n */\nvar translateLegacyCodecs = function translateLegacyCodecs(codecs) {\n  return codecs.map(function (codec) {\n    return codec.replace(/avc1\\.(\\d+)\\.(\\d+)/i, function (orig, profile, avcLevel) {\n      var profileHex = ('00' + Number(profile).toString(16)).slice(-2);\n      var avcLevelHex = ('00' + Number(avcLevel).toString(16)).slice(-2);\n\n      return 'avc1.' + profileHex + '00' + avcLevelHex;\n    });\n  });\n};\n\nexports['default'] = {\n  isAudioCodec: isAudioCodec,\n  parseContentType: parseContentType,\n  isVideoCodec: isVideoCodec,\n  translateLegacyCodecs: translateLegacyCodecs\n};\nmodule.exports = exports['default'];\n},{}],66:[function(require,module,exports){\n/**\n * @file create-text-tracks-if-necessary.js\n */\n\n/**\n * Create text tracks on video.js if they exist on a segment.\n *\n * @param {Object} sourceBuffer the VSB or FSB\n * @param {Object} mediaSource the HTML or Flash media source\n * @param {Object} segment the segment that may contain the text track\n * @private\n */\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar createTextTracksIfNecessary = function createTextTracksIfNecessary(sourceBuffer, mediaSource, segment) {\n  var player = mediaSource.player_;\n\n  // create an in-band caption track if one is present in the segment\n  if (segment.captions && segment.captions.length) {\n    if (!sourceBuffer.inbandTextTracks_) {\n      sourceBuffer.inbandTextTracks_ = {};\n    }\n\n    for (var trackId in segment.captionStreams) {\n      if (!sourceBuffer.inbandTextTracks_[trackId]) {\n        player.tech_.trigger({ type: 'usage', name: 'hls-608' });\n        var track = player.textTracks().getTrackById(trackId);\n\n        if (track) {\n          // Resuse an existing track with a CC# id because this was\n          // very likely created by videojs-contrib-hls from information\n          // in the m3u8 for us to use\n          sourceBuffer.inbandTextTracks_[trackId] = track;\n        } else {\n          // Otherwise, create a track with the default `CC#` label and\n          // without a language\n          sourceBuffer.inbandTextTracks_[trackId] = player.addRemoteTextTrack({\n            kind: 'captions',\n            id: trackId,\n            label: trackId\n          }, false).track;\n        }\n      }\n    }\n  }\n\n  if (segment.metadata && segment.metadata.length && !sourceBuffer.metadataTrack_) {\n    sourceBuffer.metadataTrack_ = player.addRemoteTextTrack({\n      kind: 'metadata',\n      label: 'Timed Metadata'\n    }, false).track;\n    sourceBuffer.metadataTrack_.inBandMetadataTrackDispatchType = segment.metadata.dispatchType;\n  }\n};\n\nexports['default'] = createTextTracksIfNecessary;\nmodule.exports = exports['default'];\n},{}],67:[function(require,module,exports){\n/**\n * @file flash-constants.js\n */\n/**\n * The maximum size in bytes for append operations to the video.js\n * SWF. Calling through to Flash blocks and can be expensive so\n * we chunk data and pass through 4KB at a time, yielding to the\n * browser between chunks. This gives a theoretical maximum rate of\n * 1MB/s into Flash. Any higher and we begin to drop frames and UI\n * responsiveness suffers.\n *\n * @private\n */\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar flashConstants = {\n  // times in milliseconds\n  TIME_BETWEEN_CHUNKS: 1,\n  BYTES_PER_CHUNK: 1024 * 32\n};\n\nexports[\"default\"] = flashConstants;\nmodule.exports = exports[\"default\"];\n},{}],68:[function(require,module,exports){\n(function (global){\n/**\n * @file flash-media-source.js\n */\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\nvar _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar _globalDocument = require('global/document');\n\nvar _globalDocument2 = _interopRequireDefault(_globalDocument);\n\nvar _videoJs = (typeof window !== \"undefined\" ? window['videojs'] : typeof global !== \"undefined\" ? global['videojs'] : null);\n\nvar _videoJs2 = _interopRequireDefault(_videoJs);\n\nvar _flashSourceBuffer = require('./flash-source-buffer');\n\nvar _flashSourceBuffer2 = _interopRequireDefault(_flashSourceBuffer);\n\nvar _flashConstants = require('./flash-constants');\n\nvar _flashConstants2 = _interopRequireDefault(_flashConstants);\n\nvar _codecUtils = require('./codec-utils');\n\n/**\n * A flash implmentation of HTML MediaSources and a polyfill\n * for browsers that don't support native or HTML MediaSources..\n *\n * @link https://developer.mozilla.org/en-US/docs/Web/API/MediaSource\n * @class FlashMediaSource\n * @extends videojs.EventTarget\n */\n\nvar FlashMediaSource = (function (_videojs$EventTarget) {\n  _inherits(FlashMediaSource, _videojs$EventTarget);\n\n  function FlashMediaSource() {\n    var _this = this;\n\n    _classCallCheck(this, FlashMediaSource);\n\n    _get(Object.getPrototypeOf(FlashMediaSource.prototype), 'constructor', this).call(this);\n    this.sourceBuffers = [];\n    this.readyState = 'closed';\n\n    this.on(['sourceopen', 'webkitsourceopen'], function (event) {\n      // find the swf where we will push media data\n      _this.swfObj = _globalDocument2['default'].getElementById(event.swfId);\n      _this.player_ = (0, _videoJs2['default'])(_this.swfObj.parentNode);\n      _this.tech_ = _this.swfObj.tech;\n      _this.readyState = 'open';\n\n      _this.tech_.on('seeking', function () {\n        var i = _this.sourceBuffers.length;\n\n        while (i--) {\n          _this.sourceBuffers[i].abort();\n        }\n      });\n\n      // trigger load events\n      if (_this.swfObj) {\n        _this.swfObj.vjs_load();\n      }\n    });\n  }\n\n  /**\n    * Set or return the presentation duration.\n    *\n    * @param {Double} value the duration of the media in seconds\n    * @param {Double} the current presentation duration\n    * @link http://www.w3.org/TR/media-source/#widl-MediaSource-duration\n    */\n\n  /**\n   * We have this function so that the html and flash interfaces\n   * are the same.\n   *\n   * @private\n   */\n\n  _createClass(FlashMediaSource, [{\n    key: 'addSeekableRange_',\n    value: function addSeekableRange_() {}\n    // intentional no-op\n\n    /**\n     * Create a new flash source buffer and add it to our flash media source.\n     *\n     * @link https://developer.mozilla.org/en-US/docs/Web/API/MediaSource/addSourceBuffer\n     * @param {String} type the content-type of the source\n     * @return {Object} the flash source buffer\n     */\n\n  }, {\n    key: 'addSourceBuffer',\n    value: function addSourceBuffer(type) {\n      var parsedType = (0, _codecUtils.parseContentType)(type);\n      var sourceBuffer = undefined;\n\n      // if this is an FLV type, we'll push data to flash\n      if (parsedType.type === 'video/mp2t' || parsedType.type === 'audio/mp2t') {\n        // Flash source buffers\n        sourceBuffer = new _flashSourceBuffer2['default'](this);\n      } else {\n        throw new Error('NotSupportedError (Video.js)');\n      }\n\n      this.sourceBuffers.push(sourceBuffer);\n      return sourceBuffer;\n    }\n\n    /**\n     * Signals the end of the stream.\n     *\n     * @link https://w3c.github.io/media-source/#widl-MediaSource-endOfStream-void-EndOfStreamError-error\n     * @param {String=} error Signals that a playback error\n     * has occurred. If specified, it must be either \"network\" or\n     * \"decode\".\n     */\n  }, {\n    key: 'endOfStream',\n    value: function endOfStream(error) {\n      if (error === 'network') {\n        // MEDIA_ERR_NETWORK\n        this.tech_.error(2);\n      } else if (error === 'decode') {\n        // MEDIA_ERR_DECODE\n        this.tech_.error(3);\n      }\n      if (this.readyState !== 'ended') {\n        this.readyState = 'ended';\n        this.swfObj.vjs_endOfStream();\n      }\n    }\n  }]);\n\n  return FlashMediaSource;\n})(_videoJs2['default'].EventTarget);\n\nexports['default'] = FlashMediaSource;\ntry {\n  Object.defineProperty(FlashMediaSource.prototype, 'duration', {\n    /**\n     * Return the presentation duration.\n     *\n     * @return {Double} the duration of the media in seconds\n     * @link http://www.w3.org/TR/media-source/#widl-MediaSource-duration\n     */\n    get: function get() {\n      if (!this.swfObj) {\n        return NaN;\n      }\n      // get the current duration from the SWF\n      return this.swfObj.vjs_getProperty('duration');\n    },\n    /**\n     * Set the presentation duration.\n     *\n     * @param {Double} value the duration of the media in seconds\n     * @return {Double} the duration of the media in seconds\n     * @link http://www.w3.org/TR/media-source/#widl-MediaSource-duration\n     */\n    set: function set(value) {\n      var i = undefined;\n      var oldDuration = this.swfObj.vjs_getProperty('duration');\n\n      this.swfObj.vjs_setProperty('duration', value);\n\n      if (value < oldDuration) {\n        // In MSE, this triggers the range removal algorithm which causes\n        // an update to occur\n        for (i = 0; i < this.sourceBuffers.length; i++) {\n          this.sourceBuffers[i].remove(value, oldDuration);\n        }\n      }\n\n      return value;\n    }\n  });\n} catch (e) {\n  // IE8 throws if defineProperty is called on a non-DOM node. We\n  // don't support IE8 but we shouldn't throw an error if loaded\n  // there.\n  FlashMediaSource.prototype.duration = NaN;\n}\n\nfor (var property in _flashConstants2['default']) {\n  FlashMediaSource[property] = _flashConstants2['default'][property];\n}\nmodule.exports = exports['default'];\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{\"./codec-utils\":65,\"./flash-constants\":67,\"./flash-source-buffer\":69,\"global/document\":31}],69:[function(require,module,exports){\n(function (global){\n/**\n * @file flash-source-buffer.js\n */\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\nvar _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar _globalWindow = require('global/window');\n\nvar _globalWindow2 = _interopRequireDefault(_globalWindow);\n\nvar _videoJs = (typeof window !== \"undefined\" ? window['videojs'] : typeof global !== \"undefined\" ? global['videojs'] : null);\n\nvar _videoJs2 = _interopRequireDefault(_videoJs);\n\nvar _muxJsLibFlv = require('mux.js/lib/flv');\n\nvar _muxJsLibFlv2 = _interopRequireDefault(_muxJsLibFlv);\n\nvar _removeCuesFromTrack = require('./remove-cues-from-track');\n\nvar _removeCuesFromTrack2 = _interopRequireDefault(_removeCuesFromTrack);\n\nvar _createTextTracksIfNecessary = require('./create-text-tracks-if-necessary');\n\nvar _createTextTracksIfNecessary2 = _interopRequireDefault(_createTextTracksIfNecessary);\n\nvar _addTextTrackData = require('./add-text-track-data');\n\nvar _flashTransmuxerWorker = require('./flash-transmuxer-worker');\n\nvar _flashTransmuxerWorker2 = _interopRequireDefault(_flashTransmuxerWorker);\n\nvar _webwackify = require('webwackify');\n\nvar _webwackify2 = _interopRequireDefault(_webwackify);\n\nvar _flashConstants = require('./flash-constants');\n\nvar _flashConstants2 = _interopRequireDefault(_flashConstants);\n\nvar resolveFlashTransmuxWorker = function resolveFlashTransmuxWorker() {\n  var result = undefined;\n\n  try {\n    result = require.resolve('./flash-transmuxer-worker');\n  } catch (e) {\n    // no result\n  }\n\n  return result;\n};\n\n/**\n * A wrapper around the setTimeout function that uses\n * the flash constant time between ticks value.\n *\n * @param {Function} func the function callback to run\n * @private\n */\nvar scheduleTick = function scheduleTick(func) {\n  // Chrome doesn't invoke requestAnimationFrame callbacks\n  // in background tabs, so use setTimeout.\n  _globalWindow2['default'].setTimeout(func, _flashConstants2['default'].TIME_BETWEEN_CHUNKS);\n};\n\n/**\n * Generates a random string of max length 6\n *\n * @return {String} the randomly generated string\n * @function generateRandomString\n * @private\n */\nvar generateRandomString = function generateRandomString() {\n  return Math.random().toString(36).slice(2, 8);\n};\n\n/**\n * Round a number to a specified number of places much like\n * toFixed but return a number instead of a string representation.\n *\n * @param {Number} num A number\n * @param {Number} places The number of decimal places which to\n * round\n * @private\n */\nvar toDecimalPlaces = function toDecimalPlaces(num, places) {\n  if (typeof places !== 'number' || places < 0) {\n    places = 0;\n  }\n\n  var scale = Math.pow(10, places);\n\n  return Math.round(num * scale) / scale;\n};\n\n/**\n * A SourceBuffer implementation for Flash rather than HTML.\n *\n * @link https://developer.mozilla.org/en-US/docs/Web/API/MediaSource\n * @param {Object} mediaSource the flash media source\n * @class FlashSourceBuffer\n * @extends videojs.EventTarget\n */\n\nvar FlashSourceBuffer = (function (_videojs$EventTarget) {\n  _inherits(FlashSourceBuffer, _videojs$EventTarget);\n\n  function FlashSourceBuffer(mediaSource) {\n    var _this = this;\n\n    _classCallCheck(this, FlashSourceBuffer);\n\n    _get(Object.getPrototypeOf(FlashSourceBuffer.prototype), 'constructor', this).call(this);\n    var encodedHeader = undefined;\n\n    // Start off using the globally defined value but refine\n    // as we append data into flash\n    this.chunkSize_ = _flashConstants2['default'].BYTES_PER_CHUNK;\n\n    // byte arrays queued to be appended\n    this.buffer_ = [];\n\n    // the total number of queued bytes\n    this.bufferSize_ = 0;\n\n    // to be able to determine the correct position to seek to, we\n    // need to retain information about the mapping between the\n    // media timeline and PTS values\n    this.basePtsOffset_ = NaN;\n\n    this.mediaSource_ = mediaSource;\n\n    this.audioBufferEnd_ = NaN;\n    this.videoBufferEnd_ = NaN;\n\n    // indicates whether the asynchronous continuation of an operation\n    // is still being processed\n    // see https://w3c.github.io/media-source/#widl-SourceBuffer-updating\n    this.updating = false;\n    this.timestampOffset_ = 0;\n\n    encodedHeader = _globalWindow2['default'].btoa(String.fromCharCode.apply(null, Array.prototype.slice.call(_muxJsLibFlv2['default'].getFlvHeader())));\n\n    // create function names with added randomness for the global callbacks flash will use\n    // to get data from javascript into the swf. Random strings are added as a safety\n    // measure for pages with multiple players since these functions will be global\n    // instead of per instance. When making a call to the swf, the browser generates a\n    // try catch code snippet, but just takes the function name and writes out an unquoted\n    // call to that function. If the player id has any special characters, this will result\n    // in an error, so safePlayerId replaces all special characters to '_'\n    var safePlayerId = this.mediaSource_.player_.id().replace(/[^a-zA-Z0-9]/g, '_');\n\n    this.flashEncodedHeaderName_ = 'vjs_flashEncodedHeader_' + safePlayerId + generateRandomString();\n    this.flashEncodedDataName_ = 'vjs_flashEncodedData_' + safePlayerId + generateRandomString();\n\n    _globalWindow2['default'][this.flashEncodedHeaderName_] = function () {\n      delete _globalWindow2['default'][_this.flashEncodedHeaderName_];\n      return encodedHeader;\n    };\n\n    this.mediaSource_.swfObj.vjs_appendChunkReady(this.flashEncodedHeaderName_);\n\n    this.transmuxer_ = (0, _webwackify2['default'])(_flashTransmuxerWorker2['default'], resolveFlashTransmuxWorker());\n    this.transmuxer_.postMessage({ action: 'init', options: {} });\n    this.transmuxer_.onmessage = function (event) {\n      if (event.data.action === 'data') {\n        _this.receiveBuffer_(event.data.segment);\n      }\n    };\n\n    this.one('updateend', function () {\n      _this.mediaSource_.tech_.trigger('loadedmetadata');\n    });\n\n    Object.defineProperty(this, 'timestampOffset', {\n      get: function get() {\n        return this.timestampOffset_;\n      },\n      set: function set(val) {\n        if (typeof val === 'number' && val >= 0) {\n          this.timestampOffset_ = val;\n          // We have to tell flash to expect a discontinuity\n          this.mediaSource_.swfObj.vjs_discontinuity();\n          // the media <-> PTS mapping must be re-established after\n          // the discontinuity\n          this.basePtsOffset_ = NaN;\n          this.audioBufferEnd_ = NaN;\n          this.videoBufferEnd_ = NaN;\n\n          this.transmuxer_.postMessage({ action: 'reset' });\n        }\n      }\n    });\n\n    Object.defineProperty(this, 'buffered', {\n      get: function get() {\n        if (!this.mediaSource_ || !this.mediaSource_.swfObj || !('vjs_getProperty' in this.mediaSource_.swfObj)) {\n          return _videoJs2['default'].createTimeRange();\n        }\n\n        var buffered = this.mediaSource_.swfObj.vjs_getProperty('buffered');\n\n        if (buffered && buffered.length) {\n          buffered[0][0] = toDecimalPlaces(buffered[0][0], 3);\n          buffered[0][1] = toDecimalPlaces(buffered[0][1], 3);\n        }\n        return _videoJs2['default'].createTimeRanges(buffered);\n      }\n    });\n\n    // On a seek we remove all text track data since flash has no concept\n    // of a buffered-range and everything else is reset on seek\n    this.mediaSource_.player_.on('seeked', function () {\n      (0, _removeCuesFromTrack2['default'])(0, Infinity, _this.metadataTrack_);\n      if (_this.inbandTextTracks_) {\n        for (var track in _this.inbandTextTracks_) {\n          (0, _removeCuesFromTrack2['default'])(0, Infinity, _this.inbandTextTracks_[track]);\n        }\n      }\n    });\n\n    var onHlsReset = this.onHlsReset_.bind(this);\n\n    // hls-reset is fired by videojs.Hls on to the tech after the main SegmentLoader\n    // resets its state and flushes the buffer\n    this.mediaSource_.player_.tech_.on('hls-reset', onHlsReset);\n\n    this.mediaSource_.player_.tech_.hls.on('dispose', function () {\n      _this.transmuxer_.terminate();\n      _this.mediaSource_.player_.tech_.off('hls-reset', onHlsReset);\n    });\n  }\n\n  /**\n   * Append bytes to the sourcebuffers buffer, in this case we\n   * have to append it to swf object.\n   *\n   * @link https://developer.mozilla.org/en-US/docs/Web/API/SourceBuffer/appendBuffer\n   * @param {Array} bytes\n   */\n\n  _createClass(FlashSourceBuffer, [{\n    key: 'appendBuffer',\n    value: function appendBuffer(bytes) {\n      var error = undefined;\n\n      if (this.updating) {\n        error = new Error('SourceBuffer.append() cannot be called ' + 'while an update is in progress');\n        error.name = 'InvalidStateError';\n        error.code = 11;\n        throw error;\n      }\n      this.updating = true;\n      this.mediaSource_.readyState = 'open';\n      this.trigger({ type: 'update' });\n\n      this.transmuxer_.postMessage({\n        action: 'push',\n        data: bytes.buffer,\n        byteOffset: bytes.byteOffset,\n        byteLength: bytes.byteLength\n      }, [bytes.buffer]);\n      this.transmuxer_.postMessage({ action: 'flush' });\n    }\n\n    /**\n     * Reset the parser and remove any data queued to be sent to the SWF.\n     *\n     * @link https://developer.mozilla.org/en-US/docs/Web/API/SourceBuffer/abort\n     */\n  }, {\n    key: 'abort',\n    value: function abort() {\n      this.buffer_ = [];\n      this.bufferSize_ = 0;\n      this.mediaSource_.swfObj.vjs_abort();\n\n      // report any outstanding updates have ended\n      if (this.updating) {\n        this.updating = false;\n        this.trigger({ type: 'updateend' });\n      }\n    }\n\n    /**\n     * Flash cannot remove ranges already buffered in the NetStream\n     * but seeking clears the buffer entirely. For most purposes,\n     * having this operation act as a no-op is acceptable.\n     *\n     * @link https://developer.mozilla.org/en-US/docs/Web/API/SourceBuffer/remove\n     * @param {Double} start start of the section to remove\n     * @param {Double} end end of the section to remove\n     */\n  }, {\n    key: 'remove',\n    value: function remove(start, end) {\n      (0, _removeCuesFromTrack2['default'])(start, end, this.metadataTrack_);\n      if (this.inbandTextTracks_) {\n        for (var track in this.inbandTextTracks_) {\n          (0, _removeCuesFromTrack2['default'])(start, end, this.inbandTextTracks_[track]);\n        }\n      }\n      this.trigger({ type: 'update' });\n      this.trigger({ type: 'updateend' });\n    }\n\n    /**\n     * Receive a buffer from the flv.\n     *\n     * @param {Object} segment\n     * @private\n     */\n  }, {\n    key: 'receiveBuffer_',\n    value: function receiveBuffer_(segment) {\n      var _this2 = this;\n\n      // create an in-band caption track if one is present in the segment\n      (0, _createTextTracksIfNecessary2['default'])(this, this.mediaSource_, segment);\n      (0, _addTextTrackData.addTextTrackData)(this, segment.captions, segment.metadata);\n\n      // Do this asynchronously since convertTagsToData_ can be time consuming\n      scheduleTick(function () {\n        var flvBytes = _this2.convertTagsToData_(segment);\n\n        if (_this2.buffer_.length === 0) {\n          scheduleTick(_this2.processBuffer_.bind(_this2));\n        }\n\n        if (flvBytes) {\n          _this2.buffer_.push(flvBytes);\n          _this2.bufferSize_ += flvBytes.byteLength;\n        }\n      });\n    }\n\n    /**\n     * Append a portion of the current buffer to the SWF.\n     *\n     * @private\n     */\n  }, {\n    key: 'processBuffer_',\n    value: function processBuffer_() {\n      var _this3 = this;\n\n      var chunkSize = _flashConstants2['default'].BYTES_PER_CHUNK;\n\n      if (!this.buffer_.length) {\n        if (this.updating !== false) {\n          this.updating = false;\n          this.trigger({ type: 'updateend' });\n        }\n        // do nothing if the buffer is empty\n        return;\n      }\n\n      // concatenate appends up to the max append size\n      var chunk = this.buffer_[0].subarray(0, chunkSize);\n\n      // requeue any bytes that won't make it this round\n      if (chunk.byteLength < chunkSize || this.buffer_[0].byteLength === chunkSize) {\n        this.buffer_.shift();\n      } else {\n        this.buffer_[0] = this.buffer_[0].subarray(chunkSize);\n      }\n\n      this.bufferSize_ -= chunk.byteLength;\n\n      // base64 encode the bytes\n      var binary = [];\n      var length = chunk.byteLength;\n\n      for (var i = 0; i < length; i++) {\n        binary.push(String.fromCharCode(chunk[i]));\n      }\n      var b64str = _globalWindow2['default'].btoa(binary.join(''));\n\n      _globalWindow2['default'][this.flashEncodedDataName_] = function () {\n        // schedule another processBuffer to process any left over data or to\n        // trigger updateend\n        scheduleTick(_this3.processBuffer_.bind(_this3));\n        delete _globalWindow2['default'][_this3.flashEncodedDataName_];\n        return b64str;\n      };\n\n      // Notify the swf that segment data is ready to be appended\n      this.mediaSource_.swfObj.vjs_appendChunkReady(this.flashEncodedDataName_);\n    }\n\n    /**\n     * Turns an array of flv tags into a Uint8Array representing the\n     * flv data. Also removes any tags that are before the current\n     * time so that playback begins at or slightly after the right\n     * place on a seek\n     *\n     * @private\n     * @param {Object} segmentData object of segment data\n     */\n  }, {\n    key: 'convertTagsToData_',\n    value: function convertTagsToData_(segmentData) {\n      var segmentByteLength = 0;\n      var tech = this.mediaSource_.tech_;\n      var videoTargetPts = 0;\n      var segment = undefined;\n      var videoTags = segmentData.tags.videoTags;\n      var audioTags = segmentData.tags.audioTags;\n\n      // Establish the media timeline to PTS translation if we don't\n      // have one already\n      if (isNaN(this.basePtsOffset_) && (videoTags.length || audioTags.length)) {\n        // We know there is at least one video or audio tag, but since we may not have both,\n        // we use pts: Infinity for the missing tag. The will force the following Math.min\n        // call will to use the proper pts value since it will always be less than Infinity\n        var firstVideoTag = videoTags[0] || { pts: Infinity };\n        var firstAudioTag = audioTags[0] || { pts: Infinity };\n\n        this.basePtsOffset_ = Math.min(firstAudioTag.pts, firstVideoTag.pts);\n      }\n\n      if (tech.seeking()) {\n        // Do not use previously saved buffer end values while seeking since buffer\n        // is cleared on all seeks\n        this.videoBufferEnd_ = NaN;\n        this.audioBufferEnd_ = NaN;\n      }\n\n      if (isNaN(this.videoBufferEnd_)) {\n        if (tech.buffered().length) {\n          videoTargetPts = tech.buffered().end(0) - this.timestampOffset;\n        }\n\n        // Trim to currentTime if seeking\n        if (tech.seeking()) {\n          videoTargetPts = Math.max(videoTargetPts, tech.currentTime() - this.timestampOffset);\n        }\n\n        // PTS values are represented in milliseconds\n        videoTargetPts *= 1e3;\n        videoTargetPts += this.basePtsOffset_;\n      } else {\n        // Add a fudge factor of 0.1 to the last video pts appended since a rendition change\n        // could append an overlapping segment, in which case there is a high likelyhood\n        // a tag could have a matching pts to videoBufferEnd_, which would cause\n        // that tag to get appended by the tag.pts >= targetPts check below even though it\n        // is a duplicate of what was previously appended\n        videoTargetPts = this.videoBufferEnd_ + 0.1;\n      }\n\n      // filter complete GOPs with a presentation time less than the seek target/end of buffer\n      var currentIndex = videoTags.length;\n\n      // if the last tag is beyond videoTargetPts, then do not search the list for a GOP\n      // since our videoTargetPts lies in a future segment\n      if (currentIndex && videoTags[currentIndex - 1].pts >= videoTargetPts) {\n        // Start by walking backwards from the end of the list until we reach a tag that\n        // is equal to or less than videoTargetPts\n        while (--currentIndex) {\n          var currentTag = videoTags[currentIndex];\n\n          if (currentTag.pts > videoTargetPts) {\n            continue;\n          }\n\n          // if we see a keyFrame or metadata tag once we've gone below videoTargetPts,\n          // exit the loop as this is the start of the GOP that we want to append\n          if (currentTag.keyFrame || currentTag.metaDataTag) {\n            break;\n          }\n        }\n\n        // We need to check if there are any metadata tags that come before currentIndex\n        // as those will be metadata tags associated with the GOP we are appending\n        // There could be 0 to 2 metadata tags that come before the currentIndex depending\n        // on what videoTargetPts is and whether the transmuxer prepended metadata tags to this\n        // key frame\n        while (currentIndex) {\n          var nextTag = videoTags[currentIndex - 1];\n\n          if (!nextTag.metaDataTag) {\n            break;\n          }\n\n          currentIndex--;\n        }\n      }\n\n      var filteredVideoTags = videoTags.slice(currentIndex);\n\n      var audioTargetPts = undefined;\n\n      if (isNaN(this.audioBufferEnd_)) {\n        audioTargetPts = videoTargetPts;\n      } else {\n        // Add a fudge factor of 0.1 to the last video pts appended since a rendition change\n        // could append an overlapping segment, in which case there is a high likelyhood\n        // a tag could have a matching pts to videoBufferEnd_, which would cause\n        // that tag to get appended by the tag.pts >= targetPts check below even though it\n        // is a duplicate of what was previously appended\n        audioTargetPts = this.audioBufferEnd_ + 0.1;\n      }\n\n      if (filteredVideoTags.length) {\n        // If targetPts intersects a GOP and we appended the tags for the GOP that came\n        // before targetPts, we want to make sure to trim audio tags at the pts\n        // of the first video tag to avoid brief moments of silence\n        audioTargetPts = Math.min(audioTargetPts, filteredVideoTags[0].pts);\n      }\n\n      // skip tags with a presentation time less than the seek target/end of buffer\n      currentIndex = 0;\n\n      while (currentIndex < audioTags.length) {\n        if (audioTags[currentIndex].pts >= audioTargetPts) {\n          break;\n        }\n\n        currentIndex++;\n      }\n\n      var filteredAudioTags = audioTags.slice(currentIndex);\n\n      // update the audio and video buffer ends\n      if (filteredAudioTags.length) {\n        this.audioBufferEnd_ = filteredAudioTags[filteredAudioTags.length - 1].pts;\n      }\n      if (filteredVideoTags.length) {\n        this.videoBufferEnd_ = filteredVideoTags[filteredVideoTags.length - 1].pts;\n      }\n\n      var tags = this.getOrderedTags_(filteredVideoTags, filteredAudioTags);\n\n      if (tags.length === 0) {\n        return;\n      }\n\n      // If we are appending data that comes before our target pts, we want to tell\n      // the swf to adjust its notion of current time to account for the extra tags\n      // we are appending to complete the GOP that intersects with targetPts\n      if (tags[0].pts < videoTargetPts && tech.seeking()) {\n        var fudgeFactor = 1 / 30;\n        var currentTime = tech.currentTime();\n        var diff = (videoTargetPts - tags[0].pts) / 1e3;\n        var adjustedTime = currentTime - diff;\n\n        if (adjustedTime < fudgeFactor) {\n          adjustedTime = 0;\n        }\n\n        try {\n          this.mediaSource_.swfObj.vjs_adjustCurrentTime(adjustedTime);\n        } catch (e) {\n          // no-op for backwards compatability of swf. If adjustCurrentTime fails,\n          // the swf may incorrectly report currentTime and buffered ranges\n          // but should not affect playback over than the time displayed on the\n          // progress bar is inaccurate\n        }\n      }\n\n      // concatenate the bytes into a single segment\n      for (var i = 0; i < tags.length; i++) {\n        segmentByteLength += tags[i].bytes.byteLength;\n      }\n      segment = new Uint8Array(segmentByteLength);\n      for (var i = 0, j = 0; i < tags.length; i++) {\n        segment.set(tags[i].bytes, j);\n        j += tags[i].bytes.byteLength;\n      }\n\n      return segment;\n    }\n\n    /**\n     * Assemble the FLV tags in decoder order.\n     *\n     * @private\n     * @param {Array} videoTags list of video tags\n     * @param {Array} audioTags list of audio tags\n     */\n  }, {\n    key: 'getOrderedTags_',\n    value: function getOrderedTags_(videoTags, audioTags) {\n      var tag = undefined;\n      var tags = [];\n\n      while (videoTags.length || audioTags.length) {\n        if (!videoTags.length) {\n          // only audio tags remain\n          tag = audioTags.shift();\n        } else if (!audioTags.length) {\n          // only video tags remain\n          tag = videoTags.shift();\n        } else if (audioTags[0].dts < videoTags[0].dts) {\n          // audio should be decoded next\n          tag = audioTags.shift();\n        } else {\n          // video should be decoded next\n          tag = videoTags.shift();\n        }\n\n        tags.push(tag);\n      }\n\n      return tags;\n    }\n  }, {\n    key: 'onHlsReset_',\n    value: function onHlsReset_() {\n      this.transmuxer_.postMessage({ action: 'resetCaptions' });\n    }\n  }]);\n\n  return FlashSourceBuffer;\n})(_videoJs2['default'].EventTarget);\n\nexports['default'] = FlashSourceBuffer;\nmodule.exports = exports['default'];\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{\"./add-text-track-data\":64,\"./create-text-tracks-if-necessary\":66,\"./flash-constants\":67,\"./flash-transmuxer-worker\":70,\"./remove-cues-from-track\":72,\"global/window\":32,\"mux.js/lib/flv\":46,\"webwackify\":76}],70:[function(require,module,exports){\n/**\n * @file flash-transmuxer-worker.js\n */\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\nvar _globalWindow = require('global/window');\n\nvar _globalWindow2 = _interopRequireDefault(_globalWindow);\n\nvar _muxJsLibFlv = require('mux.js/lib/flv');\n\nvar _muxJsLibFlv2 = _interopRequireDefault(_muxJsLibFlv);\n\n/**\n * Re-emits transmuxer events by converting them into messages to the\n * world outside the worker.\n *\n * @param {Object} transmuxer the transmuxer to wire events on\n * @private\n */\nvar wireTransmuxerEvents = function wireTransmuxerEvents(transmuxer) {\n  transmuxer.on('data', function (segment) {\n    _globalWindow2['default'].postMessage({\n      action: 'data',\n      segment: segment\n    });\n  });\n\n  transmuxer.on('done', function (data) {\n    _globalWindow2['default'].postMessage({ action: 'done' });\n  });\n};\n\n/**\n * All incoming messages route through this hash. If no function exists\n * to handle an incoming message, then we ignore the message.\n *\n * @class MessageHandlers\n * @param {Object} options the options to initialize with\n */\n\nvar MessageHandlers = (function () {\n  function MessageHandlers(options) {\n    _classCallCheck(this, MessageHandlers);\n\n    this.options = options || {};\n    this.init();\n  }\n\n  /**\n   * Our web wroker interface so that things can talk to mux.js\n   * that will be running in a web worker. The scope is passed to this by\n   * webworkify.\n   *\n   * @param {Object} self the scope for the web worker\n   */\n\n  /**\n   * initialize our web worker and wire all the events.\n   */\n\n  _createClass(MessageHandlers, [{\n    key: 'init',\n    value: function init() {\n      if (this.transmuxer) {\n        this.transmuxer.dispose();\n      }\n      this.transmuxer = new _muxJsLibFlv2['default'].Transmuxer(this.options);\n      wireTransmuxerEvents(this.transmuxer);\n    }\n\n    /**\n     * Adds data (a ts segment) to the start of the transmuxer pipeline for\n     * processing.\n     *\n     * @param {ArrayBuffer} data data to push into the muxer\n     */\n  }, {\n    key: 'push',\n    value: function push(data) {\n      // Cast array buffer to correct type for transmuxer\n      var segment = new Uint8Array(data.data, data.byteOffset, data.byteLength);\n\n      this.transmuxer.push(segment);\n    }\n\n    /**\n     * Recreate the transmuxer so that the next segment added via `push`\n     * start with a fresh transmuxer.\n     */\n  }, {\n    key: 'reset',\n    value: function reset() {\n      this.init();\n    }\n\n    /**\n     * Forces the pipeline to finish processing the last segment and emit its\n     * results.\n     */\n  }, {\n    key: 'flush',\n    value: function flush() {\n      this.transmuxer.flush();\n    }\n  }, {\n    key: 'resetCaptions',\n    value: function resetCaptions() {\n      this.transmuxer.resetCaptions();\n    }\n  }]);\n\n  return MessageHandlers;\n})();\n\nvar FlashTransmuxerWorker = function FlashTransmuxerWorker(self) {\n  self.onmessage = function (event) {\n    if (event.data.action === 'init' && event.data.options) {\n      this.messageHandlers = new MessageHandlers(event.data.options);\n      return;\n    }\n\n    if (!this.messageHandlers) {\n      this.messageHandlers = new MessageHandlers();\n    }\n\n    if (event.data && event.data.action && event.data.action !== 'init') {\n      if (this.messageHandlers[event.data.action]) {\n        this.messageHandlers[event.data.action](event.data);\n      }\n    }\n  };\n};\n\nexports['default'] = function (self) {\n  return new FlashTransmuxerWorker(self);\n};\n\nmodule.exports = exports['default'];\n},{\"global/window\":32,\"mux.js/lib/flv\":46}],71:[function(require,module,exports){\n(function (global){\n/**\n * @file html-media-source.js\n */\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\nvar _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar _globalWindow = require('global/window');\n\nvar _globalWindow2 = _interopRequireDefault(_globalWindow);\n\nvar _globalDocument = require('global/document');\n\nvar _globalDocument2 = _interopRequireDefault(_globalDocument);\n\nvar _videoJs = (typeof window !== \"undefined\" ? window['videojs'] : typeof global !== \"undefined\" ? global['videojs'] : null);\n\nvar _videoJs2 = _interopRequireDefault(_videoJs);\n\nvar _virtualSourceBuffer = require('./virtual-source-buffer');\n\nvar _virtualSourceBuffer2 = _interopRequireDefault(_virtualSourceBuffer);\n\nvar _addTextTrackData = require('./add-text-track-data');\n\nvar _codecUtils = require('./codec-utils');\n\n/**\n * Our MediaSource implementation in HTML, mimics native\n * MediaSource where/if possible.\n *\n * @link https://developer.mozilla.org/en-US/docs/Web/API/MediaSource\n * @class HtmlMediaSource\n * @extends videojs.EventTarget\n */\n\nvar HtmlMediaSource = (function (_videojs$EventTarget) {\n  _inherits(HtmlMediaSource, _videojs$EventTarget);\n\n  function HtmlMediaSource() {\n    var _this = this;\n\n    _classCallCheck(this, HtmlMediaSource);\n\n    _get(Object.getPrototypeOf(HtmlMediaSource.prototype), 'constructor', this).call(this);\n    var property = undefined;\n\n    this.nativeMediaSource_ = new _globalWindow2['default'].MediaSource();\n    // delegate to the native MediaSource's methods by default\n    for (property in this.nativeMediaSource_) {\n      if (!(property in HtmlMediaSource.prototype) && typeof this.nativeMediaSource_[property] === 'function') {\n        this[property] = this.nativeMediaSource_[property].bind(this.nativeMediaSource_);\n      }\n    }\n\n    // emulate `duration` and `seekable` until seeking can be\n    // handled uniformly for live streams\n    // see https://github.com/w3c/media-source/issues/5\n    this.duration_ = NaN;\n    Object.defineProperty(this, 'duration', {\n      get: function get() {\n        if (this.duration_ === Infinity) {\n          return this.duration_;\n        }\n        return this.nativeMediaSource_.duration;\n      },\n      set: function set(duration) {\n        this.duration_ = duration;\n        if (duration !== Infinity) {\n          this.nativeMediaSource_.duration = duration;\n          return;\n        }\n      }\n    });\n    Object.defineProperty(this, 'seekable', {\n      get: function get() {\n        if (this.duration_ === Infinity) {\n          return _videoJs2['default'].createTimeRanges([[0, this.nativeMediaSource_.duration]]);\n        }\n        return this.nativeMediaSource_.seekable;\n      }\n    });\n\n    Object.defineProperty(this, 'readyState', {\n      get: function get() {\n        return this.nativeMediaSource_.readyState;\n      }\n    });\n\n    Object.defineProperty(this, 'activeSourceBuffers', {\n      get: function get() {\n        return this.activeSourceBuffers_;\n      }\n    });\n\n    // the list of virtual and native SourceBuffers created by this\n    // MediaSource\n    this.sourceBuffers = [];\n\n    this.activeSourceBuffers_ = [];\n\n    /**\n     * update the list of active source buffers based upon various\n     * imformation from HLS and video.js\n     *\n     * @private\n     */\n    this.updateActiveSourceBuffers_ = function () {\n      // Retain the reference but empty the array\n      _this.activeSourceBuffers_.length = 0;\n\n      // If there is only one source buffer, then it will always be active and audio will\n      // be disabled based on the codec of the source buffer\n      if (_this.sourceBuffers.length === 1) {\n        var sourceBuffer = _this.sourceBuffers[0];\n\n        sourceBuffer.appendAudioInitSegment_ = true;\n        sourceBuffer.audioDisabled_ = !sourceBuffer.audioCodec_;\n        _this.activeSourceBuffers_.push(sourceBuffer);\n        return;\n      }\n\n      // There are 2 source buffers, a combined (possibly video only) source buffer and\n      // and an audio only source buffer.\n      // By default, the audio in the combined virtual source buffer is enabled\n      // and the audio-only source buffer (if it exists) is disabled.\n      var disableCombined = false;\n      var disableAudioOnly = true;\n\n      // TODO: maybe we can store the sourcebuffers on the track objects?\n      // safari may do something like this\n      for (var i = 0; i < _this.player_.audioTracks().length; i++) {\n        var track = _this.player_.audioTracks()[i];\n\n        if (track.enabled && track.kind !== 'main') {\n          // The enabled track is an alternate audio track so disable the audio in\n          // the combined source buffer and enable the audio-only source buffer.\n          disableCombined = true;\n          disableAudioOnly = false;\n          break;\n        }\n      }\n\n      _this.sourceBuffers.forEach(function (sourceBuffer) {\n        /* eslinst-disable */\n        // TODO once codecs are required, we can switch to using the codecs to determine\n        //      what stream is the video stream, rather than relying on videoTracks\n        /* eslinst-enable */\n\n        sourceBuffer.appendAudioInitSegment_ = true;\n\n        if (sourceBuffer.videoCodec_ && sourceBuffer.audioCodec_) {\n          // combined\n          sourceBuffer.audioDisabled_ = disableCombined;\n        } else if (sourceBuffer.videoCodec_ && !sourceBuffer.audioCodec_) {\n          // If the \"combined\" source buffer is video only, then we do not want\n          // disable the audio-only source buffer (this is mostly for demuxed\n          // audio and video hls)\n          sourceBuffer.audioDisabled_ = true;\n          disableAudioOnly = false;\n        } else if (!sourceBuffer.videoCodec_ && sourceBuffer.audioCodec_) {\n          // audio only\n          sourceBuffer.audioDisabled_ = disableAudioOnly;\n          if (disableAudioOnly) {\n            return;\n          }\n        }\n\n        _this.activeSourceBuffers_.push(sourceBuffer);\n      });\n    };\n\n    this.onPlayerMediachange_ = function () {\n      _this.sourceBuffers.forEach(function (sourceBuffer) {\n        sourceBuffer.appendAudioInitSegment_ = true;\n      });\n    };\n\n    this.onHlsReset_ = function () {\n      _this.sourceBuffers.forEach(function (sourceBuffer) {\n        if (sourceBuffer.transmuxer_) {\n          sourceBuffer.transmuxer_.postMessage({ action: 'resetCaptions' });\n        }\n      });\n    };\n\n    this.onHlsSegmentTimeMapping_ = function (event) {\n      _this.sourceBuffers.forEach(function (buffer) {\n        return buffer.timeMapping_ = event.mapping;\n      });\n    };\n\n    // Re-emit MediaSource events on the polyfill\n    ['sourceopen', 'sourceclose', 'sourceended'].forEach(function (eventName) {\n      this.nativeMediaSource_.addEventListener(eventName, this.trigger.bind(this));\n    }, this);\n\n    // capture the associated player when the MediaSource is\n    // successfully attached\n    this.on('sourceopen', function (event) {\n      // Get the player this MediaSource is attached to\n      var video = _globalDocument2['default'].querySelector('[src=\"' + _this.url_ + '\"]');\n\n      if (!video) {\n        return;\n      }\n\n      _this.player_ = (0, _videoJs2['default'])(video.parentNode);\n\n      // hls-reset is fired by videojs.Hls on to the tech after the main SegmentLoader\n      // resets its state and flushes the buffer\n      _this.player_.tech_.on('hls-reset', _this.onHlsReset_);\n      // hls-segment-time-mapping is fired by videojs.Hls on to the tech after the main\n      // SegmentLoader inspects an MTS segment and has an accurate stream to display\n      // time mapping\n      _this.player_.tech_.on('hls-segment-time-mapping', _this.onHlsSegmentTimeMapping_);\n\n      if (_this.player_.audioTracks && _this.player_.audioTracks()) {\n        _this.player_.audioTracks().on('change', _this.updateActiveSourceBuffers_);\n        _this.player_.audioTracks().on('addtrack', _this.updateActiveSourceBuffers_);\n        _this.player_.audioTracks().on('removetrack', _this.updateActiveSourceBuffers_);\n      }\n\n      _this.player_.on('mediachange', _this.onPlayerMediachange_);\n    });\n\n    this.on('sourceended', function (event) {\n      var duration = (0, _addTextTrackData.durationOfVideo)(_this.duration);\n\n      for (var i = 0; i < _this.sourceBuffers.length; i++) {\n        var sourcebuffer = _this.sourceBuffers[i];\n        var cues = sourcebuffer.metadataTrack_ && sourcebuffer.metadataTrack_.cues;\n\n        if (cues && cues.length) {\n          cues[cues.length - 1].endTime = duration;\n        }\n      }\n    });\n\n    // explicitly terminate any WebWorkers that were created\n    // by SourceHandlers\n    this.on('sourceclose', function (event) {\n      this.sourceBuffers.forEach(function (sourceBuffer) {\n        if (sourceBuffer.transmuxer_) {\n          sourceBuffer.transmuxer_.terminate();\n        }\n      });\n\n      this.sourceBuffers.length = 0;\n      if (!this.player_) {\n        return;\n      }\n\n      if (this.player_.audioTracks && this.player_.audioTracks()) {\n        this.player_.audioTracks().off('change', this.updateActiveSourceBuffers_);\n        this.player_.audioTracks().off('addtrack', this.updateActiveSourceBuffers_);\n        this.player_.audioTracks().off('removetrack', this.updateActiveSourceBuffers_);\n      }\n\n      // We can only change this if the player hasn't been disposed of yet\n      // because `off` eventually tries to use the el_ property. If it has\n      // been disposed of, then don't worry about it because there are no\n      // event handlers left to unbind anyway\n      if (this.player_.el_) {\n        this.player_.off('mediachange', this.onPlayerMediachange_);\n        this.player_.tech_.off('hls-reset', this.onHlsReset_);\n        this.player_.tech_.off('hls-segment-time-mapping', this.onHlsSegmentTimeMapping_);\n      }\n    });\n  }\n\n  /**\n   * Add a range that that can now be seeked to.\n   *\n   * @param {Double} start where to start the addition\n   * @param {Double} end where to end the addition\n   * @private\n   */\n\n  _createClass(HtmlMediaSource, [{\n    key: 'addSeekableRange_',\n    value: function addSeekableRange_(start, end) {\n      var error = undefined;\n\n      if (this.duration !== Infinity) {\n        error = new Error('MediaSource.addSeekableRange() can only be invoked ' + 'when the duration is Infinity');\n        error.name = 'InvalidStateError';\n        error.code = 11;\n        throw error;\n      }\n\n      if (end > this.nativeMediaSource_.duration || isNaN(this.nativeMediaSource_.duration)) {\n        this.nativeMediaSource_.duration = end;\n      }\n    }\n\n    /**\n     * Add a source buffer to the media source.\n     *\n     * @link https://developer.mozilla.org/en-US/docs/Web/API/MediaSource/addSourceBuffer\n     * @param {String} type the content-type of the content\n     * @return {Object} the created source buffer\n     */\n  }, {\n    key: 'addSourceBuffer',\n    value: function addSourceBuffer(type) {\n      var buffer = undefined;\n      var parsedType = (0, _codecUtils.parseContentType)(type);\n\n      // Create a VirtualSourceBuffer to transmux MPEG-2 transport\n      // stream segments into fragmented MP4s\n      if (/^(video|audio)\\/mp2t$/i.test(parsedType.type)) {\n        var codecs = [];\n\n        if (parsedType.parameters && parsedType.parameters.codecs) {\n          codecs = parsedType.parameters.codecs.split(',');\n          codecs = (0, _codecUtils.translateLegacyCodecs)(codecs);\n          codecs = codecs.filter(function (codec) {\n            return (0, _codecUtils.isAudioCodec)(codec) || (0, _codecUtils.isVideoCodec)(codec);\n          });\n        }\n\n        if (codecs.length === 0) {\n          codecs = ['avc1.4d400d', 'mp4a.40.2'];\n        }\n\n        buffer = new _virtualSourceBuffer2['default'](this, codecs);\n\n        if (this.sourceBuffers.length !== 0) {\n          // If another VirtualSourceBuffer already exists, then we are creating a\n          // SourceBuffer for an alternate audio track and therefore we know that\n          // the source has both an audio and video track.\n          // That means we should trigger the manual creation of the real\n          // SourceBuffers instead of waiting for the transmuxer to return data\n          this.sourceBuffers[0].createRealSourceBuffers_();\n          buffer.createRealSourceBuffers_();\n\n          // Automatically disable the audio on the first source buffer if\n          // a second source buffer is ever created\n          this.sourceBuffers[0].audioDisabled_ = true;\n        }\n      } else {\n        // delegate to the native implementation\n        buffer = this.nativeMediaSource_.addSourceBuffer(type);\n      }\n\n      this.sourceBuffers.push(buffer);\n      return buffer;\n    }\n  }]);\n\n  return HtmlMediaSource;\n})(_videoJs2['default'].EventTarget);\n\nexports['default'] = HtmlMediaSource;\nmodule.exports = exports['default'];\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{\"./add-text-track-data\":64,\"./codec-utils\":65,\"./virtual-source-buffer\":75,\"global/document\":31,\"global/window\":32}],72:[function(require,module,exports){\n/**\n * @file remove-cues-from-track.js\n */\n\n/**\n * Remove cues from a track on video.js.\n *\n * @param {Double} start start of where we should remove the cue\n * @param {Double} end end of where the we should remove the cue\n * @param {Object} track the text track to remove the cues from\n * @private\n */\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar removeCuesFromTrack = function removeCuesFromTrack(start, end, track) {\n  var i = undefined;\n  var cue = undefined;\n\n  if (!track) {\n    return;\n  }\n\n  if (!track.cues) {\n    return;\n  }\n\n  i = track.cues.length;\n\n  while (i--) {\n    cue = track.cues[i];\n\n    // Remove any overlapping cue\n    if (cue.startTime <= end && cue.endTime >= start) {\n      track.removeCue(cue);\n    }\n  }\n};\n\nexports[\"default\"] = removeCuesFromTrack;\nmodule.exports = exports[\"default\"];\n},{}],73:[function(require,module,exports){\n/**\n * @file transmuxer-worker.js\n */\n\n/**\n * videojs-contrib-media-sources\n *\n * Copyright (c) 2015 Brightcove\n * All rights reserved.\n *\n * Handles communication between the browser-world and the mux.js\n * transmuxer running inside of a WebWorker by exposing a simple\n * message-based interface to a Transmuxer object.\n */\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\nvar _globalWindow = require('global/window');\n\nvar _globalWindow2 = _interopRequireDefault(_globalWindow);\n\nvar _muxJsLibMp4 = require('mux.js/lib/mp4');\n\nvar _muxJsLibMp42 = _interopRequireDefault(_muxJsLibMp4);\n\n/**\n * Re-emits transmuxer events by converting them into messages to the\n * world outside the worker.\n *\n * @param {Object} transmuxer the transmuxer to wire events on\n * @private\n */\nvar wireTransmuxerEvents = function wireTransmuxerEvents(transmuxer) {\n  transmuxer.on('data', function (segment) {\n    // transfer ownership of the underlying ArrayBuffer\n    // instead of doing a copy to save memory\n    // ArrayBuffers are transferable but generic TypedArrays are not\n    // @link https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Using_web_workers#Passing_data_by_transferring_ownership_(transferable_objects)\n    var initArray = segment.initSegment;\n\n    segment.initSegment = {\n      data: initArray.buffer,\n      byteOffset: initArray.byteOffset,\n      byteLength: initArray.byteLength\n    };\n\n    var typedArray = segment.data;\n\n    segment.data = typedArray.buffer;\n    _globalWindow2['default'].postMessage({\n      action: 'data',\n      segment: segment,\n      byteOffset: typedArray.byteOffset,\n      byteLength: typedArray.byteLength\n    }, [segment.data]);\n  });\n\n  if (transmuxer.captionStream) {\n    transmuxer.captionStream.on('data', function (caption) {\n      _globalWindow2['default'].postMessage({\n        action: 'caption',\n        data: caption\n      });\n    });\n  }\n\n  transmuxer.on('done', function (data) {\n    _globalWindow2['default'].postMessage({ action: 'done' });\n  });\n\n  transmuxer.on('gopInfo', function (gopInfo) {\n    _globalWindow2['default'].postMessage({\n      action: 'gopInfo',\n      gopInfo: gopInfo\n    });\n  });\n};\n\n/**\n * All incoming messages route through this hash. If no function exists\n * to handle an incoming message, then we ignore the message.\n *\n * @class MessageHandlers\n * @param {Object} options the options to initialize with\n */\n\nvar MessageHandlers = (function () {\n  function MessageHandlers(options) {\n    _classCallCheck(this, MessageHandlers);\n\n    this.options = options || {};\n    this.init();\n  }\n\n  /**\n   * Our web wroker interface so that things can talk to mux.js\n   * that will be running in a web worker. the scope is passed to this by\n   * webworkify.\n   *\n   * @param {Object} self the scope for the web worker\n   */\n\n  /**\n   * initialize our web worker and wire all the events.\n   */\n\n  _createClass(MessageHandlers, [{\n    key: 'init',\n    value: function init() {\n      if (this.transmuxer) {\n        this.transmuxer.dispose();\n      }\n      this.transmuxer = new _muxJsLibMp42['default'].Transmuxer(this.options);\n      wireTransmuxerEvents(this.transmuxer);\n    }\n\n    /**\n     * Adds data (a ts segment) to the start of the transmuxer pipeline for\n     * processing.\n     *\n     * @param {ArrayBuffer} data data to push into the muxer\n     */\n  }, {\n    key: 'push',\n    value: function push(data) {\n      // Cast array buffer to correct type for transmuxer\n      var segment = new Uint8Array(data.data, data.byteOffset, data.byteLength);\n\n      this.transmuxer.push(segment);\n    }\n\n    /**\n     * Recreate the transmuxer so that the next segment added via `push`\n     * start with a fresh transmuxer.\n     */\n  }, {\n    key: 'reset',\n    value: function reset() {\n      this.init();\n    }\n\n    /**\n     * Set the value that will be used as the `baseMediaDecodeTime` time for the\n     * next segment pushed in. Subsequent segments will have their `baseMediaDecodeTime`\n     * set relative to the first based on the PTS values.\n     *\n     * @param {Object} data used to set the timestamp offset in the muxer\n     */\n  }, {\n    key: 'setTimestampOffset',\n    value: function setTimestampOffset(data) {\n      var timestampOffset = data.timestampOffset || 0;\n\n      this.transmuxer.setBaseMediaDecodeTime(Math.round(timestampOffset * 90000));\n    }\n  }, {\n    key: 'setAudioAppendStart',\n    value: function setAudioAppendStart(data) {\n      this.transmuxer.setAudioAppendStart(Math.ceil(data.appendStart * 90000));\n    }\n\n    /**\n     * Forces the pipeline to finish processing the last segment and emit it's\n     * results.\n     *\n     * @param {Object} data event data, not really used\n     */\n  }, {\n    key: 'flush',\n    value: function flush(data) {\n      this.transmuxer.flush();\n    }\n  }, {\n    key: 'resetCaptions',\n    value: function resetCaptions() {\n      this.transmuxer.resetCaptions();\n    }\n  }, {\n    key: 'alignGopsWith',\n    value: function alignGopsWith(data) {\n      this.transmuxer.alignGopsWith(data.gopsToAlignWith.slice());\n    }\n  }]);\n\n  return MessageHandlers;\n})();\n\nvar TransmuxerWorker = function TransmuxerWorker(self) {\n  self.onmessage = function (event) {\n    if (event.data.action === 'init' && event.data.options) {\n      this.messageHandlers = new MessageHandlers(event.data.options);\n      return;\n    }\n\n    if (!this.messageHandlers) {\n      this.messageHandlers = new MessageHandlers();\n    }\n\n    if (event.data && event.data.action && event.data.action !== 'init') {\n      if (this.messageHandlers[event.data.action]) {\n        this.messageHandlers[event.data.action](event.data);\n      }\n    }\n  };\n};\n\nexports['default'] = function (self) {\n  return new TransmuxerWorker(self);\n};\n\nmodule.exports = exports['default'];\n},{\"global/window\":32,\"mux.js/lib/mp4\":55}],74:[function(require,module,exports){\n(function (global){\n/**\n * @file videojs-contrib-media-sources.js\n */\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nvar _globalWindow = require('global/window');\n\nvar _globalWindow2 = _interopRequireDefault(_globalWindow);\n\nvar _flashMediaSource = require('./flash-media-source');\n\nvar _flashMediaSource2 = _interopRequireDefault(_flashMediaSource);\n\nvar _htmlMediaSource = require('./html-media-source');\n\nvar _htmlMediaSource2 = _interopRequireDefault(_htmlMediaSource);\n\nvar _videoJs = (typeof window !== \"undefined\" ? window['videojs'] : typeof global !== \"undefined\" ? global['videojs'] : null);\n\nvar _videoJs2 = _interopRequireDefault(_videoJs);\n\nvar urlCount = 0;\n\n// ------------\n// Media Source\n// ------------\n\nvar defaults = {\n  // how to determine the MediaSource implementation to use. There\n  // are three available modes:\n  // - auto: use native MediaSources where available and Flash\n  //   everywhere else\n  // - html5: always use native MediaSources\n  // - flash: always use the Flash MediaSource polyfill\n  mode: 'auto'\n};\n\n// store references to the media sources so they can be connected\n// to a video element (a swf object)\n// TODO: can we store this somewhere local to this module?\n_videoJs2['default'].mediaSources = {};\n\n/**\n * Provide a method for a swf object to notify JS that a\n * media source is now open.\n *\n * @param {String} msObjectURL string referencing the MSE Object URL\n * @param {String} swfId the swf id\n */\nvar open = function open(msObjectURL, swfId) {\n  var mediaSource = _videoJs2['default'].mediaSources[msObjectURL];\n\n  if (mediaSource) {\n    mediaSource.trigger({ type: 'sourceopen', swfId: swfId });\n  } else {\n    throw new Error('Media Source not found (Video.js)');\n  }\n};\n\n/**\n * Check to see if the native MediaSource object exists and supports\n * an MP4 container with both H.264 video and AAC-LC audio.\n *\n * @return {Boolean} if  native media sources are supported\n */\nvar supportsNativeMediaSources = function supportsNativeMediaSources() {\n  return !!_globalWindow2['default'].MediaSource && !!_globalWindow2['default'].MediaSource.isTypeSupported && _globalWindow2['default'].MediaSource.isTypeSupported('video/mp4;codecs=\"avc1.4d400d,mp4a.40.2\"');\n};\n\n/**\n * An emulation of the MediaSource API so that we can support\n * native and non-native functionality such as flash and\n * video/mp2t videos. returns an instance of HtmlMediaSource or\n * FlashMediaSource depending on what is supported and what options\n * are passed in.\n *\n * @link https://developer.mozilla.org/en-US/docs/Web/API/MediaSource/MediaSource\n * @param {Object} options options to use during setup.\n */\nvar MediaSource = function MediaSource(options) {\n  var settings = _videoJs2['default'].mergeOptions(defaults, options);\n\n  this.MediaSource = {\n    open: open,\n    supportsNativeMediaSources: supportsNativeMediaSources\n  };\n\n  // determine whether HTML MediaSources should be used\n  if (settings.mode === 'html5' || settings.mode === 'auto' && supportsNativeMediaSources()) {\n    return new _htmlMediaSource2['default']();\n  } else if (_videoJs2['default'].getTech('Flash')) {\n    return new _flashMediaSource2['default']();\n  }\n\n  throw new Error('Cannot use Flash or Html5 to create a MediaSource for this video');\n};\n\nexports.MediaSource = MediaSource;\nMediaSource.open = open;\nMediaSource.supportsNativeMediaSources = supportsNativeMediaSources;\n\n/**\n * A wrapper around the native URL for our MSE object\n * implementation, this object is exposed under videojs.URL\n *\n * @link https://developer.mozilla.org/en-US/docs/Web/API/URL/URL\n */\nvar URL = {\n  /**\n   * A wrapper around the native createObjectURL for our objects.\n   * This function maps a native or emulated mediaSource to a blob\n   * url so that it can be loaded into video.js\n   *\n   * @link https://developer.mozilla.org/en-US/docs/Web/API/URL/createObjectURL\n   * @param {MediaSource} object the object to create a blob url to\n   */\n  createObjectURL: function createObjectURL(object) {\n    var objectUrlPrefix = 'blob:vjs-media-source/';\n    var url = undefined;\n\n    // use the native MediaSource to generate an object URL\n    if (object instanceof _htmlMediaSource2['default']) {\n      url = _globalWindow2['default'].URL.createObjectURL(object.nativeMediaSource_);\n      object.url_ = url;\n      return url;\n    }\n    // if the object isn't an emulated MediaSource, delegate to the\n    // native implementation\n    if (!(object instanceof _flashMediaSource2['default'])) {\n      url = _globalWindow2['default'].URL.createObjectURL(object);\n      object.url_ = url;\n      return url;\n    }\n\n    // build a URL that can be used to map back to the emulated\n    // MediaSource\n    url = objectUrlPrefix + urlCount;\n\n    urlCount++;\n\n    // setup the mapping back to object\n    _videoJs2['default'].mediaSources[url] = object;\n\n    return url;\n  }\n};\n\nexports.URL = URL;\n_videoJs2['default'].MediaSource = MediaSource;\n_videoJs2['default'].URL = URL;\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{\"./flash-media-source\":68,\"./html-media-source\":71,\"global/window\":32}],75:[function(require,module,exports){\n(function (global){\n/**\n * @file virtual-source-buffer.js\n */\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\nvar _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar _videoJs = (typeof window !== \"undefined\" ? window['videojs'] : typeof global !== \"undefined\" ? global['videojs'] : null);\n\nvar _videoJs2 = _interopRequireDefault(_videoJs);\n\nvar _createTextTracksIfNecessary = require('./create-text-tracks-if-necessary');\n\nvar _createTextTracksIfNecessary2 = _interopRequireDefault(_createTextTracksIfNecessary);\n\nvar _removeCuesFromTrack = require('./remove-cues-from-track');\n\nvar _removeCuesFromTrack2 = _interopRequireDefault(_removeCuesFromTrack);\n\nvar _addTextTrackData = require('./add-text-track-data');\n\nvar _webwackify = require('webwackify');\n\nvar _webwackify2 = _interopRequireDefault(_webwackify);\n\nvar _transmuxerWorker = require('./transmuxer-worker');\n\nvar _transmuxerWorker2 = _interopRequireDefault(_transmuxerWorker);\n\nvar _codecUtils = require('./codec-utils');\n\nvar resolveTransmuxWorker = function resolveTransmuxWorker() {\n  var result = undefined;\n\n  try {\n    result = require.resolve('./transmuxer-worker');\n  } catch (e) {\n    // no result\n  }\n\n  return result;\n};\n\n// We create a wrapper around the SourceBuffer so that we can manage the\n// state of the `updating` property manually. We have to do this because\n// Firefox changes `updating` to false long before triggering `updateend`\n// events and that was causing strange problems in videojs-contrib-hls\nvar makeWrappedSourceBuffer = function makeWrappedSourceBuffer(mediaSource, mimeType) {\n  var sourceBuffer = mediaSource.addSourceBuffer(mimeType);\n  var wrapper = Object.create(null);\n\n  wrapper.updating = false;\n  wrapper.realBuffer_ = sourceBuffer;\n\n  var _loop = function (key) {\n    if (typeof sourceBuffer[key] === 'function') {\n      wrapper[key] = function () {\n        return sourceBuffer[key].apply(sourceBuffer, arguments);\n      };\n    } else if (typeof wrapper[key] === 'undefined') {\n      Object.defineProperty(wrapper, key, {\n        get: function get() {\n          return sourceBuffer[key];\n        },\n        set: function set(v) {\n          return sourceBuffer[key] = v;\n        }\n      });\n    }\n  };\n\n  for (var key in sourceBuffer) {\n    _loop(key);\n  }\n\n  return wrapper;\n};\n\n/**\n * Returns a list of gops in the buffer that have a pts value of 3 seconds or more in\n * front of current time.\n *\n * @param {Array} buffer\n *        The current buffer of gop information\n * @param {Player} player\n *        The player instance\n * @param {Double} mapping\n *        Offset to map display time to stream presentation time\n * @return {Array}\n *         List of gops considered safe to append over\n */\nvar gopsSafeToAlignWith = function gopsSafeToAlignWith(buffer, player, mapping) {\n  if (!player || !buffer.length) {\n    return [];\n  }\n\n  // pts value for current time + 3 seconds to give a bit more wiggle room\n  var currentTimePts = Math.ceil((player.currentTime() - mapping + 3) * 90000);\n\n  var i = undefined;\n\n  for (i = 0; i < buffer.length; i++) {\n    if (buffer[i].pts > currentTimePts) {\n      break;\n    }\n  }\n\n  return buffer.slice(i);\n};\n\nexports.gopsSafeToAlignWith = gopsSafeToAlignWith;\n/**\n * Appends gop information (timing and byteLength) received by the transmuxer for the\n * gops appended in the last call to appendBuffer\n *\n * @param {Array} buffer\n *        The current buffer of gop information\n * @param {Array} gops\n *        List of new gop information\n * @param {boolean} replace\n *        If true, replace the buffer with the new gop information. If false, append the\n *        new gop information to the buffer in the right location of time.\n * @return {Array}\n *         Updated list of gop information\n */\nvar updateGopBuffer = function updateGopBuffer(buffer, gops, replace) {\n  if (!gops.length) {\n    return buffer;\n  }\n\n  if (replace) {\n    // If we are in safe append mode, then completely overwrite the gop buffer\n    // with the most recent appeneded data. This will make sure that when appending\n    // future segments, we only try to align with gops that are both ahead of current\n    // time and in the last segment appended.\n    return gops.slice();\n  }\n\n  var start = gops[0].pts;\n\n  var i = 0;\n\n  for (i; i < buffer.length; i++) {\n    if (buffer[i].pts >= start) {\n      break;\n    }\n  }\n\n  return buffer.slice(0, i).concat(gops);\n};\n\nexports.updateGopBuffer = updateGopBuffer;\n/**\n * Removes gop information in buffer that overlaps with provided start and end\n *\n * @param {Array} buffer\n *        The current buffer of gop information\n * @param {Double} start\n *        position to start the remove at\n * @param {Double} end\n *        position to end the remove at\n * @param {Double} mapping\n *        Offset to map display time to stream presentation time\n */\nvar removeGopBuffer = function removeGopBuffer(buffer, start, end, mapping) {\n  var startPts = Math.ceil((start - mapping) * 90000);\n  var endPts = Math.ceil((end - mapping) * 90000);\n  var updatedBuffer = buffer.slice();\n\n  var i = buffer.length;\n\n  while (i--) {\n    if (buffer[i].pts <= endPts) {\n      break;\n    }\n  }\n\n  if (i === -1) {\n    // no removal because end of remove range is before start of buffer\n    return updatedBuffer;\n  }\n\n  var j = i + 1;\n\n  while (j--) {\n    if (buffer[j].pts <= startPts) {\n      break;\n    }\n  }\n\n  // clamp remove range start to 0 index\n  j = Math.max(j, 0);\n\n  updatedBuffer.splice(j, i - j + 1);\n\n  return updatedBuffer;\n};\n\nexports.removeGopBuffer = removeGopBuffer;\n/**\n * VirtualSourceBuffers exist so that we can transmux non native formats\n * into a native format, but keep the same api as a native source buffer.\n * It creates a transmuxer, that works in its own thread (a web worker) and\n * that transmuxer muxes the data into a native format. VirtualSourceBuffer will\n * then send all of that data to the naive sourcebuffer so that it is\n * indestinguishable from a natively supported format.\n *\n * @param {HtmlMediaSource} mediaSource the parent mediaSource\n * @param {Array} codecs array of codecs that we will be dealing with\n * @class VirtualSourceBuffer\n * @extends video.js.EventTarget\n */\n\nvar VirtualSourceBuffer = (function (_videojs$EventTarget) {\n  _inherits(VirtualSourceBuffer, _videojs$EventTarget);\n\n  function VirtualSourceBuffer(mediaSource, codecs) {\n    var _this = this;\n\n    _classCallCheck(this, VirtualSourceBuffer);\n\n    _get(Object.getPrototypeOf(VirtualSourceBuffer.prototype), 'constructor', this).call(this, _videoJs2['default'].EventTarget);\n    this.timestampOffset_ = 0;\n    this.pendingBuffers_ = [];\n    this.bufferUpdating_ = false;\n\n    this.mediaSource_ = mediaSource;\n    this.codecs_ = codecs;\n    this.audioCodec_ = null;\n    this.videoCodec_ = null;\n    this.audioDisabled_ = false;\n    this.appendAudioInitSegment_ = true;\n    this.gopBuffer_ = [];\n    this.timeMapping_ = 0;\n    this.safeAppend_ = _videoJs2['default'].browser.IE_VERSION >= 11;\n\n    var options = {\n      remux: false,\n      alignGopsAtEnd: this.safeAppend_\n    };\n\n    this.codecs_.forEach(function (codec) {\n      if ((0, _codecUtils.isAudioCodec)(codec)) {\n        _this.audioCodec_ = codec;\n      } else if ((0, _codecUtils.isVideoCodec)(codec)) {\n        _this.videoCodec_ = codec;\n      }\n    });\n\n    // append muxed segments to their respective native buffers as\n    // soon as they are available\n    this.transmuxer_ = (0, _webwackify2['default'])(_transmuxerWorker2['default'], resolveTransmuxWorker());\n    this.transmuxer_.postMessage({ action: 'init', options: options });\n\n    this.transmuxer_.onmessage = function (event) {\n      if (event.data.action === 'data') {\n        return _this.data_(event);\n      }\n\n      if (event.data.action === 'done') {\n        return _this.done_(event);\n      }\n\n      if (event.data.action === 'gopInfo') {\n        return _this.appendGopInfo_(event);\n      }\n    };\n\n    // this timestampOffset is a property with the side-effect of resetting\n    // baseMediaDecodeTime in the transmuxer on the setter\n    Object.defineProperty(this, 'timestampOffset', {\n      get: function get() {\n        return this.timestampOffset_;\n      },\n      set: function set(val) {\n        if (typeof val === 'number' && val >= 0) {\n          this.timestampOffset_ = val;\n          this.appendAudioInitSegment_ = true;\n\n          // reset gop buffer on timestampoffset as this signals a change in timeline\n          this.gopBuffer_.length = 0;\n          this.timeMapping_ = 0;\n\n          // We have to tell the transmuxer to set the baseMediaDecodeTime to\n          // the desired timestampOffset for the next segment\n          this.transmuxer_.postMessage({\n            action: 'setTimestampOffset',\n            timestampOffset: val\n          });\n        }\n      }\n    });\n\n    // setting the append window affects both source buffers\n    Object.defineProperty(this, 'appendWindowStart', {\n      get: function get() {\n        return (this.videoBuffer_ || this.audioBuffer_).appendWindowStart;\n      },\n      set: function set(start) {\n        if (this.videoBuffer_) {\n          this.videoBuffer_.appendWindowStart = start;\n        }\n        if (this.audioBuffer_) {\n          this.audioBuffer_.appendWindowStart = start;\n        }\n      }\n    });\n\n    // this buffer is \"updating\" if either of its native buffers are\n    Object.defineProperty(this, 'updating', {\n      get: function get() {\n        return !!(this.bufferUpdating_ || !this.audioDisabled_ && this.audioBuffer_ && this.audioBuffer_.updating || this.videoBuffer_ && this.videoBuffer_.updating);\n      }\n    });\n\n    // the buffered property is the intersection of the buffered\n    // ranges of the native source buffers\n    Object.defineProperty(this, 'buffered', {\n      get: function get() {\n        var start = null;\n        var end = null;\n        var arity = 0;\n        var extents = [];\n        var ranges = [];\n\n        // neither buffer has been created yet\n        if (!this.videoBuffer_ && !this.audioBuffer_) {\n          return _videoJs2['default'].createTimeRange();\n        }\n\n        // only one buffer is configured\n        if (!this.videoBuffer_) {\n          return this.audioBuffer_.buffered;\n        }\n        if (!this.audioBuffer_) {\n          return this.videoBuffer_.buffered;\n        }\n\n        // both buffers are configured\n        if (this.audioDisabled_) {\n          return this.videoBuffer_.buffered;\n        }\n\n        // both buffers are empty\n        if (this.videoBuffer_.buffered.length === 0 && this.audioBuffer_.buffered.length === 0) {\n          return _videoJs2['default'].createTimeRange();\n        }\n\n        // Handle the case where we have both buffers and create an\n        // intersection of the two\n        var videoBuffered = this.videoBuffer_.buffered;\n        var audioBuffered = this.audioBuffer_.buffered;\n        var count = videoBuffered.length;\n\n        // A) Gather up all start and end times\n        while (count--) {\n          extents.push({ time: videoBuffered.start(count), type: 'start' });\n          extents.push({ time: videoBuffered.end(count), type: 'end' });\n        }\n        count = audioBuffered.length;\n        while (count--) {\n          extents.push({ time: audioBuffered.start(count), type: 'start' });\n          extents.push({ time: audioBuffered.end(count), type: 'end' });\n        }\n        // B) Sort them by time\n        extents.sort(function (a, b) {\n          return a.time - b.time;\n        });\n\n        // C) Go along one by one incrementing arity for start and decrementing\n        //    arity for ends\n        for (count = 0; count < extents.length; count++) {\n          if (extents[count].type === 'start') {\n            arity++;\n\n            // D) If arity is ever incremented to 2 we are entering an\n            //    overlapping range\n            if (arity === 2) {\n              start = extents[count].time;\n            }\n          } else if (extents[count].type === 'end') {\n            arity--;\n\n            // E) If arity is ever decremented to 1 we leaving an\n            //    overlapping range\n            if (arity === 1) {\n              end = extents[count].time;\n            }\n          }\n\n          // F) Record overlapping ranges\n          if (start !== null && end !== null) {\n            ranges.push([start, end]);\n            start = null;\n            end = null;\n          }\n        }\n\n        return _videoJs2['default'].createTimeRanges(ranges);\n      }\n    });\n  }\n\n  /**\n   * When we get a data event from the transmuxer\n   * we call this function and handle the data that\n   * was sent to us\n   *\n   * @private\n   * @param {Event} event the data event from the transmuxer\n   */\n\n  _createClass(VirtualSourceBuffer, [{\n    key: 'data_',\n    value: function data_(event) {\n      var segment = event.data.segment;\n\n      // Cast ArrayBuffer to TypedArray\n      segment.data = new Uint8Array(segment.data, event.data.byteOffset, event.data.byteLength);\n\n      segment.initSegment = new Uint8Array(segment.initSegment.data, segment.initSegment.byteOffset, segment.initSegment.byteLength);\n\n      (0, _createTextTracksIfNecessary2['default'])(this, this.mediaSource_, segment);\n\n      // Add the segments to the pendingBuffers array\n      this.pendingBuffers_.push(segment);\n      return;\n    }\n\n    /**\n     * When we get a done event from the transmuxer\n     * we call this function and we process all\n     * of the pending data that we have been saving in the\n     * data_ function\n     *\n     * @private\n     * @param {Event} event the done event from the transmuxer\n     */\n  }, {\n    key: 'done_',\n    value: function done_(event) {\n      // Don't process and append data if the mediaSource is closed\n      if (this.mediaSource_.readyState === 'closed') {\n        this.pendingBuffers_.length = 0;\n        return;\n      }\n\n      // All buffers should have been flushed from the muxer\n      // start processing anything we have received\n      this.processPendingSegments_();\n      return;\n    }\n\n    /**\n     * Create our internal native audio/video source buffers and add\n     * event handlers to them with the following conditions:\n     * 1. they do not already exist on the mediaSource\n     * 2. this VSB has a codec for them\n     *\n     * @private\n     */\n  }, {\n    key: 'createRealSourceBuffers_',\n    value: function createRealSourceBuffers_() {\n      var _this2 = this;\n\n      var types = ['audio', 'video'];\n\n      types.forEach(function (type) {\n        // Don't create a SourceBuffer of this type if we don't have a\n        // codec for it\n        if (!_this2[type + 'Codec_']) {\n          return;\n        }\n\n        // Do nothing if a SourceBuffer of this type already exists\n        if (_this2[type + 'Buffer_']) {\n          return;\n        }\n\n        var buffer = null;\n\n        // If the mediasource already has a SourceBuffer for the codec\n        // use that\n        if (_this2.mediaSource_[type + 'Buffer_']) {\n          buffer = _this2.mediaSource_[type + 'Buffer_'];\n          // In multiple audio track cases, the audio source buffer is disabled\n          // on the main VirtualSourceBuffer by the HTMLMediaSource much earlier\n          // than createRealSourceBuffers_ is called to create the second\n          // VirtualSourceBuffer because that happens as a side-effect of\n          // videojs-contrib-hls starting the audioSegmentLoader. As a result,\n          // the audioBuffer is essentially \"ownerless\" and no one will toggle\n          // the `updating` state back to false once the `updateend` event is received\n          //\n          // Setting `updating` to false manually will work around this\n          // situation and allow work to continue\n          buffer.updating = false;\n        } else {\n          var codecProperty = type + 'Codec_';\n          var mimeType = type + '/mp4;codecs=\"' + _this2[codecProperty] + '\"';\n\n          buffer = makeWrappedSourceBuffer(_this2.mediaSource_.nativeMediaSource_, mimeType);\n\n          _this2.mediaSource_[type + 'Buffer_'] = buffer;\n        }\n\n        _this2[type + 'Buffer_'] = buffer;\n\n        // Wire up the events to the SourceBuffer\n        ['update', 'updatestart', 'updateend'].forEach(function (event) {\n          buffer.addEventListener(event, function () {\n            // if audio is disabled\n            if (type === 'audio' && _this2.audioDisabled_) {\n              return;\n            }\n\n            if (event === 'updateend') {\n              _this2[type + 'Buffer_'].updating = false;\n            }\n\n            var shouldTrigger = types.every(function (t) {\n              // skip checking audio's updating status if audio\n              // is not enabled\n              if (t === 'audio' && _this2.audioDisabled_) {\n                return true;\n              }\n              // if the other type if updating we don't trigger\n              if (type !== t && _this2[t + 'Buffer_'] && _this2[t + 'Buffer_'].updating) {\n                return false;\n              }\n              return true;\n            });\n\n            if (shouldTrigger) {\n              return _this2.trigger(event);\n            }\n          });\n        });\n      });\n    }\n\n    /**\n     * Emulate the native mediasource function, but our function will\n     * send all of the proposed segments to the transmuxer so that we\n     * can transmux them before we append them to our internal\n     * native source buffers in the correct format.\n     *\n     * @link https://developer.mozilla.org/en-US/docs/Web/API/SourceBuffer/appendBuffer\n     * @param {Uint8Array} segment the segment to append to the buffer\n     */\n  }, {\n    key: 'appendBuffer',\n    value: function appendBuffer(segment) {\n      // Start the internal \"updating\" state\n      this.bufferUpdating_ = true;\n\n      if (this.audioBuffer_ && this.audioBuffer_.buffered.length) {\n        var audioBuffered = this.audioBuffer_.buffered;\n\n        this.transmuxer_.postMessage({\n          action: 'setAudioAppendStart',\n          appendStart: audioBuffered.end(audioBuffered.length - 1)\n        });\n      }\n\n      if (this.videoBuffer_) {\n        this.transmuxer_.postMessage({\n          action: 'alignGopsWith',\n          gopsToAlignWith: gopsSafeToAlignWith(this.gopBuffer_, this.mediaSource_.player_, this.timeMapping_)\n        });\n      }\n\n      this.transmuxer_.postMessage({\n        action: 'push',\n        // Send the typed-array of data as an ArrayBuffer so that\n        // it can be sent as a \"Transferable\" and avoid the costly\n        // memory copy\n        data: segment.buffer,\n\n        // To recreate the original typed-array, we need information\n        // about what portion of the ArrayBuffer it was a view into\n        byteOffset: segment.byteOffset,\n        byteLength: segment.byteLength\n      }, [segment.buffer]);\n      this.transmuxer_.postMessage({ action: 'flush' });\n    }\n\n    /**\n     * Appends gop information (timing and byteLength) received by the transmuxer for the\n     * gops appended in the last call to appendBuffer\n     *\n     * @param {Event} event\n     *        The gopInfo event from the transmuxer\n     * @param {Array} event.data.gopInfo\n     *        List of gop info to append\n     */\n  }, {\n    key: 'appendGopInfo_',\n    value: function appendGopInfo_(event) {\n      this.gopBuffer_ = updateGopBuffer(this.gopBuffer_, event.data.gopInfo, this.safeAppend_);\n    }\n\n    /**\n     * Emulate the native mediasource function and remove parts\n     * of the buffer from any of our internal buffers that exist\n     *\n     * @link https://developer.mozilla.org/en-US/docs/Web/API/SourceBuffer/remove\n     * @param {Double} start position to start the remove at\n     * @param {Double} end position to end the remove at\n     */\n  }, {\n    key: 'remove',\n    value: function remove(start, end) {\n      if (this.videoBuffer_) {\n        this.videoBuffer_.updating = true;\n        this.videoBuffer_.remove(start, end);\n        this.gopBuffer_ = removeGopBuffer(this.gopBuffer_, start, end, this.timeMapping_);\n      }\n      if (!this.audioDisabled_ && this.audioBuffer_) {\n        this.audioBuffer_.updating = true;\n        this.audioBuffer_.remove(start, end);\n      }\n\n      // Remove Metadata Cues (id3)\n      (0, _removeCuesFromTrack2['default'])(start, end, this.metadataTrack_);\n\n      // Remove Any Captions\n      if (this.inbandTextTracks_) {\n        for (var track in this.inbandTextTracks_) {\n          (0, _removeCuesFromTrack2['default'])(start, end, this.inbandTextTracks_[track]);\n        }\n      }\n    }\n\n    /**\n     * Process any segments that the muxer has output\n     * Concatenate segments together based on type and append them into\n     * their respective sourceBuffers\n     *\n     * @private\n     */\n  }, {\n    key: 'processPendingSegments_',\n    value: function processPendingSegments_() {\n      var sortedSegments = {\n        video: {\n          segments: [],\n          bytes: 0\n        },\n        audio: {\n          segments: [],\n          bytes: 0\n        },\n        captions: [],\n        metadata: []\n      };\n\n      // Sort segments into separate video/audio arrays and\n      // keep track of their total byte lengths\n      sortedSegments = this.pendingBuffers_.reduce(function (segmentObj, segment) {\n        var type = segment.type;\n        var data = segment.data;\n        var initSegment = segment.initSegment;\n\n        segmentObj[type].segments.push(data);\n        segmentObj[type].bytes += data.byteLength;\n\n        segmentObj[type].initSegment = initSegment;\n\n        // Gather any captions into a single array\n        if (segment.captions) {\n          segmentObj.captions = segmentObj.captions.concat(segment.captions);\n        }\n\n        if (segment.info) {\n          segmentObj[type].info = segment.info;\n        }\n\n        // Gather any metadata into a single array\n        if (segment.metadata) {\n          segmentObj.metadata = segmentObj.metadata.concat(segment.metadata);\n        }\n\n        return segmentObj;\n      }, sortedSegments);\n\n      // Create the real source buffers if they don't exist by now since we\n      // finally are sure what tracks are contained in the source\n      if (!this.videoBuffer_ && !this.audioBuffer_) {\n        // Remove any codecs that may have been specified by default but\n        // are no longer applicable now\n        if (sortedSegments.video.bytes === 0) {\n          this.videoCodec_ = null;\n        }\n        if (sortedSegments.audio.bytes === 0) {\n          this.audioCodec_ = null;\n        }\n\n        this.createRealSourceBuffers_();\n      }\n\n      if (sortedSegments.audio.info) {\n        this.mediaSource_.trigger({ type: 'audioinfo', info: sortedSegments.audio.info });\n      }\n      if (sortedSegments.video.info) {\n        this.mediaSource_.trigger({ type: 'videoinfo', info: sortedSegments.video.info });\n      }\n\n      if (this.appendAudioInitSegment_) {\n        if (!this.audioDisabled_ && this.audioBuffer_) {\n          sortedSegments.audio.segments.unshift(sortedSegments.audio.initSegment);\n          sortedSegments.audio.bytes += sortedSegments.audio.initSegment.byteLength;\n        }\n        this.appendAudioInitSegment_ = false;\n      }\n\n      var triggerUpdateend = false;\n\n      // Merge multiple video and audio segments into one and append\n      if (this.videoBuffer_ && sortedSegments.video.bytes) {\n        sortedSegments.video.segments.unshift(sortedSegments.video.initSegment);\n        sortedSegments.video.bytes += sortedSegments.video.initSegment.byteLength;\n        this.concatAndAppendSegments_(sortedSegments.video, this.videoBuffer_);\n        // TODO: are video tracks the only ones with text tracks?\n        (0, _addTextTrackData.addTextTrackData)(this, sortedSegments.captions, sortedSegments.metadata);\n      } else if (this.videoBuffer_ && (this.audioDisabled_ || !this.audioBuffer_)) {\n        // The transmuxer did not return any bytes of video, meaning it was all trimmed\n        // for gop alignment. Since we have a video buffer and audio is disabled, updateend\n        // will never be triggered by this source buffer, which will cause contrib-hls\n        // to be stuck forever waiting for updateend. If audio is not disabled, updateend\n        // will be triggered by the audio buffer, which will be sent upwards since the video\n        // buffer will not be in an updating state.\n        triggerUpdateend = true;\n      }\n\n      if (!this.audioDisabled_ && this.audioBuffer_) {\n        this.concatAndAppendSegments_(sortedSegments.audio, this.audioBuffer_);\n      }\n\n      this.pendingBuffers_.length = 0;\n\n      if (triggerUpdateend) {\n        this.trigger('updateend');\n      }\n\n      // We are no longer in the internal \"updating\" state\n      this.bufferUpdating_ = false;\n    }\n\n    /**\n     * Combine all segments into a single Uint8Array and then append them\n     * to the destination buffer\n     *\n     * @param {Object} segmentObj\n     * @param {SourceBuffer} destinationBuffer native source buffer to append data to\n     * @private\n     */\n  }, {\n    key: 'concatAndAppendSegments_',\n    value: function concatAndAppendSegments_(segmentObj, destinationBuffer) {\n      var offset = 0;\n      var tempBuffer = undefined;\n\n      if (segmentObj.bytes) {\n        tempBuffer = new Uint8Array(segmentObj.bytes);\n\n        // Combine the individual segments into one large typed-array\n        segmentObj.segments.forEach(function (segment) {\n          tempBuffer.set(segment, offset);\n          offset += segment.byteLength;\n        });\n\n        try {\n          destinationBuffer.updating = true;\n          destinationBuffer.appendBuffer(tempBuffer);\n        } catch (error) {\n          if (this.mediaSource_.player_) {\n            this.mediaSource_.player_.error({\n              code: -3,\n              type: 'APPEND_BUFFER_ERR',\n              message: error.message,\n              originalError: error\n            });\n          }\n        }\n      }\n    }\n\n    /**\n     * Emulate the native mediasource function. abort any soureBuffer\n     * actions and throw out any un-appended data.\n     *\n     * @link https://developer.mozilla.org/en-US/docs/Web/API/SourceBuffer/abort\n     */\n  }, {\n    key: 'abort',\n    value: function abort() {\n      if (this.videoBuffer_) {\n        this.videoBuffer_.abort();\n      }\n      if (!this.audioDisabled_ && this.audioBuffer_) {\n        this.audioBuffer_.abort();\n      }\n      if (this.transmuxer_) {\n        this.transmuxer_.postMessage({ action: 'reset' });\n      }\n      this.pendingBuffers_.length = 0;\n      this.bufferUpdating_ = false;\n    }\n  }]);\n\n  return VirtualSourceBuffer;\n})(_videoJs2['default'].EventTarget);\n\nexports['default'] = VirtualSourceBuffer;\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{\"./add-text-track-data\":64,\"./codec-utils\":65,\"./create-text-tracks-if-necessary\":66,\"./remove-cues-from-track\":72,\"./transmuxer-worker\":73,\"webwackify\":76}],76:[function(require,module,exports){\n// By default assume browserify was used to bundle app. These arguments are passed to\n// the module by browserify.\nvar bundleFn = arguments[3];\nvar sources = arguments[4];\nvar cache = arguments[5];\nvar stringify = JSON.stringify;\nvar webpack = false;\n\n// webpackBootstrap\nvar webpackBootstrapFn = function(modules) {\n  // The module cache\n  var installedModules = {};\n\n  // The require function\n  function __webpack_require__(moduleId) {\n\n    // Check if module is in cache\n    if(installedModules[moduleId]) {\n      return installedModules[moduleId].exports;\n    }\n    // Create a new module (and put it into the cache)\n    var module = installedModules[moduleId] = {\n      i: moduleId,\n      l: false,\n      exports: {}\n    };\n\n    // Execute the module function\n    modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n    // Flag the module as loaded\n    module.l = true;\n\n    // Return the exports of the module\n    return module.exports;\n  }\n\n\n  // expose the modules object (__webpack_modules__)\n  __webpack_require__.m = modules;\n\n  // expose the module cache\n  __webpack_require__.c = installedModules;\n\n  // define getter function for harmony exports\n  __webpack_require__.d = function(exports, name, getter) {\n    if(!__webpack_require__.o(exports, name)) {\n      Object.defineProperty(exports, name, {\n        configurable: false,\n        enumerable: true,\n        get: getter\n      });\n    }\n  };\n\n  // getDefaultExport function for compatibility with non-harmony modules\n  __webpack_require__.n = function(module) {\n    var getter = module && module.__esModule ?\n      function getDefault() { return module['default']; } :\n      function getModuleExports() { return module; };\n\n    __webpack_require__.d(getter, 'a', getter);\n    return getter;\n  };\n\n  // Object.prototype.hasOwnProperty.call\n  __webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n  // __webpack_public_path__\n  __webpack_require__.p = \"\";\n\n  // Load entry module and return exports\n  return __webpack_require__(__webpack_require__.s = entryModule);\n}\n\nif (typeof bundleFn === 'undefined') {\n  // Assume this was bundled with webpack and not browserify\n  webpack = true;\n  bundleFn = webpackBootstrapFn;\n  sources = __webpack_modules__;\n}\n\nvar bundleWithBrowserify = function(fn) {\n  // with browserify we must find the module key ourselves\n  var cacheKeys = Object.keys(cache);\n  var fnModuleKey;\n\n  for (var i = 0; i < cacheKeys.length; i++) {\n    var cacheKey = cacheKeys[i];\n    var cacheExports = cache[cacheKey].exports;\n\n    // Using babel as a transpiler to use esmodule, the export will always\n    // be an object with the default export as a property of it. To ensure\n    // the existing api and babel esmodule exports are both supported we\n    // check for both\n    if (cacheExports === fn || cacheExports && cacheExports.default === fn) {\n        fnModuleKey = cacheKey;\n        break;\n    }\n  }\n\n  // if we couldn't find one, lets make one\n  if (!fnModuleKey) {\n    fnModuleKey = Math.floor(Math.pow(16, 8) * Math.random()).toString(16);\n\n    var fnModuleCache = {};\n\n    for (var i = 0; i < cacheKeys.length; i++) {\n      var cacheKey = cacheKeys[i];\n\n      fnModuleCache[cacheKey] = cacheKey;\n    }\n\n    sources[fnModuleKey] = [\n      'function(require,module,exports){' + fn + '(self); }',\n      fnModuleCache\n    ];\n  }\n\n  var entryKey = Math.floor(Math.pow(16, 8) * Math.random()).toString(16);\n  var entryCache = {};\n\n  entryCache[fnModuleKey] = fnModuleKey;\n  sources[entryKey] = [\n    'function(require,module,exports){' +\n    // try to call default if defined to also support babel esmodule exports\n      'var f = require(' + stringify(fnModuleKey) + ');' +\n      '(f.default ? f.default : f)(self);' +\n    '}',\n    entryCache\n  ];\n\n  return '(' + bundleFn + ')({'\n        + Object.keys(sources).map(function(key) {\n            return stringify(key) + ':['\n                + sources[key][0] + ','\n                + stringify(sources[key][1]) + ']';\n        }).join(',')\n        + '},{},[' + stringify(entryKey) + '])';\n};\n\nvar bundleWithWebpack = function(fn, fnModuleId) {\n  var devMode = typeof fnModuleId === 'string';\n  var sourceStrings;\n\n  if (devMode) {\n    sourceStrings = {};\n  } else {\n    sourceStrings = [];\n  }\n\n  Object.keys(sources).forEach(function(sKey) {\n    if (!sources[sKey]) {\n      return;\n    }\n    sourceStrings[sKey] = sources[sKey].toString();\n  });\n\n  var fnModuleExports = __webpack_require__(fnModuleId);\n\n  // Using babel as a transpiler to use esmodule, the export will always\n  // be an object with the default export as a property of it. To ensure\n  // the existing api and babel esmodule exports are both supported we\n  // check for both\n  if (!(fnModuleExports && (fnModuleExports === fn || fnModuleExports.default === fn))) {\n    var fnSourceString = sourceStrings[fnModuleId];\n\n    sourceStrings[fnModuleId] = fnSourceString.substring(0, fnSourceString.length - 1) +\n                                '\\n' + fn.name + '();\\n}';\n  }\n\n  var modulesString;\n\n  if (devMode) {\n    // must escape quotes to support webpack loader options\n    fnModuleId = stringify(fnModuleId);\n    // dev mode in webpack4, modules are passed as an object\n    var mappedSourceStrings = Object.keys(sourceStrings).map(function(sKey) {\n      return stringify(sKey) + ':' + sourceStrings[sKey];\n    });\n\n    modulesString = '{' + mappedSourceStrings.join(',') + '}';\n  } else {\n    modulesString = '[' + sourceStrings.join(',') + ']';\n  }\n\n  return 'var fn = (' + bundleFn.toString().replace('entryModule', fnModuleId) + ')('\n        + modulesString\n        + ');\\n'\n        // not a function when calling a function from the current scope\n        + '(typeof fn === \"function\") && fn(self);';\n\n};\n\nmodule.exports = function webwackify(fn, fnModuleId) {\n  var src;\n\n  if (webpack) {\n    src = bundleWithWebpack(fn, fnModuleId);\n  } else {\n    src = bundleWithBrowserify(fn);\n  }\n\n  var blob = new Blob([src], { type: 'text/javascript' });\n  var URL = window.URL || window.webkitURL || window.mozURL || window.msURL;\n  var workerUrl = URL.createObjectURL(blob);\n  var worker = new Worker(workerUrl);\n  worker.objectURL = workerUrl;\n  return worker;\n};\n\n},{}],77:[function(require,module,exports){\n(function (global){\n/**\n * @file videojs-contrib-hls.js\n *\n * The main file for the HLS project.\n * License: https://github.com/videojs/videojs-contrib-hls/blob/master/LICENSE\n */\n'use strict';\n\nvar _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\nvar _get = function get(_x4, _x5, _x6) { var _again = true; _function: while (_again) { var object = _x4, property = _x5, receiver = _x6; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x4 = parent; _x5 = property; _x6 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar _globalDocument = require('global/document');\n\nvar _globalDocument2 = _interopRequireDefault(_globalDocument);\n\nvar _playlistLoader = require('./playlist-loader');\n\nvar _playlistLoader2 = _interopRequireDefault(_playlistLoader);\n\nvar _playlist = require('./playlist');\n\nvar _playlist2 = _interopRequireDefault(_playlist);\n\nvar _xhr = require('./xhr');\n\nvar _xhr2 = _interopRequireDefault(_xhr);\n\nvar _aesDecrypter = require('aes-decrypter');\n\nvar _binUtils = require('./bin-utils');\n\nvar _binUtils2 = _interopRequireDefault(_binUtils);\n\nvar _videojsContribMediaSources = require('videojs-contrib-media-sources');\n\nvar _m3u8Parser = require('m3u8-parser');\n\nvar _m3u8Parser2 = _interopRequireDefault(_m3u8Parser);\n\nvar _videoJs = (typeof window !== \"undefined\" ? window['videojs'] : typeof global !== \"undefined\" ? global['videojs'] : null);\n\nvar _videoJs2 = _interopRequireDefault(_videoJs);\n\nvar _masterPlaylistController = require('./master-playlist-controller');\n\nvar _config = require('./config');\n\nvar _config2 = _interopRequireDefault(_config);\n\nvar _renditionMixin = require('./rendition-mixin');\n\nvar _renditionMixin2 = _interopRequireDefault(_renditionMixin);\n\nvar _globalWindow = require('global/window');\n\nvar _globalWindow2 = _interopRequireDefault(_globalWindow);\n\nvar _playbackWatcher = require('./playback-watcher');\n\nvar _playbackWatcher2 = _interopRequireDefault(_playbackWatcher);\n\nvar _reloadSourceOnError = require('./reload-source-on-error');\n\nvar _reloadSourceOnError2 = _interopRequireDefault(_reloadSourceOnError);\n\nvar _playlistSelectorsJs = require('./playlist-selectors.js');\n\nvar Hls = {\n  PlaylistLoader: _playlistLoader2['default'],\n  Playlist: _playlist2['default'],\n  Decrypter: _aesDecrypter.Decrypter,\n  AsyncStream: _aesDecrypter.AsyncStream,\n  decrypt: _aesDecrypter.decrypt,\n  utils: _binUtils2['default'],\n\n  STANDARD_PLAYLIST_SELECTOR: _playlistSelectorsJs.lastBandwidthSelector,\n  INITIAL_PLAYLIST_SELECTOR: _playlistSelectorsJs.lowestBitrateCompatibleVariantSelector,\n  comparePlaylistBandwidth: _playlistSelectorsJs.comparePlaylistBandwidth,\n  comparePlaylistResolution: _playlistSelectorsJs.comparePlaylistResolution,\n\n  xhr: (0, _xhr2['default'])()\n};\n\n// 0.5 MB/s\nvar INITIAL_BANDWIDTH = 4194304;\n\n// Define getter/setters for config properites\n['GOAL_BUFFER_LENGTH', 'MAX_GOAL_BUFFER_LENGTH', 'GOAL_BUFFER_LENGTH_RATE', 'BUFFER_LOW_WATER_LINE', 'MAX_BUFFER_LOW_WATER_LINE', 'BUFFER_LOW_WATER_LINE_RATE', 'BANDWIDTH_VARIANCE'].forEach(function (prop) {\n  Object.defineProperty(Hls, prop, {\n    get: function get() {\n      _videoJs2['default'].log.warn('using Hls.' + prop + ' is UNSAFE be sure you know what you are doing');\n      return _config2['default'][prop];\n    },\n    set: function set(value) {\n      _videoJs2['default'].log.warn('using Hls.' + prop + ' is UNSAFE be sure you know what you are doing');\n\n      if (typeof value !== 'number' || value < 0) {\n        _videoJs2['default'].log.warn('value of Hls.' + prop + ' must be greater than or equal to 0');\n        return;\n      }\n\n      _config2['default'][prop] = value;\n    }\n  });\n});\n\n/**\n * Updates the selectedIndex of the QualityLevelList when a mediachange happens in hls.\n *\n * @param {QualityLevelList} qualityLevels The QualityLevelList to update.\n * @param {PlaylistLoader} playlistLoader PlaylistLoader containing the new media info.\n * @function handleHlsMediaChange\n */\nvar handleHlsMediaChange = function handleHlsMediaChange(qualityLevels, playlistLoader) {\n  var newPlaylist = playlistLoader.media();\n  var selectedIndex = -1;\n\n  for (var i = 0; i < qualityLevels.length; i++) {\n    if (qualityLevels[i].id === newPlaylist.uri) {\n      selectedIndex = i;\n      break;\n    }\n  }\n\n  qualityLevels.selectedIndex_ = selectedIndex;\n  qualityLevels.trigger({\n    selectedIndex: selectedIndex,\n    type: 'change'\n  });\n};\n\n/**\n * Adds quality levels to list once playlist metadata is available\n *\n * @param {QualityLevelList} qualityLevels The QualityLevelList to attach events to.\n * @param {Object} hls Hls object to listen to for media events.\n * @function handleHlsLoadedMetadata\n */\nvar handleHlsLoadedMetadata = function handleHlsLoadedMetadata(qualityLevels, hls) {\n  hls.representations().forEach(function (rep) {\n    qualityLevels.addQualityLevel(rep);\n  });\n  handleHlsMediaChange(qualityLevels, hls.playlists);\n};\n\n// HLS is a source handler, not a tech. Make sure attempts to use it\n// as one do not cause exceptions.\nHls.canPlaySource = function () {\n  return _videoJs2['default'].log.warn('HLS is no longer a tech. Please remove it from ' + 'your player\\'s techOrder.');\n};\n\n/**\n * Whether the browser has built-in HLS support.\n */\nHls.supportsNativeHls = (function () {\n  var video = _globalDocument2['default'].createElement('video');\n\n  // native HLS is definitely not supported if HTML5 video isn't\n  if (!_videoJs2['default'].getTech('Html5').isSupported()) {\n    return false;\n  }\n\n  // HLS manifests can go by many mime-types\n  var canPlay = [\n  // Apple santioned\n  'application/vnd.apple.mpegurl',\n  // Apple sanctioned for backwards compatibility\n  'audio/mpegurl',\n  // Very common\n  'audio/x-mpegurl',\n  // Very common\n  'application/x-mpegurl',\n  // Included for completeness\n  'video/x-mpegurl', 'video/mpegurl', 'application/mpegurl'];\n\n  return canPlay.some(function (canItPlay) {\n    return (/maybe|probably/i.test(video.canPlayType(canItPlay))\n    );\n  });\n})();\n\n/**\n * HLS is a source handler, not a tech. Make sure attempts to use it\n * as one do not cause exceptions.\n */\nHls.isSupported = function () {\n  return _videoJs2['default'].log.warn('HLS is no longer a tech. Please remove it from ' + 'your player\\'s techOrder.');\n};\n\nvar Component = _videoJs2['default'].getComponent('Component');\n\n/**\n * The Hls Handler object, where we orchestrate all of the parts\n * of HLS to interact with video.js\n *\n * @class HlsHandler\n * @extends videojs.Component\n * @param {Object} source the soruce object\n * @param {Tech} tech the parent tech object\n * @param {Object} options optional and required options\n */\n\nvar HlsHandler = (function (_Component) {\n  _inherits(HlsHandler, _Component);\n\n  function HlsHandler(source, tech, options) {\n    var _this = this;\n\n    _classCallCheck(this, HlsHandler);\n\n    _get(Object.getPrototypeOf(HlsHandler.prototype), 'constructor', this).call(this, tech, options.hls);\n\n    // tech.player() is deprecated but setup a reference to HLS for\n    // backwards-compatibility\n    if (tech.options_ && tech.options_.playerId) {\n      var _player = (0, _videoJs2['default'])(tech.options_.playerId);\n\n      if (!_player.hasOwnProperty('hls')) {\n        Object.defineProperty(_player, 'hls', {\n          get: function get() {\n            _videoJs2['default'].log.warn('player.hls is deprecated. Use player.tech_.hls instead.');\n            tech.trigger({ type: 'usage', name: 'hls-player-access' });\n            return _this;\n          }\n        });\n      }\n    }\n\n    this.tech_ = tech;\n    this.source_ = source;\n    this.stats = {};\n    this.ignoreNextSeekingEvent_ = false;\n    this.setOptions_();\n\n    // overriding native HLS only works if audio tracks have been emulated\n    // error early if we're misconfigured:\n    if (this.options_.overrideNative && (tech.featuresNativeVideoTracks || tech.featuresNativeAudioTracks)) {\n      throw new Error('Overriding native HLS requires emulated tracks. ' + 'See https://git.io/vMpjB');\n    }\n\n    // listen for fullscreenchange events for this player so that we\n    // can adjust our quality selection quickly\n    this.on(_globalDocument2['default'], ['fullscreenchange', 'webkitfullscreenchange', 'mozfullscreenchange', 'MSFullscreenChange'], function (event) {\n      var fullscreenElement = _globalDocument2['default'].fullscreenElement || _globalDocument2['default'].webkitFullscreenElement || _globalDocument2['default'].mozFullScreenElement || _globalDocument2['default'].msFullscreenElement;\n\n      if (fullscreenElement && fullscreenElement.contains(_this.tech_.el())) {\n        _this.masterPlaylistController_.fastQualityChange_();\n      }\n    });\n\n    this.on(this.tech_, 'seeking', function () {\n      if (this.ignoreNextSeekingEvent_) {\n        this.ignoreNextSeekingEvent_ = false;\n        return;\n      }\n\n      this.setCurrentTime(this.tech_.currentTime());\n    });\n    this.on(this.tech_, 'error', function () {\n      if (this.masterPlaylistController_) {\n        this.masterPlaylistController_.pauseLoading();\n      }\n    });\n\n    this.on(this.tech_, 'play', this.play);\n  }\n\n  /**\n   * The Source Handler object, which informs video.js what additional\n   * MIME types are supported and sets up playback. It is registered\n   * automatically to the appropriate tech based on the capabilities of\n   * the browser it is running in. It is not necessary to use or modify\n   * this object in normal usage.\n   */\n\n  _createClass(HlsHandler, [{\n    key: 'setOptions_',\n    value: function setOptions_() {\n      var _this2 = this;\n\n      // defaults\n      this.options_.withCredentials = this.options_.withCredentials || false;\n\n      if (typeof this.options_.blacklistDuration !== 'number') {\n        this.options_.blacklistDuration = 5 * 60;\n      }\n\n      // start playlist selection at a reasonable bandwidth for\n      // broadband internet (0.5 MB/s) or mobile (0.0625 MB/s)\n      if (typeof this.options_.bandwidth !== 'number') {\n        this.options_.bandwidth = INITIAL_BANDWIDTH;\n      }\n\n      // If the bandwidth number is unchanged from the initial setting\n      // then this takes precedence over the enableLowInitialPlaylist option\n      this.options_.enableLowInitialPlaylist = this.options_.enableLowInitialPlaylist && this.options_.bandwidth === INITIAL_BANDWIDTH;\n\n      // grab options passed to player.src\n      ['withCredentials', 'bandwidth'].forEach(function (option) {\n        if (typeof _this2.source_[option] !== 'undefined') {\n          _this2.options_[option] = _this2.source_[option];\n        }\n      });\n\n      this.bandwidth = this.options_.bandwidth;\n    }\n\n    /**\n     * called when player.src gets called, handle a new source\n     *\n     * @param {Object} src the source object to handle\n     */\n  }, {\n    key: 'src',\n    value: function src(_src) {\n      var _this3 = this;\n\n      // do nothing if the src is falsey\n      if (!_src) {\n        return;\n      }\n      this.setOptions_();\n      // add master playlist controller options\n      this.options_.url = this.source_.src;\n      this.options_.tech = this.tech_;\n      this.options_.externHls = Hls;\n\n      this.masterPlaylistController_ = new _masterPlaylistController.MasterPlaylistController(this.options_);\n      this.playbackWatcher_ = new _playbackWatcher2['default'](_videoJs2['default'].mergeOptions(this.options_, {\n        seekable: function seekable() {\n          return _this3.seekable();\n        }\n      }));\n\n      this.masterPlaylistController_.on('error', function () {\n        var player = _videoJs2['default'].players[_this3.tech_.options_.playerId];\n\n        player.error(_this3.masterPlaylistController_.error);\n      });\n\n      // `this` in selectPlaylist should be the HlsHandler for backwards\n      // compatibility with < v2\n      this.masterPlaylistController_.selectPlaylist = this.selectPlaylist ? this.selectPlaylist.bind(this) : Hls.STANDARD_PLAYLIST_SELECTOR.bind(this);\n\n      this.masterPlaylistController_.selectInitialPlaylist = Hls.INITIAL_PLAYLIST_SELECTOR.bind(this);\n\n      // re-expose some internal objects for backwards compatibility with < v2\n      this.playlists = this.masterPlaylistController_.masterPlaylistLoader_;\n      this.mediaSource = this.masterPlaylistController_.mediaSource;\n\n      // Proxy assignment of some properties to the master playlist\n      // controller. Using a custom property for backwards compatibility\n      // with < v2\n      Object.defineProperties(this, {\n        selectPlaylist: {\n          get: function get() {\n            return this.masterPlaylistController_.selectPlaylist;\n          },\n          set: function set(selectPlaylist) {\n            this.masterPlaylistController_.selectPlaylist = selectPlaylist.bind(this);\n          }\n        },\n        throughput: {\n          get: function get() {\n            return this.masterPlaylistController_.mainSegmentLoader_.throughput.rate;\n          },\n          set: function set(throughput) {\n            this.masterPlaylistController_.mainSegmentLoader_.throughput.rate = throughput;\n            // By setting `count` to 1 the throughput value becomes the starting value\n            // for the cumulative average\n            this.masterPlaylistController_.mainSegmentLoader_.throughput.count = 1;\n          }\n        },\n        bandwidth: {\n          get: function get() {\n            return this.masterPlaylistController_.mainSegmentLoader_.bandwidth;\n          },\n          set: function set(bandwidth) {\n            this.masterPlaylistController_.mainSegmentLoader_.bandwidth = bandwidth;\n            // setting the bandwidth manually resets the throughput counter\n            // `count` is set to zero that current value of `rate` isn't included\n            // in the cumulative average\n            this.masterPlaylistController_.mainSegmentLoader_.throughput = {\n              rate: 0,\n              count: 0\n            };\n          }\n        },\n        /**\n         * `systemBandwidth` is a combination of two serial processes bit-rates. The first\n         * is the network bitrate provided by `bandwidth` and the second is the bitrate of\n         * the entire process after that - decryption, transmuxing, and appending - provided\n         * by `throughput`.\n         *\n         * Since the two process are serial, the overall system bandwidth is given by:\n         *   sysBandwidth = 1 / (1 / bandwidth + 1 / throughput)\n         */\n        systemBandwidth: {\n          get: function get() {\n            var invBandwidth = 1 / (this.bandwidth || 1);\n            var invThroughput = undefined;\n\n            if (this.throughput > 0) {\n              invThroughput = 1 / this.throughput;\n            } else {\n              invThroughput = 0;\n            }\n\n            var systemBitrate = Math.floor(1 / (invBandwidth + invThroughput));\n\n            return systemBitrate;\n          },\n          set: function set() {\n            _videoJs2['default'].log.error('The \"systemBandwidth\" property is read-only');\n          }\n        }\n      });\n\n      Object.defineProperties(this.stats, {\n        bandwidth: {\n          get: function get() {\n            return _this3.bandwidth || 0;\n          },\n          enumerable: true\n        },\n        mediaRequests: {\n          get: function get() {\n            return _this3.masterPlaylistController_.mediaRequests_() || 0;\n          },\n          enumerable: true\n        },\n        mediaRequestsAborted: {\n          get: function get() {\n            return _this3.masterPlaylistController_.mediaRequestsAborted_() || 0;\n          },\n          enumerable: true\n        },\n        mediaRequestsTimedout: {\n          get: function get() {\n            return _this3.masterPlaylistController_.mediaRequestsTimedout_() || 0;\n          },\n          enumerable: true\n        },\n        mediaRequestsErrored: {\n          get: function get() {\n            return _this3.masterPlaylistController_.mediaRequestsErrored_() || 0;\n          },\n          enumerable: true\n        },\n        mediaTransferDuration: {\n          get: function get() {\n            return _this3.masterPlaylistController_.mediaTransferDuration_() || 0;\n          },\n          enumerable: true\n        },\n        mediaBytesTransferred: {\n          get: function get() {\n            return _this3.masterPlaylistController_.mediaBytesTransferred_() || 0;\n          },\n          enumerable: true\n        },\n        mediaSecondsLoaded: {\n          get: function get() {\n            return _this3.masterPlaylistController_.mediaSecondsLoaded_() || 0;\n          },\n          enumerable: true\n        }\n      });\n\n      this.tech_.one('canplay', this.masterPlaylistController_.setupFirstPlay.bind(this.masterPlaylistController_));\n\n      this.masterPlaylistController_.on('selectedinitialmedia', function () {\n        // Add the manual rendition mix-in to HlsHandler\n        (0, _renditionMixin2['default'])(_this3);\n      });\n\n      // the bandwidth of the primary segment loader is our best\n      // estimate of overall bandwidth\n      this.on(this.masterPlaylistController_, 'progress', function () {\n        this.tech_.trigger('progress');\n      });\n\n      // In the live case, we need to ignore the very first `seeking` event since\n      // that will be the result of the seek-to-live behavior\n      this.on(this.masterPlaylistController_, 'firstplay', function () {\n        this.ignoreNextSeekingEvent_ = true;\n      });\n\n      this.tech_.ready(function () {\n        return _this3.setupQualityLevels_();\n      });\n\n      // do nothing if the tech has been disposed already\n      // this can occur if someone sets the src in player.ready(), for instance\n      if (!this.tech_.el()) {\n        return;\n      }\n\n      this.tech_.src(_videoJs2['default'].URL.createObjectURL(this.masterPlaylistController_.mediaSource));\n    }\n\n    /**\n     * Initializes the quality levels and sets listeners to update them.\n     *\n     * @method setupQualityLevels_\n     * @private\n     */\n  }, {\n    key: 'setupQualityLevels_',\n    value: function setupQualityLevels_() {\n      var _this4 = this;\n\n      var player = _videoJs2['default'].players[this.tech_.options_.playerId];\n\n      if (player && player.qualityLevels) {\n        this.qualityLevels_ = player.qualityLevels();\n\n        this.masterPlaylistController_.on('selectedinitialmedia', function () {\n          handleHlsLoadedMetadata(_this4.qualityLevels_, _this4);\n        });\n\n        this.playlists.on('mediachange', function () {\n          handleHlsMediaChange(_this4.qualityLevels_, _this4.playlists);\n        });\n      }\n    }\n\n    /**\n     * Begin playing the video.\n     */\n  }, {\n    key: 'play',\n    value: function play() {\n      this.masterPlaylistController_.play();\n    }\n\n    /**\n     * a wrapper around the function in MasterPlaylistController\n     */\n  }, {\n    key: 'setCurrentTime',\n    value: function setCurrentTime(currentTime) {\n      this.masterPlaylistController_.setCurrentTime(currentTime);\n    }\n\n    /**\n     * a wrapper around the function in MasterPlaylistController\n     */\n  }, {\n    key: 'duration',\n    value: function duration() {\n      return this.masterPlaylistController_.duration();\n    }\n\n    /**\n     * a wrapper around the function in MasterPlaylistController\n     */\n  }, {\n    key: 'seekable',\n    value: function seekable() {\n      return this.masterPlaylistController_.seekable();\n    }\n\n    /**\n    * Abort all outstanding work and cleanup.\n    */\n  }, {\n    key: 'dispose',\n    value: function dispose() {\n      if (this.playbackWatcher_) {\n        this.playbackWatcher_.dispose();\n      }\n      if (this.masterPlaylistController_) {\n        this.masterPlaylistController_.dispose();\n      }\n      if (this.qualityLevels_) {\n        this.qualityLevels_.dispose();\n      }\n      _get(Object.getPrototypeOf(HlsHandler.prototype), 'dispose', this).call(this);\n    }\n  }]);\n\n  return HlsHandler;\n})(Component);\n\nvar HlsSourceHandler = function HlsSourceHandler(mode) {\n  return {\n    canHandleSource: function canHandleSource(srcObj) {\n      var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n      var localOptions = _videoJs2['default'].mergeOptions(_videoJs2['default'].options, options);\n\n      // this forces video.js to skip this tech/mode if its not the one we have been\n      // overriden to use, by returing that we cannot handle the source.\n      if (localOptions.hls && localOptions.hls.mode && localOptions.hls.mode !== mode) {\n        return false;\n      }\n      return HlsSourceHandler.canPlayType(srcObj.type, localOptions);\n    },\n    handleSource: function handleSource(source, tech) {\n      var options = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];\n\n      var localOptions = _videoJs2['default'].mergeOptions(_videoJs2['default'].options, options, { hls: { mode: mode } });\n\n      if (mode === 'flash') {\n        // We need to trigger this asynchronously to give others the chance\n        // to bind to the event when a source is set at player creation\n        tech.setTimeout(function () {\n          tech.trigger('loadstart');\n        }, 1);\n      }\n\n      tech.hls = new HlsHandler(source, tech, localOptions);\n      tech.hls.xhr = (0, _xhr2['default'])();\n\n      tech.hls.src(source.src);\n      return tech.hls;\n    },\n    canPlayType: function canPlayType(type) {\n      var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n      var localOptions = _videoJs2['default'].mergeOptions(_videoJs2['default'].options, options);\n\n      if (HlsSourceHandler.canPlayType(type, localOptions)) {\n        return 'maybe';\n      }\n      return '';\n    }\n  };\n};\n\nHlsSourceHandler.canPlayType = function (type, options) {\n  // No support for IE 10 or below\n  if (_videoJs2['default'].browser.IE_VERSION && _videoJs2['default'].browser.IE_VERSION <= 10) {\n    return false;\n  }\n\n  var mpegurlRE = /^(audio|video|application)\\/(x-|vnd\\.apple\\.)?mpegurl/i;\n\n  // favor native HLS support if it's available\n  if (!options.hls.overrideNative && Hls.supportsNativeHls) {\n    return false;\n  }\n  return mpegurlRE.test(type);\n};\n\nif (typeof _videoJs2['default'].MediaSource === 'undefined' || typeof _videoJs2['default'].URL === 'undefined') {\n  _videoJs2['default'].MediaSource = _videojsContribMediaSources.MediaSource;\n  _videoJs2['default'].URL = _videojsContribMediaSources.URL;\n}\n\nvar flashTech = _videoJs2['default'].getTech('Flash');\n\n// register source handlers with the appropriate techs\nif (_videojsContribMediaSources.MediaSource.supportsNativeMediaSources()) {\n  _videoJs2['default'].getTech('Html5').registerSourceHandler(HlsSourceHandler('html5'), 0);\n}\nif (_globalWindow2['default'].Uint8Array && flashTech) {\n  flashTech.registerSourceHandler(HlsSourceHandler('flash'));\n}\n\n_videoJs2['default'].HlsHandler = HlsHandler;\n_videoJs2['default'].HlsSourceHandler = HlsSourceHandler;\n_videoJs2['default'].Hls = Hls;\nif (!_videoJs2['default'].use) {\n  _videoJs2['default'].registerComponent('Hls', Hls);\n}\n_videoJs2['default'].m3u8 = _m3u8Parser2['default'];\n_videoJs2['default'].options.hls = _videoJs2['default'].options.hls || {};\n\nif (_videoJs2['default'].registerPlugin) {\n  _videoJs2['default'].registerPlugin('reloadSourceOnError', _reloadSourceOnError2['default']);\n} else {\n  _videoJs2['default'].plugin('reloadSourceOnError', _reloadSourceOnError2['default']);\n}\n\nmodule.exports = {\n  Hls: Hls,\n  HlsHandler: HlsHandler,\n  HlsSourceHandler: HlsSourceHandler\n};\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{\"./bin-utils\":2,\"./config\":3,\"./master-playlist-controller\":5,\"./playback-watcher\":8,\"./playlist\":11,\"./playlist-loader\":9,\"./playlist-selectors.js\":10,\"./reload-source-on-error\":13,\"./rendition-mixin\":14,\"./xhr\":21,\"aes-decrypter\":25,\"global/document\":31,\"global/window\":32,\"m3u8-parser\":33,\"videojs-contrib-media-sources\":74}]},{},[77])(77)\n});","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',[_c('page-title-bar'),_c('v-container',{attrs:{\"fluid\":\"\",\"pt-0\":\"\"}},[_c('app-card',{attrs:{\"fullBlock\":true,\"heading\":_vm.$t('message.baseConfig'),\"customClasses\":\"mb-30\"}},[_c('div',{attrs:{\"target\":\"_blank\",\"href\":\"https://github.com/surmon-china/vue-video-player/tree/master/examples/01-video.vue\"}}),_c('video-player',{ref:\"videoPlayer\",staticClass:\"vjs-custom-skin\",attrs:{\"options\":_vm.playerOptions,\"playsinline\":true},on:{\"ready\":_vm.playerReadied}})],1),_c('app-card',{attrs:{\"fullBlock\":true,\"heading\":_vm.$t('message.audioTrackAndPlaysInline'),\"customClasses\":\"mb-30\"}},[_c('div',{attrs:{\"target\":\"_blank\",\"href\":\"https://github.com/surmon-china/vue-video-player/tree/master/examples/03-video.vue\"}}),_c('video-player',{staticClass:\"vjs-custom-skin\",attrs:{\"options\":_vm.playerOptions2,\"playsinline\":true},on:{\"ready\":function($event){_vm.playerReadied2($event)}}})],1),_c('app-card',{attrs:{\"fullBlock\":true,\"heading\":_vm.$t('message.hlsLive'),\"customClasses\":\"mb-30\"}},[_c('div',{attrs:{\"target\":\"_blank\",\"href\":\"https://github.com/surmon-china/vue-video-player/tree/master/examples/04-video.vue\"}}),_c('div',{staticClass:\"player\"},[_c('video-player',{staticClass:\"vjs-custom-skin\",attrs:{\"options\":_vm.playerOptions3},on:{\"ready\":_vm.playerReadied3}})],1)])],1)],1)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\n  <div>\n    <page-title-bar></page-title-bar>\n    <v-container fluid pt-0>\n      <app-card \n        :fullBlock=true\n        :heading=\"$t('message.baseConfig')\"\n        customClasses=\"mb-30\"\n      >\n        <div\n            target=\"_blank\"\n            href=\"https://github.com/surmon-china/vue-video-player/tree/master/examples/01-video.vue\">\n        </div>\n        <video-player  class=\"vjs-custom-skin\"\n                      ref=\"videoPlayer\"\n                      :options=\"playerOptions\"\n                      :playsinline=\"true\"\n                      @ready=\"playerReadied\">\n        </video-player>\n      </app-card>\n      <app-card\n        :fullBlock= true\n        :heading=\"$t('message.audioTrackAndPlaysInline')\"\n        customClasses=\"mb-30\"\n      >\n          <div\n            target=\"_blank\"\n            href=\"https://github.com/surmon-china/vue-video-player/tree/master/examples/03-video.vue\">\n          </div>\n          <video-player class=\"vjs-custom-skin\"\n            :options=\"playerOptions2\"\n            :playsinline=\"true\"\n            @ready=\"playerReadied2($event)\">\n          </video-player>\n      </app-card>\n      <app-card\n        :fullBlock= true\n        :heading=\"$t('message.hlsLive')\"\n        customClasses=\"mb-30\"\n      >\n        <div \n          target=\"_blank\" \n          href=\"https://github.com/surmon-china/vue-video-player/tree/master/examples/04-video.vue\">\n        </div>\n        <div class=\"player\">\n          <video-player class=\"vjs-custom-skin\" \n              :options=\"playerOptions3\"\n              @ready=\"playerReadied3\"\n          >\n          </video-player>\n        </div>\n      </app-card>\n    </v-container>\n   </div> \n</template>\n\n<script>\n  // videojs\n  import videojs from 'video.js'\n  window.videojs = videojs\n  // hls plugin for videojs6\n  require('videojs-contrib-hls/dist/videojs-contrib-hls.js')\n\n  export default {\n    data() {\n      return {\n        // videojs options\n        playerOptions: {\n          height: '360',\n          autoplay: false,\n          muted: false,\n          language: 'en',\n          playbackRates: [0.7, 1.0, 1.5, 2.0],\n          sources: [{\n            type: \"video/mp4\",\n            // mp4\n            src: \"http://vjs.zencdn.net/v/oceans.mp4\",\n          }],\n          poster: \"https://surmon-china.github.io/vue-quill-editor/static/images/surmon-1.jpg\",\n        },\n        playerOptions2: {\n          height: '360',\n          playbackRates: [0.7, 1, 1.3, 1.5, 1.7],\n          sources: [{\n            type: \"video/mp4\",\n            src: \"http://7xkwa7.media1.z0.glb.clouddn.com/sample_video_L\"\n          }],\n          poster: \"https://surmon-china.github.io/vue-quill-editor/static/images/surmon-3.jpg\",\n        },\n        playerOptions3: {\n          // videojs and plugin options\n          height: '360',\n          sources: [{\n            withCredentials: false,\n            type: \"application/x-mpegURL\",\n            src: \"https://logos-channel.scaleengine.net/logos-channel/live/biblescreen-ad-free/playlist.m3u8\"\n          }],\n          controlBar: {\n            timeDivider: false,\n            durationDisplay: false\n          },\n          flash: { hls: { withCredentials: false }},\n          html5: { hls: { withCredentials: false }},\n          poster: \"https://surmon-china.github.io/vue-quill-editor/static/images/surmon-5.jpg\"\n        }\n      }\n    },\n    methods: {\n      // player is ready\n      playerReadied(player) {\n        // seek to 0s\n        console.log('example player 1 readied', player)\n        player.currentTime(0)\n      },\n       playerReadied2(player) {\n        const track = new videojs.AudioTrack({\n          id: 'my-spanish-audio-track',\n          kind: 'translation',\n          label: 'Spanish',\n          language: 'es'\n        })\n        player.audioTracks().addTrack(track)\n        // Get the current player's AudioTrackList object.\n        const audioTrackList = player.audioTracks()\n        // Listen to the \"change\" event.\n        audioTrackList.addEventListener('change', function() {\n          // Log the currently enabled AudioTrack label.\n          for (let i = 0; i < audioTrackList.length; i++) {\n            const track = audioTrackList[i]\n            if (track.enabled) {\n              videojs.log(track.label)\n              return\n            }\n          }\n        })\n      },\n      playerReadied3(player) {\n        var hls = player.tech({ IWillNotUseThisInPlugins: true }).hls\n        player.tech_.hls.xhr.beforeRequest = function(options) {\n          return options\n        }\n      }\n    }\n  }\n</script>","import mod from \"-!../../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./VideoPlayer.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./VideoPlayer.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./VideoPlayer.vue?vue&type=template&id=79d73f5b&\"\nimport script from \"./VideoPlayer.vue?vue&type=script&lang=js&\"\nexport * from \"./VideoPlayer.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\ncomponent.options.__file = \"VideoPlayer.vue\"\nexport default component.exports"],"sourceRoot":""}